--PKGB WS_INC_AE BKP PROD 091023
CREATE OR REPLACE PACKAGE BODY PAY.GRG_HDL_CARGA_INCIDENCIAS_AE_PKG AS 
 
                 x_hdl_name         VARCHAR2(250); 
				 x_imported_status  VARCHAR2(250); 
				 x_loaded_status    VARCHAR2(250); 
				 x_mensaje          VARCHAR2(4000); 
				 x_msg_detail       VARCHAR2(4000); 
                 x_status_process   VARCHAR2(250); 
                 x_error_count           NUMBER; 
                 x_import_success_count NUMBER; 
                 
 
                 
PROCEDURE output (p_message IN CLOB) 
       
    IS 
 
  l_buffer  CLOB; 
  l_amount  binary_integer := 4000; 
  l_pos     integer := 1; 
  l_length  integer := 1; 
 
                
    BEGIN 
        l_length := dbms_lob.getlength(p_message); 
        loop 
                l_buffer := dbms_lob.substr (p_message, l_amount, l_pos); 
                utl_file.put(v_file_load, l_buffer); 
                utl_file.fflush(v_file_load); 
                l_pos := l_pos + l_amount; 
                exit when l_pos >= l_length; 
         end loop; 
        --UTL_FILE.put_line (v_file_load, substr(p_message,1,2000)); 
        --DBMS_OUTPUT.put_line (p_message); 
    EXCEPTION 
	WHEN UTL_FILE.invalid_path THEN 
		raise_application_error (-20000, 'ERROR: Invalid PATH FOR file. '||SQLERRM); 
    WHEN OTHERS THEN 
    null; 
		--DBMS_OUTPUT.put_line (p_message); 
	END output;   
 
 FUNCTION toks_hcm_schedule_import_process (  archivo      IN VARCHAR2                                          
											, p_id_proces IN VARCHAR2 
										   )   
			RETURN VARCHAR2   
				 IS   
				  
			l_ws_url             VARCHAR2 (500);   
			l_ws_action          VARCHAR2 (500) := 'urn:GenericSoap/GenericSoapOperation';   
			l_ws_response_clob   CLOB;   
			l_ws_envelope        CLOB;   
			l_message            VARCHAR2 (50);   
			l_ws_token           VARCHAR2(3650);  
            l_tipo               varchar2(50); 
            V_ID                 VARCHAR2(200); 
		BEGIN   
			l_ws_envelope :=   
				'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://xmlns.oracle.com/apps/hcm/common/dataLoader/core/dataLoaderIntegrationService/types/">     
					<soapenv:Body>     
					 <typ:importAndLoadData>     
					   <typ:ContentId>' || archivo || '</typ:ContentId>     
					  <typ:Parameters/>     
					  </typ:importAndLoadData>     
					</soapenv:Body>     
				   </soapenv:Envelope>';   
	   
				GRG_COMMON_CONNECTIONS.get_security_token( l_ws_token);  
			 
			apex_web_service.g_request_headers (1).name  := 'Authorization';  
			apex_web_service.g_request_headers (1).value :=  l_ws_token;  
			  
			l_ws_url := GRG_COMMON_CONNECTIONS.get_parameter('HDL_URL' );  
		   
			apex_web_service.g_request_headers (2).name := 'SOAPAction';   
			apex_web_service.g_request_headers (2).VALUE := l_ws_action;   
			apex_web_service.g_request_headers (3).name := 'Content-Type';   
			apex_web_service.g_request_headers (3).VALUE :=  'text/xml; charset=UTF-8';   
			l_ws_response_clob :=   
				apex_web_service.make_rest_request (   
					p_url           => l_ws_url,   
					p_http_method   => 'POST',   
					p_body          => l_ws_envelope);   
	   
	   
			SELECT  max(hdl_process_id)  
			  into    l_message 
			  FROM    XMLTABLE( 
						xmlnamespaces ( 
							'http://schemas.xmlsoap.org/soap/envelope/'   AS "env", 
							'http://xmlns.oracle.com/apps/hcm/common/dataLoader/core/dataLoaderIntegrationService/types/' AS "ns0"), 
						'/env:Envelope/env:Body/ns0:importAndLoadDataResponse' 
						PASSING XMLTYPE.createXML( l_ws_response_clob ) 
						COLUMNS hdl_process_id   NUMBER PATH 'ns0:result' 
					) dat; 
			 
             
            V_ID := l_message; 
 
            UPDATE GRG_AE_HDL_LOG 
               SET ID_HDL = V_ID, 
                   STATUS = 'FINALIZADO' 
             WHERE ID = p_id_proces; 
 
			RETURN l_message; 
             
            COMMIT; 
		EXCEPTION   
			WHEN OTHERS   
			THEN   
				DBMS_OUTPUT.put_line ('Error al enviar archivo en toks_hcm_schedule_import_process: ' || SQLERRM);   
		END toks_hcm_schedule_import_process;   
 
PROCEDURE get_genera_hdl(p_hdl_id      IN NUMBER, 
                         p_hdl_name    IN VARCHAR2, 
                         p_hdl_content IN CLOB, 
                         x_hdl_id      OUT NUMBER, 
                         x_hdl_name    OUT VARCHAR2 
                        ) 
IS  
l_base64enconde     CLOB; 
l_ws_envelope       CLOB; 
l_tempname          varchar2(9999); 
l_archivo           CLOB; 
v_archivo           CLOB := p_hdl_content; 
l_ws_url            VARCHAR2 (500) ; 
l_ws_action         VARCHAR2 (500) := 'http://xmlns.oracle.com/oxp/service/PublicReportService/ExternalReportWSSService/runReportRequest'; 
l_ws_response_clob  CLOB; 
l_result            CLOB; 
l_zip_file          VARCHAR2(3650); 
l_directory_path    VARCHAR2(3650); 
l_ws_token          VARCHAR2(3650); 
v_error_msg         VARCHAR2(512); 
 
BEGIN 
l_archivo := DecodeBASE64(v_archivo); 
 
v_file_load  := UTL_FILE.fopen('GRG_PAY_HDL', p_hdl_name||'.dat','w',32767); 
  
output(l_archivo); 
 
UTL_FILE.fclose (v_file_load); 
 
-----proceso de creacion del zip 
BEGIN 
   
  SELECT directory_path 
				INTO l_directory_path 
				FROM all_directories 
				WHERE directory_name = 'GRG_PAY_HDL'; 
			  --l_tempname:=  p_tempname ;   
    
   dbms_output.put_line('DIRECTORIO: '||l_directory_path); 
 
EXCEPTION 
     WHEN OTHERS THEN 
			dbms_output.put_line ('ERROR: Al obtener el directorio --> '||SQLERRM);  
END; 
 
l_tempname := p_hdl_name||'_'||to_char(p_hdl_id); 
 
  l_zip_file:= GRG_PAY_ZIP_FILE_PKG.zip_file(  
                                            l_directory_path 
                                            ,p_hdl_name||'.dat' 
                                            ,l_tempname||'.zip' 
                                        ); 
 
            l_base64enconde := GRG_PAY_ZIP_FILE_PKG.base64_file (l_directory_path,l_tempname||'.zip'); 
 
             
			l_ws_envelope := 
							'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ucm="http://www.oracle.com/UCM">   
							<soapenv:Body>   
									<ucm:GenericRequest webKey="cs">   
										<ucm:Service IdcService="CHECKIN_UNIVERSAL">   
											<ucm:User/>   
											<ucm:Document>   
												<ucm:Field name="dDocName">'||l_tempname||'</ucm:Field>   
												<ucm:Field name="dDocTitle">'||l_tempname||'.zip</ucm:Field>   
												<ucm:Field name="dDocType">Document</ucm:Field>   
												<ucm:Field name="dSecurityGroup">FAFusionImportExport</ucm:Field>   
												<ucm:Field name="dDocAccount">hcm$/dataloader$/import$</ucm:Field>   
												<ucm:Field name="primaryFile">'||l_tempname||'.zip</ucm:Field>   
												<ucm:File href="'||l_tempname||'.zip" name="primaryFile">   
													<ucm:Contents>'||l_base64enconde||'</ucm:Contents>   
												</ucm:File>   
											</ucm:Document>   
										</ucm:Service>   
									</ucm:GenericRequest>   
								</soapenv:Body>   
							</soapenv:Envelope>'; 
 
            --------------------TOKEN----------------------------- 
            GRG_COMMON_CONNECTIONS.get_security_token( l_ws_token); 
			apex_web_service.g_request_headers (1).name  := 'Authorization'; 
			apex_web_service.g_request_headers (1).value := l_ws_token; 
 
			l_ws_url := GRG_COMMON_CONNECTIONS.get_parameter('IDCWS_URL'); 
 
		    apex_web_service.g_request_headers (2).name := 'SOAPAction'; 
			apex_web_service.g_request_headers (2).VALUE := l_ws_action; 
			apex_web_service.g_request_headers (3).name := 'Content-Type'; 
			apex_web_service.g_request_headers (3).VALUE :='text/xml; charset=UTF-8'; 
 
			DBMS_OUTPUT.put_line ('Envio archivo:' ||' '||l_ws_url); 
		 
			l_ws_response_clob := apex_web_service.make_rest_request (  
																		 p_url           => l_ws_url  
																		,p_http_method   => 'POST' 
																		,p_body          => l_ws_envelope 
																		--,p_username      => l_user_name 
																		--,p_password      => l_password 
																	  );  
 
INSERT INTO GRG_AE_HDL_LOG 
				   (ID, EXEC_DATE_I, EXEC_DATE_F, HDL_DATA, STATUS, CREATION_DATE, HDL_NAME) 
			VALUES (p_hdl_id, SYSDATE - 5/24, SYSDATE - 5/24, l_archivo, 'ENVIADO', SYSDATE - 5/24, l_tempname); 
 
COMMIT; 
 
l_result := TOKS_HCM_SCHEDULE_IMPORT_PROCESS (l_tempname,p_hdl_id); 
 
DBMS_OUTPUT.PUT_LINE(l_result); 
 
x_hdl_id   := p_hdl_id; 
x_hdl_name := p_hdl_name; 
 
EXCEPTION   
        WHEN UTL_FILE.invalid_path   
        THEN   
            dbms_output.put_line('ERROR: Invalid PATH FOR file.'); 
END get_genera_hdl;   
 
 
procedure main_star (p_hdl_id      IN NUMBER, 
                     p_hdl_name    IN VARCHAR2, 
                     p_hdl_content IN CLOB, 
                     x_hdl_id      OUT NUMBER, 
                     x_hdl_name    OUT VARCHAR2, 
                     x_hdl_status  OUT VARCHAR2) 
AS 
v_contar NUMBER; 
 
BEGIN  
 
SELECT COUNT(ID) TOTAL 
  INTO v_contar 
  FROM GRG_AE_HDL_LOG 
 WHERE 1=1 
   AND ID = p_hdl_id; 
  
DBMS_OUTPUT.PUT_LINE(v_contar); 
 
IF v_contar < 1 AND p_hdl_id IS NOT NULL THEN  
    
   DBMS_OUTPUT.PUT_LINE('ENTRO'); 
 
   BEGIN 
     IF p_hdl_name IS NOT NULL AND p_hdl_content IS NOT NULL THEN  
     
       get_genera_hdl(p_hdl_id,p_hdl_name,p_hdl_content,x_hdl_id,x_hdl_name); 
       x_hdl_status := 'PROCESO_ENVIADO'; 
      ELSE 
     
       x_hdl_id     := p_hdl_id; 
       x_hdl_name   := p_hdl_name; 
       x_hdl_status := 'No se puede generar el archivo .dat';    
     END IF; 
   END; 
    
ELSE  
x_hdl_id     := p_hdl_id; 
x_hdl_name   := p_hdl_name; 
x_hdl_status := 'PROCESO_NO_ENVIADO'; 
END IF; 
 
END main_star; 
 
 
PROCEDURE status (p_id_rastreo IN VARCHAR2) 
 
AS 
 
l_ws_action          VARCHAR2 (500) := 'http://xmlns.oracle.com/oxp/service/PublicReportService/ExternalReportWSSService/runReportRequest'; 
l_ws_envelope        CLOB; 
l_clob               CLOB; 
v_hdl_name         VARCHAR2(4000); 
v_imported_status  VARCHAR2(4000); 
v_loaded_status    VARCHAR2(4000); 
v_mensaje          VARCHAR2(4000); 
v_msg_detail       VARCHAR2(4000); 
v_id_rastreo       VARCHAR2(4000); 
v_error_count           NUMBER; 
v_import_success_count  NUMBER; 
 
 
BEGIN 
 
select ID_HDL 
  into v_id_rastreo 
  from GRG_AE_HDL_LOG 
 where 1=1 
   and id = p_id_rastreo; 
	 
		l_ws_envelope :=  '<soap:Envelope xmlns:pub="http://xmlns.oracle.com/oxp/service/PublicReportService" xmlns:soap="http://www.w3.org/2003/05/soap-envelope"> 
							<soap:Body> 
							<pub:runReport> 
							<pub:reportRequest> 
							<pub:parameterNameValues> 
							 
							 
							     <pub:item> 
								<pub:name>P_CONTENT_ID</pub:name> 
								<pub:values> 
								<pub:item>'|| v_id_rastreo ||'</pub:item> 
								</pub:values> 
								</pub:item> 
								               
							</pub:parameterNameValues> 
							<pub:reportAbsolutePath>/Reportes Custom/PAY/GRG Automatizacion de Carga de Incidencias de AE/HDLCargaIncidenciasDT.xdo</pub:reportAbsolutePath> 
							<pub:sizeOfDataChunkDownload>-1</pub:sizeOfDataChunkDownload> 
							</pub:reportRequest> 
							</pub:runReport> 
							</soap:Body> 
							</soap:Envelope>'; 
 
--------------------TOKEN------------------------- 
dbms_output.put_line(l_ws_envelope); 
 
	GRG_COMMON_CONNECTIONS.get_otbi_report(l_ws_envelope   => l_ws_envelope 
										  ,l_user_token    => NULL 
										  ,x_ws_response   => l_clob  
										 
										  ); 
--dbms_output.put_line(l_clob); 
 
		FOR i IN (SELECT  
					 XML_DATA.UCM_CONTENT_ID 
					,XML_DATA.ARCHIVO 
					,XML_DATA.IMPORTED_STATUS 
					,XML_DATA.LOADED_STATUS 
					,XML_DATA.ZIP_FILE 
					,XML_DATA.MENSAJE 
					,XML_DATA.MSG_DETAIL 
                    ,XML_DATA.IMPORT_SUCCESS_COUNT 
                    ,XML_DATA.ERROR_COUNT   
                    ,XML_DATA.DATA_SET_BUS_OBJ_ID 
 
				  FROM XMLTABLE ( 
								   '/DATA_DS/G_1' 
									PASSING XMLTYPE.createXML (l_clob) 
									COLUMNS  
									 UCM_CONTENT_ID  VARCHAR2(250) path 'UCM_CONTENT_ID' 
									,ARCHIVO         VARCHAR2(250) path 'ARCHIVO' 
									,IMPORTED_STATUS VARCHAR2(250) path 'IMPORTED_STATUS' 
									,LOADED_STATUS   VARCHAR2(250) path 'LOADED_STATUS' 
									,ZIP_FILE        VARCHAR2(250) path 'ZIP_FILE' 
									,MENSAJE         CLOB          path 'MENSAJE' 
									,MSG_DETAIL      CLOB          path 'MSG_DETAIL' 
                                    ,IMPORT_SUCCESS_COUNT  NUMBER  path 'TOTAL_OBJECTS' 
                                    ,ERROR_COUNT           NUMBER  path 'FAILED_OBJECTS' 
                                    ,DATA_SET_BUS_OBJ_ID   NUMBER  path 'DATA_SET_BUS_OBJ_ID' 
 
								 									 
									) XML_DATA) 
		LOOP 
 
UPDATE GRG_AE_HDL_LOG 
   SET UCM_CONTENT_ID  = i.UCM_CONTENT_ID, 
       ARCHIVO	       = i.ARCHIVO, 
       IMPORTED_STATUS = i.IMPORTED_STATUS, 
       LOADED_STATUS   = i.LOADED_STATUS, 
       ZIP_FILE        = i.ZIP_FILE, 
       MENSAJE         = i.MENSAJE, 
       MSG_DETAIL      = i.MSG_DETAIL, 
       TOTAL_OBJECTS   = i.IMPORT_SUCCESS_COUNT, 
       FAILED_OBJECTS  = i.ERROR_COUNT, 
       DATA_SET_BUS_OBJ_ID_ = i.DATA_SET_BUS_OBJ_ID 
 
 
 
 WHERE 1=1 
   AND ID = p_id_rastreo; 
 
dbms_output.put_line('NOMBRE ARCHIVO: '||i.ARCHIVO); 
 
END LOOP; 
COMMIT; 
 
SELECT hdl_name, 
       imported_status, 
       loaded_status, 
       mensaje, 
       msg_detail, 
       FAILED_OBJECTS, 
       TOTAL_OBJECTS 
  INTO v_hdl_name, 
       v_imported_status, 
       v_loaded_status, 
       v_mensaje, 
       v_msg_detail, 
       v_error_count, 
       v_import_success_count 
 
  FROM GRG_AE_HDL_LOG 
 WHERE 1=1 
   AND ID = p_id_rastreo; 
 
x_hdl_name        := v_hdl_name; 
x_imported_status := v_imported_status; 
x_loaded_status   := v_loaded_status; 
x_mensaje         := v_mensaje; 
x_msg_detail      := v_msg_detail; 
x_error_count     := v_error_count; 
x_import_success_count := v_import_success_count; 
 
---JSON-- 
 
apex_json.open_object; 
apex_json.write ('HDL_Name',x_hdl_name); 
apex_json.write ('imported_status',x_imported_status); 
apex_json.write ('loaded_status',x_loaded_status); 
apex_json.write ('mensaje',x_mensaje); 
apex_json.open_array ('errores'); 
    FOR i IN (   
                SELECT  XML_DATA.MSG_TEXT 
                FROM    XMLTABLE ( 
								   '/DATA_DS/G_1/G_2' 
									PASSING XMLTYPE.createXML (l_clob) 
									COLUMNS  
									MSG_TEXT    VARCHAR2(4000) path 'MSG_TEXT' 
								 ) XML_DATA 
             )  
    LOOP 
     
    apex_json.open_object; 
    apex_json.write ('mensaje',i.MSG_TEXT); 
    apex_json.close_object; 
 
    END LOOP; 
apex_json.close_array; 
--apex_json.write ('msg_detail',x_msg_detail); 
apex_json.write ('estatus_proceso',x_status_process); 
apex_json.write ('objetos_error',x_error_count); 
apex_json.write ('total_objetos',x_import_success_count); 
apex_json.close_object; 
   
EXCEPTION 
     WHEN OTHERS THEN 
			dbms_output.put_line ('ERROR: '||SQLERRM);  
END  status; 
 
PROCEDURE main_status_star(p_id_rastreo IN VARCHAR2)
AS
v_total number;
BEGIN

select count(1) total
  into v_total
  from GRG_AE_HDL_LOG
 where 1=1
   and id = p_id_rastreo;

IF v_total > 0 then
  IF p_id_rastreo IS NOT NULL  THEN
     status(p_id_rastreo);
     x_status_process := 'PROCESO ENVIADO';
  ELSE
     x_status_process := 'EL PROCESO NO SE PUDO EJECUTAR';
  END IF;
ELSE
   x_status_process := 'EL REGISTRO NO EXISTE';
END IF;
EXCEPTION
     WHEN OTHERS THEN
			dbms_output.put_line ('ERROR: Al obtener el directorio --> '||SQLERRM); 
            x_status_process := 'ERROR EN EL SERVIDOR';
			
END main_status_star; 
 
FUNCTION DecodeBASE64(InBase64Char IN OUT NOCOPY CLOB)  
RETURN CLOB IS 
 
    blob_loc BLOB; 
    clob_trim CLOB; 
    res CLOB; 
    p_charsetname varchar2(100) := 'WE8ISO8859P1'; 
     
 
 
    lang_context INTEGER := DBMS_LOB.DEFAULT_LANG_CTX; 
    dest_offset INTEGER := 1; 
    src_offset INTEGER := 1; 
    read_offset INTEGER := 1; 
    warning INTEGER; 
    ClobLen INTEGER := DBMS_LOB.GETLENGTH(InBase64Char); 
 
    amount INTEGER := 7700; --1440 
    buffer RAW(32767); --1440 
    stringBuffer VARCHAR2(32767); --1440 
 
BEGIN 
 
 
    IF InBase64Char IS NULL OR NVL(ClobLen, 0) = 0 THEN  
        RETURN NULL; 
       
    --ELSIF ClobLen<= 32000 THEN 
        --RETURN UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(InBase64Char))); 
    END IF;   
      
 
    ClobLen := DBMS_LOB.GETLENGTH(InBase64Char); 
    DBMS_LOB.CREATETEMPORARY(clob_trim, TRUE); 
    LOOP 
        EXIT WHEN read_offset > ClobLen; 
        stringBuffer := REPLACE(REPLACE(DBMS_LOB.SUBSTR(InBase64Char, amount, read_offset), CHR(13), NULL), CHR(10), NULL); 
        DBMS_LOB.WRITEAPPEND(clob_trim, LENGTH(stringBuffer), stringBuffer); 
        read_offset := read_offset + amount; 
    END LOOP; 
 
    read_offset := 1; 
    ClobLen := DBMS_LOB.GETLENGTH(clob_trim); 
    DBMS_LOB.CREATETEMPORARY(blob_loc, TRUE); 
    LOOP 
        EXIT WHEN read_offset > ClobLen; 
        buffer := UTL_ENCODE.BASE64_DECODE(UTL_RAW.CAST_TO_RAW(DBMS_LOB.SUBSTR(clob_trim, amount, read_offset))); 
        DBMS_LOB.WRITEAPPEND(blob_loc, DBMS_LOB.GETLENGTH(buffer), buffer); 
        read_offset := read_offset + amount; 
    END LOOP; 
 
    DBMS_LOB.CREATETEMPORARY(res, TRUE); 
    DBMS_LOB.CONVERTTOCLOB( 
        res,  
        blob_loc,  
        DBMS_LOB.LOBMAXSIZE,  
        dest_offset,  
        src_offset,   
        CASE WHEN p_charsetname IS NOT NULL THEN NLS_CHARSET_ID (p_charsetname) ELSE DBMS_LOB.default_csid END,  
        lang_context,  
        warning); 
            
 
    DBMS_LOB.FREETEMPORARY(blob_loc); 
    DBMS_LOB.FREETEMPORARY(clob_trim); 
    RETURN res;     
 
END DecodeBASE64; 
end GRG_HDL_CARGA_INCIDENCIAS_AE_PKG; 
 
 

/

