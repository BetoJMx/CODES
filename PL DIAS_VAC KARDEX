--PL DIAS_VAC KARDEX 
DECLARE
	--  Para Salida del tipo procedure-call
	TYPE refcursor IS REF CURSOR;
	xdo_cursor            refcursor;
	-- Variables de trabajo
	l_data_clob         CLOB; 
	l_elementos         CLOB;
	l_elem_name         CLOB;
	l_elem_value        CLOB;
	l_cabecero          CLOB;
	l_elemen_cad        CLOB;
	--+
	l_tab_sdi_name		VARCHAR2(250);
	l_antiguedad		NUMBER := 0;
	v_dias_vac			NUMBER;
	l_dias_vac			NUMBER;
	v_cont				NUMBER;
	v_loop				NUMBER := 0;

BEGIN
	--
	l_data_clob := EMPTY_CLOB();
	--
	l_tab_sdi_name := '';
	l_antiguedad := 0;
    --
	FOR i1 IN (
		WITH GRG_SDI_FACTOR AS (
				SELECT  pvdt.name               value_definition_name,
						pvdf2.base_name         tabla,
						pvdf3.base_name         factor,
						haou.name               tru,
						prdf.base_name          tabla_sdi,
						haou.organization_id    tru_id
				FROM    pay_value_definitions_tl   pvdt,
						pay_value_definitions_f    pvdf,
						pay_value_definitions_f    pvdf2,
						pay_value_definitions_f    pvdf3,
						pay_range_items_f          prif,
						hr_all_organization_units  haou,
						pay_range_items_f          prif2,
						pay_rate_definitions_f     prdf
				WHERE   1 = 1 
						AND pvdt.value_defn_id = pvdf.value_defn_id
						AND prif.value_defn_id = pvdf2.value_defn_id
						AND prif.low_value_text = haou.organization_id
						AND prif2.value_defn_id = pvdf3.value_defn_id
						--+
						AND prdf.rate_definition_id = prif2.value1
						AND pvdf.value_defn_id = pvdf2.parent_value_defn_id
						AND pvdf2.value_defn_id = pvdf3.parent_value_defn_id
						AND pvdt.name = 'Fixed SDI Calculation'
						AND pvdt.LANGUAGE = 'US'
						AND TRUNC(SYSDATE) BETWEEN pvdf.effective_start_date AND pvdf.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN pvdf2.effective_start_date AND pvdf2.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN pvdf3.effective_start_date AND pvdf3.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN prif.effective_start_date AND prif.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN prif2.effective_start_date AND prif2.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN prdf.effective_start_date AND prdf.effective_END_date
						AND TRUNC(SYSDATE) BETWEEN haou.effective_start_date AND haou.effective_END_date
		)
		SELECT  DISTINCT pwaev.procd_date AS periodo,
				ABS(pwaev.value) AS tomados,
				gsf.tabla_sdi,
				TRUNC((MONTHS_BETWEEN(pwaev.procd_date, psdf.seniority_date)) / 12)  ant
		FROM    PER_ALL_PEOPLE_F            papf,
				PER_SENIORITY_DATES_F       psdf,
				per_seniority_dates_setup   psds,
				--ANC_PER_ABS_ENTRIES         apae,
				(
					SELECT  apaed.per_accrual_entry_dtl_id,
							apaed.per_accrual_entry_id,
							apaed.value,
							apaed.type,
							apaed.person_id,
							apaed.procd_date,
							apaed.legal_employer_id,
							apaed.assignment_id,
							apaed.type AS ap_type,
							papf.person_number,
							ppnf.full_name,
							paam.organization_id,
							dept.name  department,
							paam.legal_entity_id,
							absence_plan.name        absence_plan_name
					FROM    anc_per_acrl_entry_dtls apaed
							JOIN fnd_lookup_values_tl flvt
								ON (flvt.lookup_type = 'ANC_ACCRUAL_ENTRY_TYPE'
								AND flvt.lookup_code = apaed.type
								AND flvt.language = 'US')
							JOIN per_all_people_f papf
								ON (apaed.person_id = papf.person_id
								AND TRUNC(sysdate) BETWEEN papf.effective_start_date and papf.effective_end_date)
							JOIN per_person_names_f ppnf
								ON (ppnf.name_type = 'GLOBAL'
								AND ppnf.person_id = apaed.person_id
								AND TRUNC(SYSDATE) BETWEEN ppnf.effective_start_date and ppnf.effective_end_date)
							JOIN per_all_assignments_m paam
								ON (paam.assignment_id = apaed.assignment_id
								AND paam.person_id = apaed.person_id
								AND paam.primary_assignment_flag = 'Y'
								AND paam.assignment_type = 'E'
								AND TRUNC(SYSDATE) between paam.effective_start_date and paam.effective_end_date)
							LEFT OUTER JOIN
								(
									SELECT  flvt1.lookup_code,
											flvt1.meaning
									FROM    fnd_lookup_values_tl flvt1
									WHERE   flvt1.lookup_type = 'ANC_ABS_PLAN_OTHER_REASONS'
											AND flvt1.language = 'US'
								) adj_reason
								ON (apaed.adjustment_reason = adj_reason.lookup_code)
							LEFT OUTER JOIN
								( 
									SELECT  hauft.organization_id,
											hauft.NAME
									FROM    HR_ORG_UNIT_CLASSIFICATIONS_F houcf,
											HR_ALL_ORGANIZATION_UNITS_F haouf,
											HR_ORGANIZATION_UNITS_F_TL hauft
									WHERE   haouf.ORGANIZATION_ID = houcf.ORGANIZATION_ID
											AND haouf.ORGANIZATION_ID = hauft.ORGANIZATION_ID
											AND haouf.EFFECTIVE_START_DATE BETWEEN houcf.EFFECTIVE_START_DATE AND houcf.EFFECTIVE_END_DATE
											AND hauft.LANGUAGE = 'US'
											AND hauft.EFFECTIVE_START_DATE = haouf.EFFECTIVE_START_DATE
											AND hauft.EFFECTIVE_END_DATE = haouf.EFFECTIVE_END_DATE
											AND houcf.CLASSIFICATION_CODE = 'DEPARTMENT'
											AND TRUNC(SYSDATE) BETWEEN hauft.effective_start_date AND hauft.effective_end_date

								) dept
								ON (paam.organization_id = dept.organization_id)
							LEFT OUTER JOIN
								(
									SELECT  hauft.organization_id,
											hauft.NAME,
											houcf.classification_code
									FROM    HR_ORG_UNIT_CLASSIFICATIONS_F houcf,
											HR_ALL_ORGANIZATION_UNITS_F haouf,
											HR_ORGANIZATION_UNITS_F_TL hauft
									WHERE   haouf.ORGANIZATION_ID = houcf.ORGANIZATION_ID
											AND haouf.ORGANIZATION_ID = hauft.ORGANIZATION_ID
											AND haouf.EFFECTIVE_START_DATE BETWEEN houcf.EFFECTIVE_START_DATE AND houcf.EFFECTIVE_END_DATE
											AND hauft.LANGUAGE = 'US'
											AND hauft.EFFECTIVE_START_DATE = haouf.EFFECTIVE_START_DATE
											AND hauft.EFFECTIVE_END_DATE = haouf.EFFECTIVE_END_DATE
											AND houcf.CLASSIFICATION_CODE = 'HCM_LEMP'
											AND TRUNC(SYSDATE) BETWEEN hauft.effective_start_date AND hauft.effective_end_date
								) legal_employer
								ON (paam.legal_entity_id = legal_employer.organization_id)
							LEFT OUTER JOIN
								(
									SELECT  hauft.organization_id business_unit_id,
											hauft.NAME,
											houcf.classification_code
									FROM    HR_ORG_UNIT_CLASSIFICATIONS_F houcf,
											HR_ALL_ORGANIZATION_UNITS_F haouf,
											HR_ORGANIZATION_UNITS_F_TL hauft
									WHERE   haouf.ORGANIZATION_ID = houcf.ORGANIZATION_ID
											AND haouf.ORGANIZATION_ID = hauft.ORGANIZATION_ID
											AND haouf.EFFECTIVE_START_DATE BETWEEN houcf.EFFECTIVE_START_DATE AND houcf.EFFECTIVE_END_DATE
											AND hauft.LANGUAGE = 'US'
											AND hauft.EFFECTIVE_START_DATE = haouf.EFFECTIVE_START_DATE
											AND hauft.EFFECTIVE_END_DATE = haouf.EFFECTIVE_END_DATE
											AND houcf.CLASSIFICATION_CODE = 'FUN_BUSINESS_UNIT'
											AND TRUNC(SYSDATE) BETWEEN hauft.effective_start_date AND hauft.effective_end_date

								) business_unit
								ON (paam.business_unit_id = business_unit.business_unit_id)
							LEFT OUTER JOIN
								(
									SELECT  aapf.absence_plan_id,
											aapft.NAME
									FROM    anc_absence_plans_f_tl aapft,
											anc_absence_plans_f    aapf
									WHERE   aapft.absence_plan_id = aapf.absence_plan_id
											AND aapf.plan_status = 'A' -- added to pick only Active Absence Plans
											AND trunc(SYSDATE) BETWEEN aapf.effective_start_date AND aapf.effective_end_date
											AND trunc(SYSDATE) BETWEEN aapft.effective_start_date AND aapft.effective_end_date
											AND aapft.language = 'US'
								) absence_plan
								ON  apaed.pl_id  = absence_plan.absence_plan_id
					WHERE   pl_id = absence_plan.absence_plan_id
							AND apaed.value <> 0
					ORDER BY apaed.person_id,apaed.procd_date ASC
				) pwaev,
				GRG_SDI_FACTOR gsf,
				PAY_PAY_RELATIONSHIPS_DN pprd,
				PAY_DIR_CARDS_F pdc,
				PAY_DIR_REP_CARDS_F pdrc
		WHERE   1 = 1
				AND papf.person_number          = :estafeta
				AND papf.person_id              = psdf.person_id
				AND psdf.seniority_field        = 'ORA_ENT'
				AND psds.seniority_date_code    = psdf.seniority_date_code
				AND psds.active_flag            = 'Y'
				AND papf.person_id              = pwaev.person_id
				--AND apae.per_absence_entry_id   = pwaev.absence_entry_id
				AND pwaev.absence_plan_name     = 'Vacaci√≥n'
				AND pwaev.type                  = 'INIT'
				AND pprd.person_id              = papf.person_id
				AND pdc.payroll_relationship_id = pprd.payroll_relationship_id
				AND pdrc.dir_card_id            = pdc.dir_card_id
				AND gsf.tru_id                  = pdrc.tax_unit_id
				--+
				AND pwaev.procd_date  BETWEEN papf.effective_start_date AND papf.effective_end_date
				AND pwaev.procd_date  BETWEEN pprd.start_date AND pprd.end_date
				AND pwaev.procd_date  BETWEEN pdc.effective_start_date AND pdc.effective_end_date
				AND pwaev.procd_date  BETWEEN pdrc.effective_start_date AND pdrc.effective_end_date
		ORDER BY periodo
	) LOOP
		--
		v_loop := v_loop + 1;

		SELECT  prif2.value1 dias_vac
		INTO	v_dias_vac
		FROM    pay_value_definitions_tl  pvdt,
				pay_value_definitions_f   pvdf,
				pay_value_definitions_f   pvdf2,
				pay_range_items_f         prif,
				pay_value_definitions_f   pvdf3,
				pay_range_items_f         prif2
		WHERE   1 = 1 
				AND pvdt.value_defn_id = pvdf.value_defn_id
				AND pvdt.name = i1.tabla_sdi
				AND prif.value_defn_id = pvdf2.value_defn_id
				AND pvdt.language = 'US'
				AND pvdf.value_defn_id = pvdf2.parent_value_defn_id
				AND pvdf2.value_defn_id = pvdf3.parent_value_defn_id
				AND prif2.value_defn_id = pvdf3.value_defn_id
				AND i1.ant + 0.01 between TO_NUMBER(prif.low_value_text) and (
						SELECT  nvl( MIN(TO_NUMBER(prif_high.low_value_text)-.01), 100)
						FROM    pay_range_items_f prif_high
								,pay_value_definitions_f pvdf_high
						WHERE   1 = 1 
								AND pvdf_high.parent_value_defn_id = pvdf.value_defn_id
								AND prif_high.value_defn_id = pvdf_high.value_defn_id
								AND TO_NUMBER(prif_high.low_value_text) > TO_NUMBER(prif.low_value_text)
								AND i1.periodo BETWEEN pvdf_high.effective_start_date AND pvdf_high.effective_END_date
								AND i1.periodo BETWEEN prif_high.effective_start_date AND prif_high.effective_END_date
					)
				AND pvdf3.value_identifier = 'C' --DIAS VACACIONES
				AND i1.periodo BETWEEN pvdf.effective_start_date AND pvdf.effective_END_date
				AND i1.periodo BETWEEN pvdf2.effective_start_date AND pvdf2.effective_END_date
				AND i1.periodo BETWEEN prif.effective_start_date AND prif.effective_END_date
				AND i1.periodo BETWEEN pvdf3.effective_start_date AND pvdf3.effective_END_date
				AND i1.periodo BETWEEN prif2.effective_start_date AND prif2.effective_END_date;
		
		IF l_antiguedad < i1.ant OR v_loop = 1 THEN 
			 l_antiguedad := i1.ant;
			 v_cont := v_dias_vac;
			 l_dias_vac := v_dias_vac;
		END IF;
		
		v_cont := v_cont - i1.tomados;
		
		--  Crea XML  
		l_data_clob := l_data_clob
		            || '<G_Row>'
					||'<periodo>'||DBMS_XMLGEN.CONVERT(i1.periodo)||'</periodo>'    -- 01
					||'<dias>'||DBMS_XMLGEN.CONVERT(l_dias_vac)||'</dias>'          -- 02
					||'<tomados>'||DBMS_XMLGEN.CONVERT(i1.tomados)||'</tomados>'    -- 03
					||'<pendientes>'||DBMS_XMLGEN.CONVERT(v_cont)||'</pendientes>'  -- 04 
					||'<ant>'||DBMS_XMLGEN.CONVERT(i1.ant)||'</ant>'  -- 04 
					||'</G_Row>'; 

		l_dias_vac := l_dias_vac - i1.tomados; 
      -- 
	END LOOP;
    --
    OPEN :xdo_cursor FOR
  	SELECT l_data_clob
  	  FROM dual;
  END;
