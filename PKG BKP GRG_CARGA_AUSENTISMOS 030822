--PKG BKP GRG_CARGA_AUSENTISMOS 030822
create or replace package GRG_CARGA_AUSENTISMOS as
FUNCTION schedule_hdl (  
                        p_hdl_name  IN VARCHAR2,
                        p_hdl_id    IN VARCHAR2
                      ) RETURN VARCHAR2;
                                           
PROCEDURE create_hdl(
                        p_hdl_id      IN NUMBER,
                        p_hdl_name    IN VARCHAR2,
                        p_hdl_content IN CLOB,
                        p_type        IN VARCHAR2
                    );
PROCEDURE exec_hdl(
                    p_id        IN NUMBER,
                    p_hdl_name  IN VARCHAR2,
                    p_type      IN VARCHAR2
                  );
                  
PROCEDURE status(p_id_rastreo      IN VARCHAR2,
                 x_hdl_name        OUT VARCHAR2,
				 x_imported_status OUT VARCHAR2,
				 x_loaded_status   OUT VARCHAR2,
				 x_mensaje         OUT VARCHAR2,
				 x_msg_detail      OUT VARCHAR2
				);
PROCEDURE main_status_star(p_id_rastreo      IN VARCHAR2,
                           x_hdl_name        OUT VARCHAR2,
				           x_imported_status OUT VARCHAR2,
				           x_loaded_status   OUT VARCHAR2,
				           x_mensaje         OUT VARCHAR2,
				           x_msg_detail      OUT VARCHAR2,
                           x_status_process  OUT VARCHAR2
                          );
PROCEDURE cases_hdl(          
                    p_id      IN NUMBER,
                    p_flag    IN VARCHAR2
                    );
                          
filehandler            utl_file.file_type;
v_file_load            utl_file.file_type;
l_file_load            CLOB;
	
PROCEDURE cargar_header(
                            p_assigment_set IN VARCHAR2,
                            fechainicio		IN VARCHAR2,
                            fechafin		IN VARCHAR2,
                            p_id            IN NUMBER
                       );

PROCEDURE init_exe  (
                        p_assigment_set_id      IN NUMBER,
                        p_assigment_set_name    IN VARCHAR2,
                        p_period_id	            IN VARCHAR2,
                        p_period_name	        IN VARCHAR2,
                        p_id                    IN NUMBER,
                        p_user_name             IN VARCHAR2 DEFAULT '-1'
                    );

end GRG_CARGA_AUSENTISMOS;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE BODY     GRG_CARGA_AUSENTISMOS 
AS
PROCEDURE output (p_message IN VARCHAR2)
    IS
    BEGIN
        UTL_FILE.put_line (v_file_load, p_message);
        DBMS_OUTPUT.put_line (p_message);
    EXCEPTION
    WHEN UTL_FILE.invalid_path THEN
        raise_application_error (-20000, 'ERROR: Invalid PATH FOR file. '||SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line (p_message);
    END output;  
--+
--+
FUNCTION schedule_hdl (  
                        p_hdl_name  IN VARCHAR2,
                        p_hdl_id    IN VARCHAR2
                      ) RETURN VARCHAR2
IS

    l_ws_url             VARCHAR2 (500);  
    l_ws_action          VARCHAR2 (500) := 'urn:GenericSoap/GenericSoapOperation';  
    l_ws_response_clob   CLOB;  
    l_ws_envelope        CLOB;  
    l_message            VARCHAR2 (50);  
    l_ws_token           VARCHAR2(3650); 
    l_tipo               varchar2(50);
    V_ID                 VARCHAR2(200);

BEGIN  

    l_ws_envelope :=  
        '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://xmlns.oracle.com/apps/hcm/common/dataLoader/core/dataLoaderIntegrationService/types/">    
            <soapenv:Body>    
            <typ:importAndLoadData>    
            <typ:ContentId>' || p_hdl_name || '</typ:ContentId>    
            <typ:Parameters/>    
            </typ:importAndLoadData>    
            </soapenv:Body>    
        </soapenv:Envelope>';  

    GRG_COMMON_CONNECTIONS.get_security_token( l_ws_token ,'DEV2'); 
    
    apex_web_service.g_request_headers (1).name  := 'Authorization'; 
    apex_web_service.g_request_headers (1).value :=  l_ws_token; 
    
    l_ws_url := GRG_COMMON_CONNECTIONS.get_parameter('HDL_URL' ,'DEV2'); 

    apex_web_service.g_request_headers (2).name := 'SOAPAction';  
    apex_web_service.g_request_headers (2).VALUE := l_ws_action;  
    apex_web_service.g_request_headers (3).name := 'Content-Type';  
    apex_web_service.g_request_headers (3).VALUE :=  'text/xml; charset=UTF-8';  
    
    l_ws_response_clob  :=  apex_web_service.make_rest_request (  
                                p_url           => l_ws_url,  
                                p_http_method   => 'POST',  
                                p_body          => l_ws_envelope
                            );  

    SELECT  MAX(hdl_process_id) 
    into    l_message
    FROM    XMLTABLE(
                xmlnamespaces (
                    'http://schemas.xmlsoap.org/soap/envelope/'   AS "env",
                    'http://xmlns.oracle.com/apps/hcm/common/dataLoader/core/dataLoaderIntegrationService/types/' AS "ns0"),
                '/env:Envelope/env:Body/ns0:importAndLoadDataResponse'
                PASSING XMLTYPE.createXML( l_ws_response_clob )
                COLUMNS hdl_process_id   NUMBER PATH 'ns0:result'
            ) dat;
    
    V_ID := l_message;

    UPDATE  GRG_CARGA_AUSENTISMOS_HDL
    SET     ID_HDL = V_ID,
            STATUS = 'CARGADO'
    WHERE   ID = p_hdl_id
            AND HDL_NAME = p_hdl_name;
    RETURN  l_message;
    
    COMMIT;
    EXCEPTION WHEN OTHERS  
    THEN  
        DBMS_OUTPUT.put_line ('Error al enviar archivo en schedule_hdl: ' || SQLERRM);  

END schedule_hdl;
--+
--+
PROCEDURE create_hdl(
                            p_hdl_id      IN NUMBER,
                            p_hdl_name    IN VARCHAR2,
                            p_hdl_content IN CLOB,
                            p_type        IN VARCHAR2
                        )
IS 
    l_base64enconde     CLOB;
    l_ws_envelope       CLOB;
    l_tempname          CLOB;
    l_archivo           CLOB;
    v_archivo           CLOB := p_hdl_content;
    l_ws_url            VARCHAR2 (500) ;
    l_ws_action         VARCHAR2 (500) := 'http://xmlns.oracle.com/oxp/service/PublicReportService/ExternalReportWSSService/runReportRequest';
    l_ws_response_clob  CLOB;
    l_result            CLOB;
    l_zip_file          VARCHAR2(3650);
    l_directory_path    VARCHAR2(3650);
    l_ws_token          VARCHAR2(3650);
    v_error_msg         VARCHAR2(512);

BEGIN
    l_archivo   := DECODEBASE64(v_archivo);
    v_file_load := UTL_FILE.fopen('GRG_PAY_HDL', p_hdl_name||'.dat','w',32767);

    output(l_archivo);
    UTL_FILE.fclose (v_file_load);
    -----proceso de creacion del zip
    BEGIN

        SELECT  directory_path
        INTO    l_directory_path
        FROM    all_directories
        WHERE   directory_name = 'GRG_PAY_HDL';

        dbms_output.put_line('DIRECTORIO: '||l_directory_path);
        EXCEPTION
            WHEN OTHERS THEN
                    dbms_output.put_line ('ERROR: Al obtener el directorio --> '||SQLERRM); 

    END;
    
    l_tempname  := p_hdl_name||CASE p_type WHEN 'DELETE' THEN '_B_' ELSE '_C_' END||p_hdl_id;
    l_zip_file  := GRG_PAY_ZIP_FILE_PKG.zip_file( 
                                            l_directory_path
                                            ,p_hdl_name||'.dat'
                                            ,l_tempname||'.zip'
                                        );

    l_base64enconde := GRG_PAY_ZIP_FILE_PKG.base64_file (l_directory_path,l_tempname||'.zip');
    
    l_ws_envelope :=
                    '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ucm="http://www.oracle.com/UCM">  
                    <soapenv:Body>  
                            <ucm:GenericRequest webKey="cs">  
                                <ucm:Service IdcService="CHECKIN_UNIVERSAL">  
                                    <ucm:User/>  
                                    <ucm:Document>  
                                        <ucm:Field name="dDocName">'||l_tempname||'</ucm:Field>  
                                        <ucm:Field name="dDocTitle">'||l_tempname||'.zip</ucm:Field>  
                                        <ucm:Field name="dDocType">Document</ucm:Field>  
                                        <ucm:Field name="dSecurityGroup">FAFusionImportExport</ucm:Field>  
                                        <ucm:Field name="dDocAccount">hcm$/dataloader$/import$</ucm:Field>  
                                        <ucm:Field name="primaryFile">'||l_tempname||'.zip</ucm:Field>  
                                        <ucm:File href="'||l_tempname||'.zip" name="primaryFile">  
                                            <ucm:Contents>'||l_base64enconde||'</ucm:Contents>  
                                        </ucm:File>  
                                    </ucm:Document>  
                                </ucm:Service>  
                            </ucm:GenericRequest>  
                        </soapenv:Body>  
                    </soapenv:Envelope>';

    --------------------TOKEN-----------------------------
    GRG_COMMON_CONNECTIONS.get_security_token( l_ws_token,'DEV2' );
    apex_web_service.g_request_headers (1).name  := 'Authorization';
    apex_web_service.g_request_headers (1).value := l_ws_token;
    l_ws_url := GRG_COMMON_CONNECTIONS.get_parameter('IDCWS_URL','DEV2');
    apex_web_service.g_request_headers (2).name := 'SOAPAction';
    apex_web_service.g_request_headers (2).VALUE := l_ws_action;
    apex_web_service.g_request_headers (3).name := 'Content-Type';
    apex_web_service.g_request_headers (3).VALUE :='text/xml; charset=UTF-8';
    DBMS_OUTPUT.put_line ('Envio archivo:' ||' '||l_ws_url);

    l_ws_response_clob := apex_web_service.make_rest_request ( 
                                                                p_url           => l_ws_url 
                                                                ,p_http_method   => 'POST'
                                                                ,p_body          => l_ws_envelope
                                                                --,p_username      => l_user_name
                                                                --,p_password      => l_password
                                                             ); 

    UPDATE  GRG_CARGA_AUSENTISMOS_HDL   
    SET     EXEC_DATE_I = SYSDATE - 5/24, 
            EXEC_DATE_F = SYSDATE - 5/24, 
            STATUS = 'ENVIADO', 
            CREATION_DATE = SYSDATE - 5/24, 
            HDL_NAME = l_tempname
    WHERE   ID = p_hdl_id
            AND TYPE = p_type;

    COMMIT;

    l_result := schedule_hdl (l_tempname,p_hdl_id);
    
    DBMS_OUTPUT.PUT_LINE(l_result);
    
    EXCEPTION WHEN UTL_FILE.invalid_path  
    THEN  
        dbms_output.put_line('ERROR: Invalid PATH FOR file.');

END create_hdl;  
--+
--+
PROCEDURE exec_hdl(
                    p_id        IN NUMBER,
                    p_hdl_name  IN VARCHAR2,
                    p_type      IN VARCHAR2
                  )
AS
    v_count        NUMBER;
    v_hdl_content   CLOB;

BEGIN

    SELECT  COUNT(ID) TOTAL, HDL_DATA
    INTO    v_count, v_hdl_content
    FROM    GRG_CARGA_AUSENTISMOS_HDL
    WHERE   1=1
            AND ID = p_id
            AND TYPE = p_type
            AND HDL_DATA IS NOT NULL;

    DBMS_OUTPUT.PUT_LINE('ENTRO: ' || v_count);

    BEGIN
        
        GRG_CARGA_AUSENTISMOS.create_hdl(p_id,p_hdl_name,v_hdl_content,p_type);
        
        IF p_type = 'DELETE' THEN 

            UPDATE  GRG_CARGA_AUSENTISMOS_HEADER
            SET     STATUS = 'BORRADO ENVIADO'
            WHERE   ID = p_id;
            COMMIT;

        ELSIF p_type = 'CARGA' THEN

            UPDATE  GRG_CARGA_AUSENTISMOS_HEADER
            SET     STATUS = 'AUSF ENVIADO'
            WHERE   ID = p_id;
            COMMIT;
           
        END IF;

        DBMS_OUTPUT.PUT_LINE(''||'PROCESO_ENVIADO');

    END;

END exec_hdl;
--+
--+
PROCEDURE status(
                    p_id_rastreo      IN VARCHAR2,
                    x_hdl_name        OUT VARCHAR2,
                    x_imported_status OUT VARCHAR2,
                    x_loaded_status   OUT VARCHAR2,
                    x_mensaje         OUT VARCHAR2,
                    x_msg_detail      OUT VARCHAR2
                )
AS
    l_ws_action          VARCHAR2 (500) := 'http://xmlns.oracle.com/oxp/service/PublicReportService/ExternalReportWSSService/runReportRequest';
    l_ws_envelope        CLOB;
    l_clob               CLOB;
    v_hdl_name         VARCHAR2(350);
    v_imported_status  VARCHAR2(350);
    v_loaded_status    VARCHAR2(350);
    v_mensaje          VARCHAR2(350);
    v_msg_detail       VARCHAR2(350);
    v_id_rastreo       VARCHAR2(350);
BEGIN
    SELECT  ID_HDL
    INTO    v_id_rastreo
    FROM    GRG_AE_HDL_LOG
    WHERE   1 = 1
            AND id = p_id_rastreo;
    
        l_ws_envelope :=    '<soap:Envelope xmlns:pub="http://xmlns.oracle.com/oxp/service/PublicReportService" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
                                <soap:Body>
                                    <pub:runReport>
                                        <pub:reportRequest>
                                            <pub:parameterNameValues>

                                                <pub:item>
                                                    <pub:name>P_CONTENT_ID</pub:name>
                                                    <pub:values>
                                                        <pub:item>'|| v_id_rastreo ||'</pub:item>
                                                    </pub:values>
                                                </pub:item>
                                                            
                                            </pub:parameterNameValues>
                                        <pub:reportAbsolutePath>/Reportes Custom/PAY/GRG Automatizacion de Carga de Incidencias de AE/HDLCargaIncidenciasDT.xdo</pub:reportAbsolutePath>
                                        <pub:sizeOfDataChunkDownload>-1</pub:sizeOfDataChunkDownload>
                                        </pub:reportRequest>
                                    </pub:runReport>
                                </soap:Body>
                            </soap:Envelope>';
--------------------TOKEN-------------------------
--dbms_output.put_line(l_ws_envelope);
    GRG_COMMON_CONNECTIONS.get_otbi_report(
                                            l_ws_envelope   => l_ws_envelope
                                            ,l_user_token    => NULL
                                            ,x_ws_response   => l_clob 
                                            ,p_instance_name => 'DEV2' 
                                          );
--dbms_output.put_line(l_clob);
    FOR i IN (
            SELECT  XML_DATA.UCM_CONTENT_ID
                    ,XML_DATA.ARCHIVO
                    ,XML_DATA.IMPORTED_STATUS
                    ,XML_DATA.LOADED_STATUS
                    ,XML_DATA.ZIP_FILE
                    ,XML_DATA.MENSAJE
                    ,XML_DATA.MSG_DETAIL
            FROM    XMLTABLE (
                        '/DATA_DS/G_1'
                        PASSING XMLTYPE.createXML (l_clob)
                        COLUMNS 
                        UCM_CONTENT_ID   VARCHAR2(250) path 'UCM_CONTENT_ID'
                        ,ARCHIVO         VARCHAR2(250) path 'ARCHIVO'
                        ,IMPORTED_STATUS VARCHAR2(250) path 'IMPORTED_STATUS'
                        ,LOADED_STATUS   VARCHAR2(250) path 'LOADED_STATUS'
                        ,ZIP_FILE        VARCHAR2(250) path 'ZIP_FILE'
                        ,MENSAJE         CLOB          path 'MENSAJE'
                        ,MSG_DETAIL      CLOB          path 'MSG_DETAIL'
                                                                
                    ) XML_DATA
    ) 
    LOOP
        UPDATE GRG_AE_HDL_LOG
        SET UCM_CONTENT_ID  = i.UCM_CONTENT_ID,
            ARCHIVO	       = i.ARCHIVO,
            IMPORTED_STATUS = i.IMPORTED_STATUS,
            LOADED_STATUS   = i.LOADED_STATUS,
            ZIP_FILE        = i.ZIP_FILE,
            MENSAJE         = i.MENSAJE,
            MSG_DETAIL      = i.MSG_DETAIL
        WHERE 1=1
        AND ID = p_id_rastreo;
        dbms_output.put_line('NOMBRE ARCHIVO: '||i.ARCHIVO);
    END LOOP;
    COMMIT;

    SELECT  hdl_name,
            imported_status,
            loaded_status,
            mensaje,
            msg_detail
    INTO    v_hdl_name,
            v_imported_status,
            v_loaded_status,
            v_mensaje,
            v_msg_detail
    FROM    GRG_AE_HDL_LOG
    WHERE   1=1
            AND ID = p_id_rastreo;

    x_hdl_name        := v_hdl_name;
    x_imported_status := v_imported_status;
    x_loaded_status   := v_loaded_status;
    x_mensaje         := v_mensaje;
    x_msg_detail      := v_msg_detail;

    EXCEPTION WHEN OTHERS 
    THEN
        dbms_output.put_line ('ERROR: Al obtener el directorio --> '||SQLERRM); 

END  status;
--+
--+
PROCEDURE main_status_star(
                            p_id_rastreo      IN VARCHAR2,
                            x_hdl_name        OUT VARCHAR2,
                            x_imported_status OUT VARCHAR2,
                            x_loaded_status   OUT VARCHAR2,
                            x_mensaje         OUT VARCHAR2,
                            x_msg_detail      OUT VARCHAR2,
                            x_status_process  OUT VARCHAR2
                          )
AS
BEGIN
    IF p_id_rastreo IS NOT NULL  THEN
        GRG_CARGA_AUSENTISMOS.status(p_id_rastreo,x_hdl_name,x_imported_status,x_loaded_status,x_mensaje,x_msg_detail);
        x_status_process := 'PROCESO ENVIADO';
    ELSE
        x_status_process := 'EL PROCESO NO SE PUDO EJECUTAR';
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN
                dbms_output.put_line ('ERROR: Al obtener el directorio --> '||SQLERRM); 
                x_status_process := 'ERROR EN EL SERVIDOR';
END main_status_star;
--+
--+
PROCEDURE cases_hdl(          
                    p_id      IN NUMBER,
                    p_flag    IN VARCHAR2
                    )
    IS
        --VARIABLES  
        l_metadata_h_carga          CLOB;
        l_metadata_h_carga_m        CLOB;
        l_metadata_h_del            CLOB;
        l_metadata_h_del_m          CLOB;
        --+
        l_metadata_l_del_m          CLOB;
        l_metadata_L_carga_m        CLOB;
        --+
        l_all_metadatas_h_carga     CLOB;
        l_all_metadatas_h_carga_m   CLOB;
        l_all_metadatas_h_del       CLOB;
        l_all_metadatas_h_del_m     CLOB;
        --+
        l_all_metadatas_l_del_m     CLOB;
        l_all_metadatas_l_carga_m   CLOB;
        --+
        l_template_carga            CLOB;
        l_template_carga_m          CLOB;
        l_template_del              CLOB;
        l_template_del_m            CLOB;
        --+
        l_count                     NUMBER := 0;

    BEGIN
        SELECT  COUNT(*)
        INTO    l_count
        FROM    GRG_CARGA_AUSENTISMOS_LINES
        WHERE   ID = p_id;

        IF l_count > 0 THEN

            FOR registro IN (
                                SELECT  ID,
                                        EMPLOYER,
                                        EMPLOYERID,
                                        PERSONNUMBER,
                                        PERSONID,
                                        ABSENCETYPE,
                                        ABSENCETYPEID,
                                        ABSENCESTATUS,
                                        APPROVALSTATUS,
                                        PERABSENCEENTRYID,
                                        STARTDATE,
                                        STARTDATEC,
                                        ENDDATE,
                                        PERABSMATID,
                                        FLEX_ANC_PER_ABS_ENTRIES_DDF,
                                        ORAHRXMXDISA,
                                        STARTDATEDURATION,
                                        ENDDATEDURATION,
                                        ABSENCEREASON,
                                        PLANNEDENDDATE,
                                        SUBMITTEDDATE,
                                        NOTIFICATIONDATE,
                                        CONDITIONSTARTDATE,
                                        CONFIRMEDDATE,
                                        ENDTIME,
                                        COMMENTS,
                                        DURATION,
                                        GUID,
                                        STARTTIME
                                FROM    GRG_CARGA_AUSENTISMOS_LINES 
                                WHERE   ID = p_id 
                            )               
            LOOP

                --+Template para Eliminar
                l_metadata_h_del :=   'DELETE|PersonAbsenceEntry|'
                                        ||registro.EMPLOYER||'|'
                                        ||registro.EMPLOYERID||'|'
                                        ||registro.PERSONNUMBER||'|'
                                        ||registro.PERSONID||'|'
                                        ||registro.ABSENCETYPE||'|'
                                        ||registro.ABSENCETYPEID||'|'
                                        ||'|' --||registro.ABSENCEREASON||'|'
                                        ||registro.ABSENCESTATUS||'|'
                                        ||registro.APPROVALSTATUS||'|'
                                        ||registro.PERABSENCEENTRYID||'|'
                                        ||registro.STARTDATEDURATION||'|'
                                        ||registro.ENDDATEDURATION||'|'
                                        ||registro.PLANNEDENDDATE||'|'
                                        ||registro.SUBMITTEDDATE||'|'
                                        ||registro.NOTIFICATIONDATE||'|'
                                        ||registro.CONDITIONSTARTDATE||'|'
                                        ||registro.CONFIRMEDDATE||'|'
                                        ||registro.COMMENTS||'|'
                                        ||registro.STARTDATE||'|'
                                        ||registro.STARTTIME||'|'
                                        ||registro.ENDDATE||'|'
                                        ||registro.ENDTIME||'|'
                                        ||registro.DURATION||'|'
                                        ||registro.GUID||'|'
                                        ||registro.FLEX_ANC_PER_ABS_ENTRIES_DDF||'|'
                                        ||registro.ORAHRXMXDISA;

                l_all_metadatas_h_del := l_all_metadatas_h_del || l_metadata_h_del || CHR (10);
                --+Template para Eliminar  
                ----------------------------------
                --+Template para Cargar
                l_metadata_h_carga := 'MERGE|PersonAbsenceEntry|'
                                    ||registro.EMPLOYER||'|'
                                    ||registro.EMPLOYERID||'|'
                                    ||registro.PERSONNUMBER||'|'
                                    ||registro.PERSONID||'|'
                                    ||registro.ABSENCETYPE||'F|'
                                    ||registro.ABSENCETYPEID||'|'
                                    ||'|' --||registro.ABSENCEREASON||'|'
                                    ||registro.ABSENCESTATUS||'|'
                                    ||registro.APPROVALSTATUS||'|'
                                    ||registro.PERSONNUMBER||REPLACE(registro.STARTDATEC,'/')||'|' --PerAbsenceEntryId
                                    ||registro.STARTDATEDURATION||'|'
                                    ||registro.ENDDATEDURATION||'|'
                                    ||registro.PLANNEDENDDATE||'|'
                                    ||registro.SUBMITTEDDATE||'|'
                                    ||registro.NOTIFICATIONDATE||'|'
                                    ||registro.CONDITIONSTARTDATE||'|'
                                    ||registro.CONFIRMEDDATE||'|'
                                    ||registro.COMMENTS||'|'
                                    ||registro.STARTDATE||'|'
                                    ||registro.STARTTIME||'|'
                                    ||registro.ENDDATE||'|'
                                    ||registro.ENDTIME||'|'
                                    ||registro.DURATION||'|'
                                    ||registro.GUID||'|'
                                    ||registro.FLEX_ANC_PER_ABS_ENTRIES_DDF||'|'
                                    ||registro.ORAHRXMXDISA;
                        
                l_all_metadatas_h_carga := l_all_metadatas_h_carga || l_metadata_h_carga || CHR (10);
                --+Template para Cargar
            END LOOP;

                --FORMADO ARCHIVO FINAL DELETE
                l_template_del :=
                    'METADATA|PersonAbsenceEntry|Employer|EmployerId|PersonNumber|PersonId|AbsenceType|AbsenceTypeId|AbsenceReason|AbsenceStatus|ApprovalStatus|PerAbsenceEntryId|StartDateDuration|EndDateDuration|PlannedEndDate|SubmittedDate|NotificationDate|ConditionStartDate|ConfirmedDate|Comments|StartDate|StartTime|EndDate|EndTime|Duration|GUID|FLEX:ANC_PER_ABS_ENTRIES_DDF|oraHrxMxDisab(ANC_PER_ABS_ENTRIES_DDF=ORA_HRX_MX_DISABILITY)'
                    || CHR (10)
                    || l_all_metadatas_h_del;
                

                --FORMADO ARCHIVO FINAL CARGA
                l_template_carga :=
                    'METADATA|PersonAbsenceEntry|Employer|EmployerId|PersonNumber|PersonId|AbsenceType|AbsenceTypeId|AbsenceReason|AbsenceStatus|ApprovalStatus|PerAbsenceEntryId|StartDateDuration|EndDateDuration|PlannedEndDate|SubmittedDate|NotificationDate|ConditionStartDate|ConfirmedDate|Comments|StartDate|StartTime|EndDate|EndTime|Duration|GUID|FLEX:ANC_PER_ABS_ENTRIES_DDF|oraHrxMxDisab(ANC_PER_ABS_ENTRIES_DDF=ORA_HRX_MX_DISABILITY)'
                    || CHR (10)
                    || l_all_metadatas_h_carga;
                

                IF p_flag = '2' THEN 

                    FOR registro2 IN (
                                        SELECT  ID,
                                                EMPLOYER,
                                                EMPLOYERID,
                                                PERSONNUMBER,
                                                PERSONID,
                                                ABSENCETYPE,
                                                ABSENCETYPEID,
                                                ABSENCESTATUS,
                                                APPROVALSTATUS,
                                                PERABSENCEENTRYID,
                                                STARTDATE,
                                                STARTDATEC,
                                                ENDDATE,
                                                PERABSMATID,
                                                FLEX_ANC_PER_ABS_ENTRIES_DDF,
                                                ORAHRXMXDISA,
                                                STARTDATEDURATION,
                                                ENDDATEDURATION,
                                                ABSENCEREASON,
                                                PLANNEDENDDATE,
                                                SUBMITTEDDATE,
                                                NOTIFICATIONDATE,
                                                CONDITIONSTARTDATE,
                                                CONFIRMEDDATE,
                                                ENDTIME,
                                                COMMENTS,
                                                DURATION,
                                                GUID,
                                                STARTTIME,
                                                MAT_PLANNEDSTARTDATE,
                                                MAT_PLANNEDRETURNDATE,
                                                MAT_LEAVEDURATION,
                                                MAT_INTENDTOWORK,
                                                MAT_EXPECTEDDATEOFCHILDBIRTH,
                                                MAT_ACTUALSTARTDATE,
                                                MAT_ACTUALRETURNDATE,
                                                MAT_ACTUALDURATION,
                                                MAT_PERABSENCEENTRYID,
                                                MAT_PERABSMATID,
                                                MAT_OPENENDEDFLAG,
                                                MAT_ACTUALCHILDBIRTHDATE
                                        FROM    GRG_CARGA_AUSENTISMOS_LINES 
                                        WHERE   ABSENCETYPE  = 'Maternidad'
                                                AND ID = p_id 
                                    )             
                    LOOP
                        --+Template para Eliminar MATERNIDAD
                        --+LINEA
                        l_metadata_l_del_m :=   'DELETE|PersonMaternityAbsenceEntry|'
                                                ||registro2.EMPLOYER||'|'
                                                ||registro2.EMPLOYERID||'|'
                                                ||registro2.PERSONNUMBER||'|'
                                                ||registro2.PERSONID||'|'
                                                ||registro2.ABSENCETYPE||'|'
                                                ||registro2.STARTDATE||'|'
                                                ||registro2.STARTTIME||'|'
                                                ||registro2.MAT_PLANNEDSTARTDATE||'|'
                                                ||registro2.MAT_PLANNEDRETURNDATE||'|'
                                                ||registro2.MAT_LEAVEDURATION||'|'
                                                ||registro2.MAT_INTENDTOWORK||'|'
                                                ||registro2.MAT_EXPECTEDDATEOFCHILDBIRTH||'|'
                                                ||registro2.MAT_ACTUALSTARTDATE||'|'
                                                ||registro2.MAT_ACTUALRETURNDATE||'|'
                                                ||registro2.MAT_ACTUALCHILDBIRTHDATE||'|'
                                                ||'|' --OpenEndedFlag
                                                ||registro2.PERABSENCEENTRYID||'|'
                                                ||registro2.PERABSMATID;

                        l_all_metadatas_l_del_m := l_all_metadatas_l_del_m || l_metadata_l_del_m || CHR (10);
                        --+Template para Eliminar MATERNIDAD
                        ----------------------------------
                        --+Template para Cargar MATERNIDAD
                        --LINEA
                        l_metadata_l_carga_m := 'MERGE|PersonAbsenceEntry|'
                                                ||registro2.EMPLOYER||'|'
                                                ||registro2.EMPLOYERID||'|'
                                                ||registro2.PERSONNUMBER||'|'
                                                ||registro2.PERSONID||'|'
                                                ||registro2.ABSENCETYPE||'|'
                                                ||registro2.STARTDATE||'|'
                                                ||registro2.STARTTIME||'|'
                                                ||registro2.MAT_PLANNEDSTARTDATE||'|'
                                                ||registro2.MAT_PLANNEDRETURNDATE||'|'
                                                ||registro2.MAT_LEAVEDURATION||'|'
                                                ||registro2.MAT_INTENDTOWORK||'|'
                                                ||registro2.MAT_EXPECTEDDATEOFCHILDBIRTH||'|'
                                                ||registro2.MAT_ACTUALSTARTDATE||'|'
                                                ||registro2.MAT_ACTUALRETURNDATE||'|'
                                                ||registro2.MAT_ACTUALCHILDBIRTHDATE||'|'
                                                ||'|' --OpenEndedFlag
                                                ||registro2.PERSONNUMBER||REPLACE(registro2.STARTDATEC,'/')||'|' --PerAbsenceEntryId
                                                ||registro2.PERSONNUMBER||REPLACE(registro2.STARTDATEC,'/'); --PerAbsMatId

                        l_all_metadatas_l_carga_m := l_all_metadatas_l_carga_m || l_metadata_l_carga_m || CHR (10);
                        --+Template para Cargar MATERNIDAD
                    END LOOP;

                    --FORMADO FINAL ARCHIVO DELETE MATERNIDAD
                    l_template_del :=
                        l_template_del
                        || CHR (10)
                        || 'METADATA|PersonMaternityAbsenceEntry|Employer|EmployerId|PersonNumber|PersonId|AbsenceType|StartDate|StartTime|PlannedStartDate|PlannedReturnDate|LeaveDuration|IntendToWork|ExpectedDateOfChildBirth|ActualStartDate|ActualReturnDate|ActualDuration|ActualChildBirthDate|OpenEndedFlag|PerAbsenceEntryId|PerAbsMatId'
                        || CHR (10)
                        || l_all_metadatas_l_del_m;

                    --FORMADO FINAL ARCHIVO CARGA MATERNIDAD
                    l_template_carga :=
                        l_template_carga
                        || CHR(10)
                        || 'METADATA|PersonMaternityAbsenceEntry|Employer|EmployerId|PersonNumber|PersonId|AbsenceType|StartDate|StartTime|PlannedStartDate|PlannedReturnDate|LeaveDuration|IntendToWork|ExpectedDateOfChildBirth|ActualStartDate|ActualReturnDate|ActualDuration|ActualChildBirthDate|OpenEndedFlag|PerAbsenceEntryId|PerAbsMatId'
                        || l_all_metadatas_l_carga_m;

                END IF;

                --GUARDADO EN TABLA DE HDL DELETE
                INSERT INTO GRG_CARGA_AUSENTISMOS_HDL(
                                                        ID,
                                                        TYPE,
                                                        HDL_DATA,
                                                        STATUS
                                                    ) VALUES (
                                                                p_id,
                                                                'DELETE',
                                                                l_template_del,
                                                                'CREADO'
                                                            );
                COMMIT;

                --GUARDADO EN TABLA DE HDL
                INSERT INTO GRG_CARGA_AUSENTISMOS_HDL(
                                                        ID,
                                                        TYPE,
                                                        HDL_DATA,
                                                        STATUS
                                                    ) VALUES (
                                                                p_id,
                                                                'CARGA',
                                                                l_template_carga,
                                                                'CREADO'
                                                            );
                COMMIT;

        ELSE

            UPDATE  GRG_CARGA_AUSENTISMOS_HEADER 
            SET     STATUS = 'SIN DATOS'
            WHERE   ID = p_id;

            --GUARDADO EN TABLA DE HDL DELETE
            INSERT INTO GRG_CARGA_AUSENTISMOS_HDL(
                                                    ID,
                                                    TYPE,
                                                    STATUS
                                                ) VALUES (
                                                            p_id,
                                                            'DELETE',
                                                            'SIN DATOS'
                                                        );
            COMMIT;

            --GUARDADO EN TABLA DE HDL
            INSERT INTO GRG_CARGA_AUSENTISMOS_HDL(
                                                    ID,
                                                    TYPE,
                                                    STATUS
                                                ) VALUES (
                                                            p_id,
                                                            'CARGA',
                                                            'SIN DATOS'
                                                        );
            COMMIT;

        COMMIT;

        END IF;
END cases_hdl;
--+
--+
PROCEDURE cargar_header(
                            p_assigment_set IN VARCHAR2,
                            fechainicio		IN VARCHAR2,
                            fechafin		IN VARCHAR2,
                            p_id            IN NUMBER
                       )
AS

    l_ws_url             VARCHAR2 (500); 
    l_ws_action          VARCHAR2 (500) := 'http://xmlns.oracle.com/oxp/service/PublicReportService/ExternalReportWSSService/runReportRequest';
    l_ws_response_clob   CLOB;
    l_ws_envelope        CLOB;
    l_ws_resp_xml2       XMLTYPE;
    l_clob               CLOB;
    -- ++
    l_contador     		 NUMBER:= 0;
    l_dato_existe  		 NUMBER:= 0;
    l_bandera      		 VARCHAR2(5);
    l_datos        		 VARCHAR2(4000);
    l_count              NUMBER;

BEGIN

    l_ws_envelope := '<soap:Envelope xmlns:pub="http://xmlns.oracle.com/oxp/service/PublicReportService" xmlns:soap="http://www.w3.org/2003/05/soap-envelope">
                        <soap:Body>
                            <pub:runReport>
                                <pub:reportRequest>
                                            <pub:parameterNameValues> 
											    <pub:item>  
                                                    <pub:name>p_assigment_set</pub:name>  
                                                    <pub:values>  
                                                        <pub:item>'||p_assigment_set||'</pub:item>  
                                                    </pub:values>  
                                                </pub:item> 
                                                <pub:item> 
                                                    <pub:name>fechainicio</pub:name> 
                                                    <pub:values> 
                                                        <pub:item>'||fechainicio||'</pub:item> 
                                                    </pub:values> 
                                                </pub:item> 
                                                <pub:item> 
                                                    <pub:name>fechafin</pub:name> 
                                                    <pub:values> 
                                                        <pub:item>'||fechafin||'</pub:item> 
                                                    </pub:values> 
                                                </pub:item>
                                            </pub:parameterNameValues>
                                    <pub:reportAbsolutePath>/Reportes Custom/PAY/GRG Ausentismos/GRG Ausentismos RP.xdo</pub:reportAbsolutePath>
                                    <pub:sizeOfDataChunkDownload>-1</pub:sizeOfDataChunkDownload>
                                </pub:reportRequest>
                            </pub:runReport>
                        </soap:Body>
                    </soap:Envelope>';
                    
    --------------------TOKEN-------------------------
    --------------------------------------------------
    GRG_COMMON_CONNECTIONS.get_otbi_report(
                                            l_ws_envelope  => l_ws_envelope
                                            ,l_user_token   => NULL
                                            ,x_ws_response  => l_clob 
                                            ,p_instance_name => 'DEV2'
                                            );
    --------------------------------------------------  
    --------------------------------------------------	

    l_ws_resp_xml2 := XMLTYPE.createXML (l_clob);

    SELECT  COUNT(*)
    INTO    l_count         
    FROM    XMLTABLE (
                        '/DATA_DS/G_1'
                        PASSING xmltype.createxml (l_clob)
                        COLUMNS EMPLOYER             VARCHAR2(250) PATH 'EMPLOYER'
                     ) XML_DATA;	
    
    IF l_count > 0 THEN

        FOR i IN (
            SELECT  xml_data.*           
            FROM    XMLTABLE ('/DATA_DS/G_1'
                                PASSING xmltype.createxml (l_clob)
                                COLUMNS EMPLOYER            VARCHAR2(250) PATH 'EMPLOYER'
                                    ,EMPLOYERID             VARCHAR2(250) PATH 'EMPLOYERID'
                                    ,PERSONNUMBER	        VARCHAR2(250) PATH 'PERSONNUMBER'
                                    ,PERSONID               VARCHAR2(250) PATH 'PERSONID'
                                    ,ABSENCETYPE		    VARCHAR2(250) PATH 'ABSENCETYPE'
                                    ,ABSENCETYPEID          VARCHAR2(250) PATH 'ABSENCETYPEID'
                                    ,ABSENCESTATUS          VARCHAR2(250) PATH 'ABSENCESTATUS'
                                    ,APPROVALSTATUS         VARCHAR2(250) PATH 'APPROVALSTATUS'
                                    ,PERABSENCEENTRYID      VARCHAR2(250) PATH 'PERABSENCEENTRYID'
                                    ,STARTDATEDURATION      VARCHAR2(250) PATH 'STARTDATEDURATION'
                                    ,ENDDATEDURATION        VARCHAR2(250) PATH 'ENDDATEDURATION'
                                    ,PLANNEDENDDATE         VARCHAR2(250) PATH 'PLANNEDENDDATE'
                                    ,SUBMITTEDDATE          VARCHAR2(250) PATH 'SUBMITTEDDATE'
                                    ,NOTIFICATIONDATE       VARCHAR2(250) PATH 'NOTIFICATIONDATE'    
                                    ,CONDITIONSTARTDATE     VARCHAR2(250) PATH 'CONDITIONSTARTDATE'
                                    ,CONFIRMEDDATE          VARCHAR2(250) PATH 'CONFIRMEDDATE'
                                    ,COMMENTS               VARCHAR2(250) PATH 'COMMENTS'
                                    ,STARTDATE              VARCHAR2(250) PATH 'STARTDATE'
                                    ,STARTDATEC              VARCHAR2(250) PATH 'STARTDATEC'
                                    ,STARTTIME              VARCHAR2(250) PATH 'STARTTIME'
                                    ,ENDDATE                VARCHAR2(250) PATH 'ENDDATE'
                                    ,ENDTIME                VARCHAR2(250) PATH 'ENDTIME'
                                    ,DURATION               VARCHAR2(250) PATH 'DURATION' 
                                    ,ELEMENT                VARCHAR2(250) PATH 'ELEMENT'
                                    ) XML_DATA
        ) LOOP  

            DBMS_OUTPUT.put_line('ENTRO EN FOR i c_datos');

            SELECT  COUNT(*)
            INTO    l_dato_existe
            FROM    GRG_CARGA_AUSENTISMOS_LINES	   
            WHERE   1 = 1
                    AND PERSONNUMBER = i.PERSONNUMBER
                    AND ABSENCETYPEID = i.ABSENCETYPEID
                    AND PERABSENCEENTRYID = i.PERABSENCEENTRYID;

            IF l_dato_existe = 0 THEN
            
                DBMS_OUTPUT.put_line('ENTRO EN IF existe');
                BEGIN
                    INSERT INTO GRG_CARGA_AUSENTISMOS_LINES (
                                    ID                          ,
                                    EMPLOYER                    ,
                                    EMPLOYERID                  ,
                                    PERSONNUMBER                ,
                                    PERSONID                    ,
                                    ABSENCETYPE                 ,
                                    ABSENCETYPEID               ,
                                    ABSENCESTATUS               ,
                                    APPROVALSTATUS              ,
                                    PERABSENCEENTRYID           ,
                                    STARTDATE                   ,
                                    STARTDATEC                  ,
                                    ENDDATE                     ,
                                    PERABSMATID                 ,
                                    FLEX_ANC_PER_ABS_ENTRIES_DDF,
                                    ORAHRXMXDISA                ,
                                    STARTDATEDURATION           ,
                                    ENDDATEDURATION             ,
                                    ABSENCEREASON               ,
                                    PLANNEDENDDATE              ,
                                    SUBMITTEDDATE               ,
                                    NOTIFICATIONDATE            ,
                                    CONDITIONSTARTDATE          ,
                                    CONFIRMEDDATE               ,
                                    ENDTIME                     ,
                                    COMMENTS                    ,
                                    DURATION                    ,
                                    GUID                        ,
                                    STARTTIME                   ,
                                    MAT_PLANNEDSTARTDATE        ,
                                    MAT_PLANNEDRETURNDATE       ,
                                    MAT_LEAVEDURATION           ,
                                    MAT_INTENDTOWORK            ,
                                    MAT_EXPECTEDDATEOFCHILDBIRTH,
                                    MAT_ACTUALSTARTDATE         ,
                                    MAT_ACTUALRETURNDATE        ,
                                    MAT_ACTUALDURATION          ,
                                    MAT_PERABSENCEENTRYID       ,
                                    MAT_PERABSMATID             ,
                                    MAT_OPENENDEDFLAG           ,
                                    MAT_ACTUALCHILDBIRTHDATE    ,
                                    ELEMENT
                                ) VALUES (
                                            p_id                          ,
                                            NVL(i.EMPLOYER,NULL)          ,
                                            NVL(i.EMPLOYERID,NULL)        ,
                                            NVL(i.PERSONNUMBER,NULL)	  ,
                                            NVL(i.PERSONID,NULL)          ,
                                            NVL(i.ABSENCETYPE,NULL)		  , 
                                            NVL(i.ABSENCETYPEID,NULL)     ,
                                            NVL(i.ABSENCESTATUS,NULL)     ,
                                            NVL(i.APPROVALSTATUS,NULL)    ,
                                            NVL(i.PERABSENCEENTRYID,NULL) ,
                                            NVL(i.STARTDATE,NULL)         ,
                                            NVL(i.STARTDATEC,NULL)        ,
                                            NVL(i.ENDDATE,NULL)           ,
                                            NULL, --PERABSMATID
                                            NULL, --FLEX_ANC_PER_ABS_ENTRIES_DDF
                                            NULL, --ORAHRXMXDISA
                                            NVL(i.STARTDATEDURATION,NULL) ,
                                            NVL(i.ENDDATEDURATION,NULL)   ,
                                            NULL, --ABSENCEREASON
                                            NVL(i.PLANNEDENDDATE,NULL)    ,
                                            NVL(i.SUBMITTEDDATE,NULL)     ,
                                            NVL(i.NOTIFICATIONDATE,NULL)  ,
                                            NVL(i.CONDITIONSTARTDATE,NULL),
                                            NVL(i.CONFIRMEDDATE,NULL)     ,
                                            NVL(i.ENDTIME,NULL)           ,
                                            NVL(i.COMMENTS,NULL)          ,
                                            NVL(i.DURATION,NULL)          ,
                                            NULL, --GUID
                                            NVL(i.STARTTIME,NULL)         ,
                                            NULL, --MAT_PLANNEDSTARTDATE
                                            NULL, --MAT_PLANNEDRETURNDATE
                                            NULL, --MAT_LEAVEDURATION
                                            NULL, --MAT_INTENDTOWORK
                                            NULL, --MAT_EXPECTEDDATEOFCHILDBIRTH
                                            NULL, --MAT_ACTUALSTARTDATE
                                            NULL, --MAT_ACTUALRETURNDATE
                                            NULL, --MAT_ACTUALDURATION
                                            NULL, --MAT_PERABSENCEENTRYID
                                            NULL, --MAT_PERABSMATID
                                            NULL, --MAT_OPENENDEDFLAG
                                            NULL, --MAT_ACTUALCHILDBIRTHDATE
                                            NVL(i.ELEMENT,NULL)
                                        );
                EXCEPTION WHEN OTHERS THEN
                DBMS_OUTPUT.put_line('Fallo: ' || i.PERSONNUMBER || ' ERROR:' || SQLERRM);
            END;

            END IF;		
            
        END LOOP;
        
        GRG_CARGA_AUSENTISMOS.cases_hdl(          
                                            p_id,
                                            '1'
                                       );

        COMMIT;
    
    ELSE 

        UPDATE  GRG_CARGA_AUSENTISMOS_HEADER 
        SET     STATUS = 'SIN DATOS'
        WHERE   ID = p_id;

        COMMIT;
    
    END IF;

    EXCEPTION
    WHEN OTHERS
    THEN
        DBMS_OUTPUT.put_line ('Se ha producido una excepción'||SQLERRM);

END cargar_header;								   
--+
--+
PROCEDURE init_exe  (
                        p_assigment_set_id      IN NUMBER,
                        p_assigment_set_name    IN VARCHAR2,
                        p_period_id	            IN VARCHAR2,
                        p_period_name	        IN VARCHAR2,
                        p_id                    IN NUMBER,
                        p_user_name             IN VARCHAR2 DEFAULT '-1'
                    )  
AS

    l_fecha_inicio  VARCHAR2(100) := '';
    l_fecha_fin     VARCHAR2(100) := '';
    l_count         NUMBER := 0;

BEGIN

    INSERT INTO GRG_CARGA_AUSENTISMOS_HEADER(
                                                ID,
                                                ASIGNATION_SET_ID,
                                                ASIGNATION_SET_NAME,
                                                PERIOD_ID,
                                                PERIOD_NAME,
                                                STATUS,
                                                CREATION_DATE,
                                                CREATED_BY
                                            ) VALUES (
                                                        p_id,
                                                        p_assigment_set_id,
                                                        p_assigment_set_name,
                                                        p_period_id,
                                                        p_period_name,
                                                        'SIN CARGAR',
                                                        SYSDATE - 5/24,
                                                        p_user_name
                                                     );
    COMMIT;

    FOR i IN (
        WITH rws AS (
            SELECT p_period_id str FROM dual
        )
        SELECT  regexp_substr (
                    str,
                    '[^|]+',
                    1,
                    LEVEL
                ) VALUE
        FROM    rws
        CONNECT BY LEVEL <= LENGTH ( str ) - LENGTH ( REPLACE ( str, '|' ) ) + 1
    ) LOOP

        IF l_count = 0 THEN 
            l_fecha_inicio := i.value;
        ELSIF l_count = 1 THEN
            l_fecha_fin := i.value;
        END IF; 

        l_count := l_count + 1;

    END LOOP;

    l_count := 0;

    GRG_CARGA_AUSENTISMOS.cargar_header (
                                            p_assigment_set_id,
                                            l_fecha_inicio,
                                            l_fecha_fin,
                                            p_id
                                        );

END init_exe;

END GRG_CARGA_AUSENTISMOS;

