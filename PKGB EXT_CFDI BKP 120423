--PKGB EXT_CFDI BKP 120423
CREATE OR REPLACE PACKAGE BODY PAY.GRG_PAY_EXTRACCION_CFDI_PKG   
AS   
    PROCEDURE output (p_message IN VARCHAR2)   
    IS   
    BEGIN   
        DBMS_OUTPUT.PUT_LINE(p_message);   
		UTL_FILE.put_line (fileHandler, p_message);   
    EXCEPTION   
    WHEN UTL_FILE.invalid_path THEN   
		raise_application_error (-20000, 'ERROR: Invalid PATH FOR file.');   
    END output;   
	   
	PROCEDURE log (p_message IN VARCHAR2)   
    IS   
    BEGIN   
        DBMS_OUTPUT.PUT_LINE(p_message);   
		--UTL_FILE.put_line (fileHandler_log, p_message);   
    EXCEPTION   
    WHEN OTHERS THEN   
		raise_application_error (-20000, 'ERROR: Invalid PATH FOR file.');   
    END log;   
   
	--ejecucion segundo plano   
	/*   
	PROCEDURE execute_query   
		AS   
		vCadena varchar2(100);   
	BEGIN   
		log('Archivo Cargado');   
		vCadena := 'GRG_PAY_EXTRACCION_CFDI_PKG.get_data_cfdi;';   
		GRG_PAY_EXTRACCION_CFDI_PKG.EXECUTE_JOB(vCadena);   
		commit;   
	END  execute_query;       
   
	procedure execute_job   
	is   
		pragma autonomous_transaction;   
		vjobNum BINARY_INTEGER;   
	      
	BEGIN    
		DBMS_JOB.SUBMIT(vjobNum, pJob);   
		COMMIT;    
	end execute_job;    
	*/   
	--ejecucion segundo plano   
   
    PROCEDURE get_data_cfdi (l_menssaje OUT VARCHAR2)   
    IS   
    
        statusLinesP              VARCHAR2 (10);   
        statusLinesD              VARCHAR2 (10);   
        statusLinesO              VARCHAR2 (10);   
        lc_sqlerrm                VARCHAR2 (250);   
        l_contador                NUMBER;   
        l_header                  VARCHAR2 (250);   
        l_ID_HEADER               VARCHAR2 (2000);   
		   
		--l_total_per               NUMBER;   
		--l_total_deduc             NUMBER;   
		--l_total_otrospagos        NUMBER;   
           
		--+ c_cfdi_comprobante (13 campos)   
		l_version                 VARCHAR2 (2000);   
        l_fecha                   VARCHAR2 (2000);   
        l_forma_pago              VARCHAR2 (2000);   
        l_subtotal                VARCHAR2 (2000);   
        l_descuento               VARCHAR2 (2000);   
		l_moneda                  VARCHAR2 (2000);   
        l_total                   VARCHAR2 (2000);   
        l_metodo_pago             VARCHAR2 (2000);   
        l_tipo_cobrante           VARCHAR2 (2000);   
        l_lugar_expedicion        VARCHAR2 (2000);   
        l_no_certificado          VARCHAR2 (2000);   
        l_certificado             CLOB;   
        l_sello                   CLOB;   
		   
		--+ c_cfdi_emisor (3 campos)   
        l_emisor_rfc              VARCHAR2 (2000);   
        l_emisor_nombre           VARCHAR2 (2000);   
        l_emisor_regimen          VARCHAR2 (2000);   
		l_calleEmisor             VARCHAR2 (2000);   
		l_noExteriorEmisor        VARCHAR2 (2000);   
		l_noInteriorEmisor        VARCHAR2 (2000);   
		l_coloniaEmisor           VARCHAR2 (2000);   
		l_localidadEmisor         VARCHAR2 (2000);   
		l_municipioEmisor         VARCHAR2 (2000);   
		l_estadoEmisor            VARCHAR2 (2000);   
		l_paisEmisor              VARCHAR2 (2000);   
		l_codigoPostalEmisor      VARCHAR2 (2000);    
		l_RegimenEmisor           VARCHAR2 (2000);   
		   
		--+ c_cfdi_receptor (3 campos)   
        l_receptor_rfc            VARCHAR2 (2000);   
        l_receptor_nombre         VARCHAR2 (2000);   
		l_uso_cfdi                VARCHAR2 (2000);   
		l_paisReceptor            VARCHAR2 (2000);   
		   
		--+ c_cfdi_conceptos (7 campos)   
		l_ClaveProdServ  		  VARCHAR2 (2000);   
		l_Cantidad       		  VARCHAR2 (2000);   
		l_ClaveUnidad    		  VARCHAR2 (2000);   
		l_Descripcion    		  VARCHAR2 (2000);   
		l_ValorUnitario  		  VARCHAR2 (2000);   
		l_Importe        		  VARCHAR2 (2000);   
		l_Descuento_conceptos	  VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina (9 campos)   
		l_nomina_version          VARCHAR2 (2000);   
		l_TipoNomina              VARCHAR2 (2000);   
		l_fecha_pago              VARCHAR2 (2000);   
		l_fechainicialpago        VARCHAR2 (2000);   
		l_fechafinalpago          VARCHAR2 (2000);   
		l_num_dias_pagados        VARCHAR2 (2000);   
		l_TotalPercepciones       VARCHAR2 (2000);   
		l_TotalDeducciones        VARCHAR2 (2000);   
		l_TotalOtrosPagos         VARCHAR2 (2000);   
   
		--+ c_cfdi_com_nomina_emi (1 campo)   
        l_RegistroPatronal        VARCHAR2 (2000);   
		   
		--+  c_cfdi_com_nomina_rec (11 campos)   
		l_Curp                    VARCHAR2 (2000);   
		l_NumSeguridadSocial      VARCHAR2 (2000);   
		l_FechaInicioRelLaboral   VARCHAR2 (2000);   
		l_Antiguedad              VARCHAR2 (2000);   
		l_TipoContrato            VARCHAR2 (2000);   
		l_TipoRegimen             VARCHAR2 (2000);   
		l_NumeroEmpleado          VARCHAR2 (2000);   
		l_RiesgoPuesto            VARCHAR2 (2000);   
		l_PeriodicidadPago        VARCHAR2 (2000);   
		l_SalarioDiarioIntegrado  VARCHAR2 (2000);   
		l_ClaveEntFed             VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina_perc  (3 campos)       
		l_TotalSueldos            VARCHAR2 (2000);   
		l_TotalGravado            VARCHAR2 (2000);   
		l_TotalExento             VARCHAR2 (2000);   
		   
		/*--+ c_cfdi_com_nomina_perc2 (5 campos)   
		TYPE list_of_percepciones IS TABLE OF VARCHAR2 (2000);   
		l_TipoPercepcion          list_of_percepciones := list_of_percepciones ();   
		l_ClavePercepcion         list_of_percepciones := list_of_percepciones ();   
		l_ConceptoPercepcion      list_of_percepciones := list_of_percepciones ();   
		l_ImporteGravado          list_of_percepciones := list_of_percepciones ();   
		l_ImporteExento           list_of_percepciones := list_of_percepciones ();*/   
		   
		--+ c_cfdi_com_nomina_deduc (2 campos)   
		l_TotalOtrasDeducciones   VARCHAR2 (2000);   
		l_TotalImpuestosRetenidos VARCHAR2 (2000);   
		   
		/*--+ c_cfdi_com_nomina_deduc2 (4 campos)   
		TYPE list_of_deducciones IS TABLE OF VARCHAR2 (2000);   
		l_TipoDeduccion           list_of_deducciones := list_of_deducciones ();   
		l_ClaveDeduccion          list_of_deducciones := list_of_deducciones ();   
		l_ConceptoDeduccion       list_of_deducciones := list_of_deducciones ();   
		l_ImporteDeduccion        list_of_deducciones := list_of_deducciones ();   
		   
		l_ImporteGravadoD         list_of_deducciones := list_of_deducciones ();   
		l_ImporteExentoD          list_of_deducciones := list_of_deducciones ();   
		   
		--+ c_cfdi_com_nomina_otrospag (4 campos)   
		TYPE list_of_otropagos IS TABLE OF VARCHAR2 (2000);   
		l_TipoOtroPago            list_of_otropagos := list_of_otropagos ();   
		l_ClaveOtroPago           list_of_otropagos := list_of_otropagos ();   
		l_ConceptoOtroPago        list_of_otropagos := list_of_otropagos ();   
		l_ImporteOtroPago         list_of_otropagos := list_of_otropagos ();*/   
		   
		--+ c_cfdi_com_nomina_otrospag2 (1 campo)   
		l_SubsidioCausado         VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina_timbreFD ( 7 campos)   
		l_VersionTFD              VARCHAR2 (2000);   
		l_UUID                    VARCHAR2 (2000);   
		l_FechaTimbrado           VARCHAR2 (2000);   
		l_RfcProvCertif           VARCHAR2 (2000);   
		l_SelloCFD                CLOB;   
		l_NoCertificadoSAT        VARCHAR2 (2000);   
		l_SelloSAT                CLOB;   
		   
		---+ c_cfdi_com_nomina_firma ( 7 campos)   
		l_VersionFir              VARCHAR2 (2000);   
		l_selloEmpleado           VARCHAR2 (2000);   
		l_certificadoEmpleado     VARCHAR2 (2000);   
		l_fechaFir                VARCHAR2 (2000);   
		l_numeroCertificado       VARCHAR2 (2000);   
		l_Layout                  CLOB;   
		l_imagen                  CLOB;   
		   
		--+   
		--l_sta_pro_per             VARCHAR2 (2000);   
		--l_error_percep            VARCHAR2 (2000);   
		--l_sta_pro_deduc           VARCHAR2 (2000);   
		--l_error_deduc             VARCHAR2 (2000);   
		--l_sta_pro_otro            VARCHAR2 (2000);   
		--l_error_otro              VARCHAR2 (2000);   
		   
		l_statusLinesP            VARCHAR2 (5);   
		l_statusLinesD            VARCHAR2 (5);   
		l_statusLinesO            VARCHAR2 (5);   
		l_sttausHeader            VARCHAR2 (5);   
		   
		----------------------  
		-- cfdi:Comprobante  
		----------------------  
		CURSOR c_cfdi_comprobante IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT   
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
				,xpfe.numero_de_empleado  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			And xpfe.attribute10 is null	--ahernandez.rosales{11Nov22}  
			AND xpfe.attribute1 IS NULL     --QUE NO SEA UN RECIBO CON EXCEPCION  
			AND xpfe.recibo_xml IS NOT NULL --QUE EL XML TENGA INFO  
			and uuid not in ('DEBD7C23-E76F-6F4E-B771-D1ECE1D20C77',   
			                 '23DB21A3-2106-8A44-80FB-67CA2F14B69D',  
							 '4ABBBA2B-CFFF-9943-8227-99419C0F4FF9',  
							 'F1146D59-9DF4-774E-828F-F8079EB551C8')  
		)  
		SELECT res_xml.*  
		,xfdxt.id_factura  
		,xfdxt.uuid  
		,xfdxt.numero_de_empleado  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									 ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Version           VARCHAR2 (2000) PATH '@Version',  
						Fecha             VARCHAR2 (2000) PATH '@Fecha',  
						FormaPago         VARCHAR2 (2000) PATH '@FormaPago',  
						SubTotal          VARCHAR2 (2000) PATH '@SubTotal',  
						Moneda            VARCHAR2 (2000) PATH '@Moneda',   
						Descuento         VARCHAR2 (2000) PATH '@Descuento',  
						Total             VARCHAR2 (2000) PATH '@Total',  
						MetodoPago        VARCHAR2 (2000) PATH '@MetodoPago',  
						TipoDeComprobante VARCHAR2 (2000) PATH '@TipoDeComprobante',  
						LugarExpedicion   VARCHAR2 (2000) PATH '@LugarExpedicion',  
						NoCertificado     VARCHAR2 (2000) PATH '@NoCertificado',  
						Certificado       CLOB            PATH '@Certificado',  
						Sello             CLOB            PATH '@Sello'  
					) res_xml  
		ORDER BY xfdxt.id_factura;  
		  
		----------------------  
		--    cfdi:Emisor   --  
		----------------------  
		CURSOR c_cfdi_emisor (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.id_factura  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE(  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Rfc_Emisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/@Rfc',  
						Nombre_Emisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/@Nombre',  
						RegimenFiscal       VARCHAR2 (2000) PATH 'cfdi:Emisor/@RegimenFiscal',  
						-- domicilio fiscal  
                        calleEmisor         VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@calle',  
                        noExteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noExterior',  
                        noInteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noInterior',  
                        coloniaEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@colonia',  
                        localidadEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@localidad',  
                        municipioEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@municipio',  
                        estadoEmisor        VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@estado',  
                        paisEmisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@pais',  
                        codigoPostalEmisor  VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@codigoPostal',    
                        --RegimenFiscal  
                        RegimenEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:RegimenFiscal/@Regimen'  
					)res_xml;  
		  
		--------------------  
		-- cfdi:Receptor --  
		--------------------  
		CURSOR c_cfdi_receptor (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							Rfc_Receptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/@Rfc',  
							Nombre_Receptor VARCHAR2 (2000) PATH 'cfdi:Receptor/@Nombre',  
							UsoCFDI         VARCHAR2 (2000) PATH 'cfdi:Receptor/@UsoCFDI',  
							--cfdi:Domicilio  
                            paisReceptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/cfdi:Domicilio/@pais'  
						)res_xml;  
		  
		-----------------------------------  
		-- cfdi:Conceptos / cfdi:Concepto  
		-----------------------------------  
		CURSOR c_cfdi_conceptos (p_id_factura IN NUMBER) IS	  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							ClaveProdServ   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveProdServ',  
							Cantidad        VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Cantidad',  
							ClaveUnidad     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveUnidad',  
							Descripcion     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descripcion',  
							ValorUnitario   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ValorUnitario',  
							Importe         VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Importe',  
							DescuentoConcep VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descuento'  
						)res_xml;  
		  
		--------------------------------------  
		-- cfdi:Complemento / nomina12:Nomina  
		--------------------------------------  
		CURSOR c_cfdi_com_nomina (p_id_factura IN NUMBER) IS		  
		/*  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							Version_com_nom   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@Version',  
							TipoNomina        VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@TipoNomina',  
							FechaPago         VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@FechaPago',  
							FechaInicialPago  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@FechaInicialPago',  
							FechaFinalPago    VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@FechaFinalPago',  
							NumDiasPagados    VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@NumDiasPagados',  
							TotalPercepciones VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@TotalPercepciones',  
							TotalDeducciones  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@TotalDeducciones',  
							TotalOtrosPagos   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/@TotalOtrosPagos'  
						)res_xml;  
		*/  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina  
							 return <row>  
							  {  
								$i/@Version,  
								$i/@TipoNomina,  
								$i/@FechaPago,  
								$i/@FechaInicialPago,  
								$i/@FechaFinalPago,  
								$i/@NumDiasPagados,  
								$i/@TotalPercepciones,  
								$i/@TotalDeducciones,  
								$i/@TotalOtrosPagos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Version_com_nom   VARCHAR2 (2000) PATH '@Version',  
							TipoNomina        VARCHAR2 (2000) PATH '@TipoNomina',  
							FechaPago         VARCHAR2 (2000) PATH '@FechaPago',  
							FechaInicialPago  VARCHAR2 (2000) PATH '@FechaInicialPago',  
							FechaFinalPago    VARCHAR2 (2000) PATH '@FechaFinalPago',  
							NumDiasPagados    VARCHAR2 (2000) PATH '@NumDiasPagados',  
							TotalPercepciones VARCHAR2 (2000) PATH '@TotalPercepciones',  
							TotalDeducciones  VARCHAR2 (2000) PATH '@TotalDeducciones',  
							TotalOtrosPagos   VARCHAR2 (2000) PATH '@TotalOtrosPagos'  
						)res_xml;  
		  
		-------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Emisor  
		--------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_emi (p_id_factura IN NUMBER) IS		  
			WITH xxgrp_facturas_data_xml AS  
			(  
				SELECT  
					xmltype.createxml (xpfe.recibo_xml) xml  
					,xpfe.id_factura  
					,xpfe.uuid  
				FROM xxgrg_pay_facturas_electronicas xpfe  
				WHERE xpfe.status = 'RECIBIDA'  
				--AND xpfe.uuid = p_uuid  
				AND xpfe.id_factura = p_id_factura  
			)  
			SELECT res_xml.*, xfdxt.ID_FACTURA  
			FROM xxgrp_facturas_data_xml  xfdxt  
			,XMLTABLE (  
								xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											   ),  
								'cfdi:Comprobante'  
								PASSING xfdxt.xml  
								COLUMNS   
								RegistroPatronal VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Emisor/@RegistroPatronal'  
							)res_xml;  
								     
		----------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Receptor      
		-----------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_rec (p_id_factura IN NUMBER) IS  
		/*  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE(  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
						   'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							Curp                   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@Curp',  
							NumSeguridadSocial     VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@NumSeguridadSocial',  
							FechaInicioRelLaboral  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@FechaInicioRelLaboral',  
							Antig?edad             VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@Antig?edad',  
							TipoContrato           VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@TipoContrato',  
							TipoRegimen            VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@TipoRegimen',  
							NumeroEmpleado         VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@NumEmpleado',  
							RiesgoPuesto           VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@RiesgoPuesto',  
							PeriodicidadPago       VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@PeriodicidadPago',  
							SalarioDiarioIntegrado VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@SalarioDiarioIntegrado',  
							ClaveEntFed            VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Receptor/@ClaveEntFed'  
						)res_xml;  
		*/						     
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Receptor  
							 return <row>  
							  {  
								$i/@Curp,  
								$i/@NumSeguridadSocial,  
								$i/@FechaInicioRelLaboral,  
								$i/@Antiguedad,  
								$i/@TipoContrato,  
								$i/@TipoRegimen,  
								$i/@NumEmpleado,  
								$i/@RiesgoPuesto,  
								$i/@PeriodicidadPago,  
								$i/@SalarioDiarioIntegrado,  
								$i/@ClaveEntFed  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Curp                   VARCHAR2 (2000) PATH '@Curp',  
							NumSeguridadSocial     VARCHAR2 (2000) PATH '@NumSeguridadSocial',  
							FechaInicioRelLaboral  VARCHAR2 (2000) PATH '@FechaInicioRelLaboral',  
							Antiguedad             VARCHAR2 (2000) PATH '@Antiguedad',  
							TipoContrato           VARCHAR2 (2000) PATH '@TipoContrato',  
							TipoRegimen            VARCHAR2 (2000) PATH '@TipoRegimen',  
							NumeroEmpleado         VARCHAR2 (2000) PATH '@NumEmpleado',  
							RiesgoPuesto           VARCHAR2 (2000) PATH '@RiesgoPuesto',  
							PeriodicidadPago       VARCHAR2 (2000) PATH '@PeriodicidadPago',  
							SalarioDiarioIntegrado VARCHAR2 (2000) PATH '@SalarioDiarioIntegrado',  
							ClaveEntFed            VARCHAR2 (2000) PATH '@ClaveEntFed'  
						)res_xml;  
		--------------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones  ********************  
		---------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_perc (p_id_factura IN NUMBER) IS	  
		/*  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							TotalSueldos   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/@TotalSueldos',  
							TotalGravado   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/@TotalGravado',  
							TotalExento    VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/@TotalExento'     
						)res_xml;  
		*/						     
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT NVL(res_xml.TotalSueldos,res_xml.TotalSeparacionIndemnizacion) TotalSueldos  
		,res_xml.TotalGravado  
		,res_xml.TotalExento  
		--,res_xml.TotalSeparacionIndemnizacion  
		, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones  
							 return <row>  
							  {  
								$i/@TotalSueldos,  
								$i/@TotalGravado,  
								$i/@TotalExento,  
								$i/TotalSeparacionIndemnizacion  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalSueldos   VARCHAR2 (2000) PATH '@TotalSueldos',  
							TotalGravado   VARCHAR2 (2000) PATH '@TotalGravado',  
							TotalExento    VARCHAR2 (2000) PATH '@TotalExento',  
							TotalSeparacionIndemnizacion    VARCHAR2 (2000) PATH '@TotalSeparacionIndemnizacion'  
					) res_xml;  
					  
		-------------------------------------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion  
		--------------------------------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_perc2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/nomina12:Percepcion  
							 return <row>  
							  {  
								$i/@TipoPercepcion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoPercepcion      VARCHAR2 (2000) PATH '@TipoPercepcion',  
							ClavePercepcion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoPercepcion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteGravado      VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExento       VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml;  
	  
		-----------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones   
		------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_deduc (p_id_factura IN NUMBER) IS  
		/*  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							TotalOtrasDeducciones   VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones/@TotalOtrasDeducciones',  
							TotalImpuestosRetenidos VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones/@TotalImpuestosRetenidos'  
					)res_xml;  
		*/  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones  
							 return <row>  
							  {  
								$i/@TotalOtrasDeducciones,  
								$i/@TotalImpuestosRetenidos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalOtrasDeducciones    VARCHAR2 (2000) PATH '@TotalOtrasDeducciones',  
							TotalImpuestosRetenidos  VARCHAR2 (2000) PATH '@TotalImpuestosRetenidos'  
					) res_xml;  
		------------------------------------------------------------------------------------  
		--cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion  
		------------------------------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_deduc2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones/nomina12:Deduccion  
							 return <row>  
							  {  
								$i/@TipoDeduccion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoDeduccion      VARCHAR2 (2000) PATH '@TipoDeduccion',  
							ClaveDeduccion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoDeduccion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteDeduccion   VARCHAR2 (2000) PATH '@Importe',   
							--  
							ImporteGravadoD    VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExentoD     VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml;  
		  
		---------------------------------------------------------------  
		--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago   
		---------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_otrospag (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago  
							 return <row>  
							  {  
								$i/@TipoOtroPago,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoOtroPago     VARCHAR2 (2000) PATH '@TipoOtroPago',  
							ClaveOtroPago    VARCHAR2 (2000) PATH '@Clave',  
							ConceptoOtroPago VARCHAR2 (2000) PATH '@Concepto',  
							ImporteOtroPago  VARCHAR2 (2000) PATH '@Importe'  
					)res_xml;  
  
		--------------------------------------------------------------------------------------------  
		--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo  
		--------------------------------------------------------------------------------------------   
		CURSOR c_cfdi_com_nomina_otrospag2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS  
							SubsidioCausado  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago/nomina12:SubsidioAlEmpleo/@SubsidioCausado'  
					)res_xml;  
		  
		-----------------------------------------------  
		--  cfdi:Complemento / tfd:TimbreFiscalDigital  
		-----------------------------------------------  
		CURSOR c_cfdi_com_nomina_timbreFD (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionTFD        VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@Version',  
							UUID              VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@UUID',  
							FechaTimbrado     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@FechaTimbrado',  
							RfcProvCertif     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@RfcProvCertif',  
							SelloCFD          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloCFD',  
							NoCertificadoSAT  VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@NoCertificadoSAT',  
							SelloSAT          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloSAT'  
					)res_xml;  
					  
		---------------------------------  
		--  cfdi:Addenda / empleado:Firma  
		----------------------------------  
		CURSOR c_cfdi_com_nomina_firma (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				xmltype.createxml (xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM xxgrg_pay_facturas_electronicas xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionFir           VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@version',  
							selloEmpleado        VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@selloEmpleado',  
							certificadoEmpleado  VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@certificadoEmpleado',  
							fechaFir             VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@fecha',  
							numeroCertificado    VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@numeroCertificado',  
							Layout               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@Layout',  
							imagen               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@imagen'  
					)res_xml;  
	BEGIN   
	   
          
		-- Escribe archivo OUTPUT Y LOG   
        --fileHandler_log := UTL_FILE.fopen ('GRG_PAY_OUTGOING', 'LOG_EXTRACCION_CFDI_'||TO_CHAR(SYSDATE,'DDMMYYYY')||'.txt', 'w');   
		--fileHandler     := UTL_FILE.fopen ('GRG_PAY_OUTGOING', 'OUTPUT_EXTRACCION_CFDI_'||TO_CHAR(SYSDATE,'DDMMYYYY')||'.txt', 'w');   
		   
		--fileHandler_log := UTL_FILE.fopen ('GRG_PAY_OUTGOING', 'LOG_EXTRACCION_CFDI_'||TO_CHAR(SYSDATE,'DDMMYYYY')||'.txt', 'w');   
		--fileHandler     := UTL_FILE.fopen ('GRG_PAY_OUTGOING', 'OUTPUT_EXTRACCION_CFDI_'||TO_CHAR(SYSDATE,'DDMMYYYY')||'.txt', 'w');   
        		   
		--output('INICIA PROCESO DE EXTRACCION DEL CFDI XML.....');   
		log('INICIA PROCESO DE EXTRACCION DEL CFDI XML.....');   
		   
		--output ('Header_ID|Status Lines Percepciones|Status Lines Deducciones|Status Lines Otros Pagos|Status Header|UUID|Archivo Creado|Existe|Estafeta');   
		   
		-- Comienza a leer los XML que se reciben del servicio  
		BEGIN  
            --  
            FOR r_cfdi_comprobante IN c_cfdi_comprobante LOOP   
               
                BEGIN   
               
                    log('FACTURA ID --> '||r_cfdi_comprobante.id_factura);   
                    log('UUID       --> '||r_cfdi_comprobante.uuid);   
                    log('ESTAFETA   --> '||r_cfdi_comprobante.numero_de_empleado);   
                       
                    --+ Valida que NO se haya extraido el XML    
					BEGIN   
                    SELECT 1  
                    INTO l_contador   
                    FROM xxtoks_hr_header_cfdi xhhc   
                    WHERE 1 = 1    
                    AND xhhc.id_header = r_cfdi_comprobante.id_factura;  
                    --AND xhhc.uuid = r_cfdi_comprobante.uuid   
					exception  
					  when OTHERS then  
                      l_contador := 0;  
					END;  
                      
       
                    log ('l_contador --> '||l_contador);   
                       
                    IF l_contador = 0 THEN   
                        log ('EXTRAYENDO DATOS DE LOS NODOS DEL XML..........');   
                        ----------------------   
                        -- cfdi:Comprobante   
                        ----------------------   
                        log ('**** CURSOR cfdi:Comprobante  ********');   
                        l_version          := r_cfdi_comprobante.Version;   
                        l_fecha            := r_cfdi_comprobante.Fecha;   
                        l_forma_pago       := r_cfdi_comprobante.FormaPago;   
                        l_subtotal         := r_cfdi_comprobante.SubTotal;   
                        l_moneda           := r_cfdi_comprobante.Moneda;   
                        l_descuento        := r_cfdi_comprobante.Descuento;   
                        l_total            := r_cfdi_comprobante.Total;   
                        l_metodo_pago      := r_cfdi_comprobante.MetodoPago;   
                        l_tipo_cobrante    := r_cfdi_comprobante.TipoDeComprobante;   
                        l_lugar_expedicion := r_cfdi_comprobante.LugarExpedicion;   
                        l_no_certificado   := r_cfdi_comprobante.NoCertificado;   
                        l_certificado      := r_cfdi_comprobante.Certificado;   
                        l_sello            := r_cfdi_comprobante.Sello;   
                           
                        log ('l_version          --> '||l_version);   
                        log ('l_fecha            --> '||l_fecha);   
                        log ('l_forma_pago       --> '||l_forma_pago);   
                        log ('l_subtotal         --> '||l_subtotal);     
                        log ('l_moneda           --> '||l_moneda);   
                        log ('l_descuento        --> '||l_descuento);    
                        log ('l_total            --> '||l_total);         
                        log ('l_metodo_pago      --> '||l_metodo_pago);   
                        log ('l_tipo_cobrante    --> '||l_tipo_cobrante);   
                        log ('l_lugar_expedicion --> '||l_lugar_expedicion);   
                        log ('l_no_certificado   --> '||l_no_certificado);   
                        --log ('l_certificado      --> '||l_certificado);   
                        --log ('l_sello            --> '||l_sello);   
                           
                        ----------------------   
                        --  cfdi:Emisor   --   
                        ----------------------   
                        log ('**** CURSOR cfdi:Emisor  ********');   
                        BEGIN   
                            FOR r_cfdi_emisor IN c_cfdi_emisor (r_cfdi_comprobante.id_factura) LOOP   
                                l_emisor_rfc         := r_cfdi_emisor.Rfc_Emisor;   
                                l_emisor_nombre      := r_cfdi_emisor.Nombre_Emisor;   
                                l_emisor_regimen     := r_cfdi_emisor.RegimenFiscal;   
                                l_calleEmisor        := r_cfdi_emisor.calleEmisor;   
                                l_noExteriorEmisor   := r_cfdi_emisor.noExteriorEmisor;   
                                l_noInteriorEmisor   := r_cfdi_emisor.noInteriorEmisor;   
                                l_coloniaEmisor      := r_cfdi_emisor.coloniaEmisor;   
                                l_localidadEmisor    := r_cfdi_emisor.localidadEmisor;   
                                l_municipioEmisor    := r_cfdi_emisor.municipioEmisor;   
                                l_estadoEmisor       := r_cfdi_emisor.estadoEmisor;   
                                l_paisEmisor         := r_cfdi_emisor.paisEmisor;   
                                l_codigoPostalEmisor := r_cfdi_emisor.codigoPostalEmisor;   
                                l_RegimenEmisor      := r_cfdi_emisor.RegimenEmisor;   
                                log ('l_emisor_rfc         --> '||l_emisor_rfc);   
                                log ('l_emisor_nombre      --> '||l_emisor_nombre);   
                                log ('l_emisor_regimen     --> '||l_emisor_regimen);   
                                log ('l_calleEmisor        --> '||l_calleEmisor);   
                                log ('l_noExteriorEmisor   --> '||l_noExteriorEmisor);   
                                log ('l_noInteriorEmisor   --> '||l_noInteriorEmisor);   
                                log ('l_coloniaEmisor      --> '||l_coloniaEmisor);   
                                log ('l_localidadEmisor    --> '||l_localidadEmisor);   
                                log ('l_municipioEmisor    --> '||l_municipioEmisor);   
                                log ('l_estadoEmisor       --> '||l_estadoEmisor);   
                                log ('l_paisEmisor         --> '||l_paisEmisor);   
                                log ('l_codigoPostalEmisor --> '||l_codigoPostalEmisor);   
                                log ('l_RegimenEmisor      --> '||l_RegimenEmisor);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (cfdi:Emisor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Emisor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
       
                        --------------------   
                        -- cfdi:Receptor --   
                        --------------------   
                        log ('**** CURSOR cfdi:Receptor  ********');   
                        BEGIN   
                            FOR receptor IN c_cfdi_receptor (r_cfdi_comprobante.id_factura) LOOP   
                                l_receptor_rfc    := receptor.Rfc_Receptor;   
                                l_receptor_nombre := receptor.Nombre_Receptor;   
                                l_uso_cfdi        := receptor.UsoCFDI;   
                                l_paisReceptor    := receptor.paisReceptor;   
                                log ('l_receptor_rfc     --> '||l_receptor_rfc);   
                                log ('l_receptor_nombre  --> '||l_receptor_nombre);   
                                log ('l_uso_cfdi         --> '||l_uso_cfdi);   
                                log ('l_paisReceptor         --> '||l_paisReceptor);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (cfdi:Receptor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Receptor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
                           
                        -----------------------------------   
                        -- cfdi:Conceptos / cfdi:Concepto   
                        -----------------------------------   
                        log ('**** CURSOR cfdi:Conceptos / cfdi:Concepto  ********');   
                        BEGIN   
                            FOR conceptos IN c_cfdi_conceptos (r_cfdi_comprobante.id_factura) LOOP   
                                l_ClaveProdServ       := conceptos.ClaveProdServ;   
                                l_Cantidad            := conceptos.Cantidad;   
                                l_ClaveUnidad         := conceptos.ClaveUnidad;   
                                l_Descripcion         := conceptos.Descripcion;   
                                l_ValorUnitario       := conceptos.ValorUnitario;   
                                l_Importe             := conceptos.Importe;    
                                l_Descuento_conceptos := conceptos.DescuentoConcep;	   
                                log ('l_ClaveProdServ       --> '||l_ClaveProdServ);   
                                log ('l_Cantidad            --> '||l_Cantidad);   
                                log ('l_ClaveUnidad         --> '||l_ClaveUnidad);   
                                log ('l_Descripcion         --> '||l_Descripcion);	   
                                log ('l_ValorUnitario       --> '||l_ValorUnitario);   
                                log ('l_Importe             --> '||l_Importe);   
                                log ('l_Descuento_conceptos --> '||l_Descuento_conceptos);						   
                            END LOOP;               
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (cfdi:Concepto) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Concepto)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
                       
                        ---------------------------------------   
                        -- cfdi:Complemento / nomina12:Nomina    
                        ---------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina  ********');   
                        BEGIN   
                            FOR ComNom IN c_cfdi_com_nomina (r_cfdi_comprobante.id_factura) LOOP   
                                l_nomina_version    := ComNom.Version_com_nom;   
                                l_TipoNomina        := ComNom.TipoNomina;   
                                l_fecha_pago        := ComNom.FechaPago;   
                                l_fechainicialpago  := ComNom.FechaInicialPago;   
                                l_fechafinalpago    := ComNom.FechaFinalPago;   
                                l_num_dias_pagados  := ComNom.NumDiasPagados;   
                                l_TotalPercepciones := ComNom.TotalPercepciones;   
                                l_TotalDeducciones  := ComNom.TotalDeducciones;   
                                l_TotalOtrosPagos   := ComNom.TotalOtrosPagos;   
                                log ('l_nomina_version    --> '||l_nomina_version);   
                                log ('l_TipoNomina        --> '||l_TipoNomina);   
                                log ('l_fecha_pago        --> '||l_fecha_pago);   
                                log ('l_fechainicialpago  --> '||l_fechainicialpago);   
                                log ('l_fechafinalpago    --> '||l_fechafinalpago);   
                                log ('l_num_dias_pagados  --> '||l_num_dias_pagados);   
                                log ('l_TotalPercepciones --> '||l_TotalPercepciones);   
                                log ('l_TotalDeducciones  --> '||l_TotalDeducciones);   
                                log ('l_TotalOtrosPagos   --> '||l_TotalOtrosPagos);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:Nomina) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Nomina)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
                       
                        -------------------------------------------------------   
                        --cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
                        --------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Emisor  ********');   
                        BEGIN   
                            FOR ComNomEmi IN c_cfdi_com_nomina_emi (r_cfdi_comprobante.id_factura) LOOP   
                                l_RegistroPatronal := ComNomEmi.RegistroPatronal;   
                                log ('l_RegistroPatronal   --> '||l_RegistroPatronal);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:Emisor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Emisor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
                       
                        ----------------------------------------------------------   
                        --cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
                        -----------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Receptor  ********');   
                        BEGIN   
                            FOR ComNomRecep IN c_cfdi_com_nomina_rec (r_cfdi_comprobante.id_factura) LOOP   
                                l_Curp                   := ComNomRecep.Curp;   
                                l_NumSeguridadSocial     := ComNomRecep.NumSeguridadSocial;   
                                l_FechaInicioRelLaboral  := ComNomRecep.FechaInicioRelLaboral;   
                                l_Antiguedad             := ComNomRecep.Antiguedad;   
                                l_TipoContrato           := ComNomRecep.TipoContrato;   
                                l_TipoRegimen            := ComNomRecep.TipoRegimen;   
                                l_NumeroEmpleado         := ComNomRecep.NumeroEmpleado;   
                                l_RiesgoPuesto           := ComNomRecep.RiesgoPuesto;   
                                l_PeriodicidadPago       := ComNomRecep.PeriodicidadPago;   
                                l_SalarioDiarioIntegrado := ComNomRecep.SalarioDiarioIntegrado;   
                                l_ClaveEntFed            := ComNomRecep.ClaveEntFed;   
                                log ('l_Curp                    --> '||l_Curp);   
                                log ('l_NumSeguridadSocial      --> '||l_NumSeguridadSocial);   
                                log ('l_FechaInicioRelLaboral   --> '||l_FechaInicioRelLaboral);   
                                log ('l_Antiguedad              --> '||l_Antiguedad);   
                                log ('l_TipoContrato            --> '||l_TipoContrato);   
                                log ('l_TipoRegimen             --> '||l_TipoRegimen);   
                                log ('l_NumeroEmpleado          --> '||l_NumeroEmpleado);   
                                log ('l_RiesgoPuesto            --> '||l_RiesgoPuesto);   
                                log ('l_PeriodicidadPago        --> '||l_PeriodicidadPago);   
                                log ('l_SalarioDiarioIntegrado  --> '||l_SalarioDiarioIntegrado);   
                                log ('l_ClaveEntFed             --> '||l_ClaveEntFed);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:Receptor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Receptor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
                       
                        --------------------------------------------------------------   
                        --cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones    
                        ---------------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones   ********');   
                        BEGIN   
                            FOR percep IN c_cfdi_com_nomina_perc (r_cfdi_comprobante.id_factura) LOOP   
                                l_TotalSueldos := percep.TotalSueldos;   
                                l_TotalGravado := percep.TotalGravado;   
                                l_TotalExento  := percep.TotalExento;   
                                log ('l_TotalSueldos --> '||l_TotalSueldos);   
                                log ('l_TotalGravado --> '||l_TotalGravado);   
                                log ('l_TotalExento  --> '||l_TotalExento);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:Percepciones) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Percepciones)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm     := NULL;   
                            l_TotalSueldos := NULL;   
                            l_TotalGravado := NULL;   
                            l_TotalExento  := NULL;   
                        END;   
                           
                        -------------------------------------------------------------------------------------   
                        --cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion   
                        --------------------------------------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion   ********');   
                        l_statusLinesP:= 'SLP';   
                        log ('INSERTA LOS DATOS DE LAS PERCEPCIONES: ');   
                        FOR percep2 IN c_cfdi_com_nomina_perc2 (r_cfdi_comprobante.id_factura) LOOP   
                            BEGIN   
                                                   
                                INSERT INTO xxtoks_hr_percep_cfdi (   
                                                                   id_lines   
                                                                   ,tipo   
                                                                   ,tipo_percepcion   
                                                                   ,clave_percepcion   
                                                                   ,concepto_percepcion   
                                                                   ,importe_gravado   
                                                                   ,importe_exento   
                                                                   ,total_sueldos   
                                                                   ,total_gravado   
                                                                   ,total_exento   
                                                                   ,id_header   
                                                                   ,status_proceso   
                                                                   ,error   
                                                                   ,creation_by   
                                                                   ,creation_date   
                                                                   ,last_update_date   
                                                                   ,last_update_by   
                                                                 )   
                                VALUES (   
                                        xxtoks_percep_seq.NEXTVAL   
                                        ,'P'   
                                        ,percep2.TipoPercepcion   
                                        ,percep2.ClavePercepcion   
                                        ,percep2.ConceptoPercepcion   
                                        ,TO_NUMBER(NVL(percep2.ImporteGravado,0))   
                                        ,TO_NUMBER(NVL(percep2.ImporteExento,0))   
                                        ,TO_NUMBER(NVL(l_TotalSueldos,0))   
                                        ,TO_NUMBER(NVL(l_TotalGravado,0))   
                                        ,TO_NUMBER(NVL(l_TotalExento,0))   
                                        ,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
                                        ,'EXTRAIDO'   
                                        ,NULL   
                                        ,APEX_UTIL.GET_CURRENT_USER_ID   
                                        ,SYSDATE   
                                        ,SYSDATE   
                                        ,APEX_UTIL.GET_CURRENT_USER_ID   
                                    );  
									COMMIT;   
                            EXCEPTION   
                            WHEN OTHERS THEN   
                                lc_sqlerrm := SQLERRM;   
                                log ('ERROR: Al extraer el nodo (nomina12:Percepcion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                                INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                                VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Percepcion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                                COMMIT;  
								lc_sqlerrm := NULL;   
                                l_statusLinesP:= 'ELP';   
                            END;   
                           
                        END LOOP;   
       
                        -----------------------------------------------------------   
                        --cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones   
                        ------------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones  ********');   
                        BEGIN   
                            FOR deduc IN c_cfdi_com_nomina_deduc (r_cfdi_comprobante.id_factura)  LOOP   
                                l_TotalOtrasDeducciones   := deduc.TotalOtrasDeducciones;   
                                l_TotalImpuestosRetenidos := deduc.TotalImpuestosRetenidos;   
                                log ('l_TotalOtrasDeducciones   --> '||l_TotalOtrasDeducciones);   
                                log ('l_TotalImpuestosRetenidos --> '||l_TotalImpuestosRetenidos);   
                            END LOOP;   
                        EXCEPTION   
                            WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:Deducciones) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Deducciones)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm                := NULL;   
                            l_TotalOtrasDeducciones   := NULL;   
                            l_TotalImpuestosRetenidos := NULL;   
                        END;   
                           
                        ------------------------------------------------------------------------------------   
                        --cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion   
                        ------------------------------------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion ********');   
                        log ('INSERTA LOS DATOS DE LAS DEDUCCIONES: ');   
                        l_statusLinesD:= 'SLD';   
                        FOR deduc2 IN c_cfdi_com_nomina_deduc2 (r_cfdi_comprobante.id_factura) LOOP   
                            BEGIN   
                                INSERT INTO xxtoks_hr_deducciones_cfdi (   
                                                                        id_lines   
                                                                        ,tipo   
                                                                        ,tipo_deduccion   
                                                                        ,clave_deduccion   
                                                                        ,concepto_deduccion   
                                                                        ,importe_deduccion   
                                                                        ,total_otras_deducciones   
                                                                        ,total_impuestos_retenidos   
                                                                        ,id_header   
                                                                        ,importe_gravado_d   
                                                                        ,importe_exento_d   
                                                                        ,status_proceso   
                                                                        ,error   
                                                                        ,creation_by   
                                                                        ,creation_date   
                                                                        ,last_update_date   
                                                                        ,last_update_by   
                                                                  )   
                                VALUES (   
                                         xxtoks_deduciones_seq.NEXTVAL   
                                         ,'D'   
                                         ,deduc2.TipoDeduccion   
                                         ,deduc2.ClaveDeduccion   
                                         ,deduc2.ConceptoDeduccion   
                                         ,TO_NUMBER(NVL(deduc2.ImporteDeduccion,0))   
                                         ,TO_NUMBER(NVL(l_TotalOtrasDeducciones,0))   
                                         ,TO_NUMBER(NVL(l_TotalImpuestosRetenidos,0))   
                                         ,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
                                         ,TO_NUMBER(NVL(deduc2.ImporteGravadoD,NVL(deduc2.ImporteDeduccion,0)))   
                                         ,TO_NUMBER(NVL(deduc2.ImporteExentoD,0))   
                                         ,'EXTRAIDO'   
                                         ,NULL   
                                         ,APEX_UTIL.GET_CURRENT_USER_ID   
                                         ,SYSDATE   
                                         ,SYSDATE   
                                         ,APEX_UTIL.GET_CURRENT_USER_ID   
                                        );   
										COMMIT;  
                            EXCEPTION   
                            WHEN OTHERS THEN   
                                lc_sqlerrm := SQLERRM;   
                                log ('ERROR: Al extraer el nodo (nomina12:Deduccion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                                INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                                VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Deduccion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                                COMMIT;  
								lc_sqlerrm := NULL;   
                                l_statusLinesD:= 'ELD';   
                            END;   
                               
                        END LOOP;   
       
           
                        --------------------------------------------------------------------------------------------   
                        --  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo   
                        --------------------------------------------------------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo ********');   
                        BEGIN   
                            FOR otrosPagos2 IN c_cfdi_com_nomina_otrospag2 (r_cfdi_comprobante.id_factura) LOOP   
                                l_SubsidioCausado:= otrosPagos2.SubsidioCausado;   
                                log ('l_SubsidioCausado  --> '||l_SubsidioCausado);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (nomina12:SubsidioAlEmpleo) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:SubsidioAlEmpleo)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm        := NULL;   
                            l_SubsidioCausado := NULL;   
                        END;   
                           
                        ---------------------------------------------------------------   
                        --  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago    
                        --------------------------------------------------------------   
                        --log ('**** CURSOR cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago ********');   
                        log ('INSERTA LOS DATOS DE LOS OTROS PAGOS: ');   
                        l_statusLinesO := 'SLO';   
                        FOR otrosPagos IN c_cfdi_com_nomina_otrospag (r_cfdi_comprobante.id_factura) LOOP   
                            BEGIN   
                                INSERT INTO xxtoks_hr_otros_pagos_cfdi(	   
                                                                         id_lines              
                                                                        ,tipo                  
                                                                        ,tipo_otro_pago       
                                                                        ,clave_otro_pago       
                                                                        ,concepto_otro_pago    
                                                                        ,importe_otro_pago     
                                                                        ,subsidio_causado   
                                                                        ,importe_gravado_o   
                                                                        ,importe_exento_o															   
                                                                        ,id_header             
                                                                        ,status_proceso        
                                                                        ,error                 
                                                                        ,creation_by           
                                                                        ,creation_date         
                                                                        ,last_update_date     
                                                                        ,last_update_by       
                                                                      )   
                                VALUES (   
                                         xxtoks_otros_seq.NEXTVAL   
                                         ,'O'   
                                         ,otrosPagos.TipoOtroPago   
                                         ,otrosPagos.ClaveOtroPago   
                                         ,otrosPagos.ConceptoOtroPago   
                                         ,TO_NUMBER(NVL(otrosPagos.ImporteOtroPago,0))   
                                         ,TO_NUMBER(NVL(l_SubsidioCausado,0))   
                                         ,TO_NUMBER(NVL(otrosPagos.ImporteOtroPago,0))   
                                         ,0   
                                         ,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
                                         ,'EXTRAIDO'   
                                         ,NULL   
                                         ,APEX_UTIL.GET_CURRENT_USER_ID   
                                         ,SYSDATE   
                                         ,SYSDATE   
                                         ,APEX_UTIL.GET_CURRENT_USER_ID   
                                        );   
                                       
                            EXCEPTION   
                            WHEN OTHERS THEN   
                                lc_sqlerrm := SQLERRM;   
                                log ('ERROR: Al extraer el nodo (nomina12:OtroPago) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                                INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                                VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:OtroPago)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                                COMMIT;  
								lc_sqlerrm := NULL;   
                                l_statusLinesO := 'ELO';   
                            END;   
                               
                        END LOOP;   
                       
                        -----------------------------------------------   
                        --  cfdi:Complemento / tfd:TimbreFiscalDigital   
                        -----------------------------------------------   
                        log ('**** CURSOR cfdi:Complemento / tfd:TimbreFiscalDigital ********');   
                        BEGIN   
                            FOR TimFis IN c_cfdi_com_nomina_timbreFD (r_cfdi_comprobante.id_factura) LOOP   
                                l_VersionTFD       := TimFis.VersionTFD;   
                                l_UUID             := TimFis.uuid;   
                                l_FechaTimbrado    := TimFis.FechaTimbrado;   
                                l_RfcProvCertif    := TimFis.RfcProvCertif;   
                                l_SelloCFD         := TimFis.SelloCFD;   
                                l_NoCertificadoSAT := TimFis.NoCertificadoSAT;   
                                l_SelloSAT         := TimFis.SelloSAT;   
                                log ('l_VersionTFD        --> '||l_VersionTFD);   
                                log ('l_UUID              --> '||l_UUID);   
                                log ('l_FechaTimbrado     --> '||l_FechaTimbrado);   
                                log ('l_RfcProvCertif     --> '||l_RfcProvCertif);   
                                --log ('l_SelloCFD          --> '||l_SelloCFD);   
                                log ('l_NoCertificadoSAT  --> '||l_NoCertificadoSAT);   
                                --log ('l_SelloSAT          --> '|| l_SelloSAT);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (tfd:TimbreFiscalDigital) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (tfd:TimbreFiscalDigital)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
       
                        ---------------------------------   
                        --  cfdi:Addenda / empleado:Firma   
                        ----------------------------------   
                        log ('**** CURSOR cfdi:Addenda / empleado:Firma ********');   
                        BEGIN   
                            FOR Firma IN c_cfdi_com_nomina_firma (r_cfdi_comprobante.id_factura) LOOP   
                                l_VersionFir           := Firma.VersionFir;   
                                l_selloEmpleado        := Firma.selloEmpleado;   
                                l_certificadoEmpleado  := Firma.certificadoEmpleado;   
                                l_fechaFir             := Firma.fechaFir;   
                                l_numeroCertificado    := Firma.numeroCertificado;   
                                l_Layout               := Firma.Layout;   
                                l_imagen               := Firma.imagen;   
                                log ('l_VersionFir          --> '|| l_VersionFir);   
                                log ('l_selloEmpleado       --> '|| l_selloEmpleado);   
                                log ('l_certificadoEmpleado --> '|| l_certificadoEmpleado);   
                                log ('l_fechaFir            --> '|| l_fechaFir);   
                                log ('l_numeroCertificado   --> '|| l_numeroCertificado);   
                                --log ('l_Layout              --> '|| l_Layout);   
                                --log ('l_imagen              --> '|| l_imagen);   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (empleado:Firma) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (empleado:Firma)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                        END;   
       
                        /*   
                        ----------------------------------------------------------   
                        --  cfdi:Impuestos / cfdi:Retenciones / cfdi:Retencion    
                        ----------------------------------------------------------   
                        BEGIN   
                          FOR Domi IN (WITH xxgrp_facturas_data_xml   
                                          AS   
                                            (SELECT xmltype.createxml (xpfe.recibo_xml) xml,   
                                                    xpfe.ID_FACTURA   
                                               FROM xxgrg_pay_facturas_electronicas xpfe   
                                              WHERE 1 = 1   
                                                AND xpfe.ID_FACTURA = i.ID_FACTURA)   
                                        SELECT res_xml.*, xfdxt.ID_FACTURA   
                                          FROM xxgrp_facturas_data_xml  xfdxt,   
                                               XMLTABLE (   
                                                         xmlnamespaces (   
                                                                        'http://www.sat.gob.mx/cfd/3' AS "cfdi",   
                                                                        'http://www.w3.org/2001/XMLSchema-instance' AS "xsi",   
                                                                        'http://www.sat.gob.mx/nomina12' AS "nomina12",   
                                                                        'http://www.sat.gob.mx/TimbreFiscalDigital' AS "tfd",   
                                                                        'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"),   
                                               'cfdi:Comprobante'   
                                               PASSING xfdxt.xml   
                                               COLUMNS    
                                               totalImpuestosRetenidos  VARCHAR2(2000) PATH 'cfdi:Impuestos/@totalImpuestosRetenidos',   
                                               impuesto                 VARCHAR2(2000) PATH 'cfdi:Impuestos/cfdi:Retenciones/cfdi:Retencion/@impuesto',   
                                               importe                  VARCHAR2(2000) PATH 'cfdi:Impuestos/cfdi:Retenciones/cfdi:Retencion/@importe'   
                                                        )   
                                           res_xml)   
                            LOOP   
                                log('Impuestos');   
                            END LOOP;   
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al extraer el nodo (cfdi:Retencion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Retencion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            lc_sqlerrm := NULL;   
                        END;   
                        */   
       
                        ----DESCUENTO   
                        IF l_descuento IS NULL   
                        THEN   
                            l_descuento := 0;   
                        ELSE   
                            l_descuento := l_descuento;   
                        END IF;   
       
                        ----FECHA_PAGO   
                        IF l_fecha_pago IS NULL   
                        THEN   
                            l_fecha_pago := NULL;   
                        ELSE   
                            l_fecha_pago := l_fecha_pago;   
                        END IF;   
       
                        ----FECHA_INICIAL_PAGO   
                        IF l_FechaInicialPago IS NULL   
                        THEN   
                            l_FechaInicialPago := NULL;   
                        ELSE   
                            l_FechaInicialPago := l_FechaInicialPago;   
                        END IF;   
       
                        ----FECHA_FINAL_PAGO   
                        IF l_FechaFinalPago IS NULL   
                        THEN   
                            l_FechaFinalPago := NULL;   
                        ELSE   
                            l_FechaFinalPago := l_FechaFinalPago;   
                        END IF;   
       
                        ---+ INSERTA LOS DATOS DEL CABECERO   
                        log ('ID_HEADER: '||TO_NUMBER(r_cfdi_comprobante.id_factura));   
                        log ('UUID:      '||l_UUID);   
                        log ('ESTAFETA:  '||l_NumeroEmpleado);   
                        log ('INSERTA LOS DATOS DEL CABECERO: ');   
                           
                        BEGIN					   
                   
                            INSERT INTO xxtoks_hr_header_cfdi   
                            (	   
                                "ID_HEADER"                      
                                ---+ cfdi:Comprobante   
                                ,"VERSION"                       
                                ,"FECHA"                         
                                ,"FORMA_PAGO"                    
                                ,"SUBTOTAL"                      
                                ,"MONEDA"                        
                                ,"DESCUENTO"                     
                                ,"TOTAL"                         
                                ,"METODO_PAGO"                   
                                ,"TIPO_COBRANTE"                 
                                ,"LUGAR_EXPEDICION"              
                                ,"NO_CERTIFICADO"                
                                ,"CERTIFICADO"                   
                                ,"SELLO"                         
                                ---+ cfdi:Emisor   
                                ,"EMISOR_RFC"                    
                                ,"EMISOR_NOMBRE"                 
                                ,"EMISOR_REGIMEN"    
                                --   
                                ,"CALLE_EMISOR"           
                                ,"NO_EXTERIOR_EMISOR"     
                                ,"NO_INTERIOR_EMISOR"     
                                ,"COLONIA_EMISOR"         
                                ,"LOCALIDAD_EMISOR"       
                                ,"MUNICIPIO_EMISOR"       
                                ,"ESTADO_EMISOR"          
                                ,"PAIS_EMISOR"            
                                ,"CODIGO_POSTAL_EMISOR"   
                                ,"REGIMEN_EMISOR"      				   
                                ---+ cfdi:Receptor   
                                ,"RECEPTOR_RFC"                  
                                ,"RECEPTOR_NOMBRE"               
                                ,"USO_CFDI"    
                                ,"PAIS_RECEPTOR"					   
                                ---+ cfdi:Conceptos / cfdi:Concepto   
                                ,"CLAVE_PROD_SERV"               
                                ,"CANTIDAD"                      
                                ,"CLAVE_UNIDAD"                  
                                ,"DESCRIPCION"                   
                                ,"VALOR_UNITARIO"                
                                ,"IMPORTE"                        
                                ,"DESCUENTO_CONCEPTOS"           
                                ---+ cfdi:Complemento / nomina12:Nomina   
                                ,"NOMINA_VERSION"                
                                ,"TIPO_NOMINA"                   
                                ,"FECHA_PAGO"                    
                                ,"FECHA_INICIAL_PAGO"            
                                ,"FECHA_FINAL_PAGO"              
                                ,"NUM_DIAS_PAGADOS"              
                                ,"TOTAL_PERCEPCIONES"            
                                ,"TOTAL_DEDUCCIONES"             
                                ,"TOTAL_OTROS_PAGOS"             
                                ---+ cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
                                ,"REGISTRO_PATRONAL"             
                                ---+ cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
                                ,"CURP"                          
                                ,"NUM_SEGURIDAD_SOCIAL"          
                                ,"FECHA_INICIO_REL_LABORAL"      
                                ,"ANTIGUEDAD"                    
                                ,"TIPO_CONTRATO"                 
                                ,"TIPO_REGIMEN"                  
                                ,"NUMERO_EMPLEADO"               
                                ,"RIESGO_PUESTO"                 
                                ,"PERIODICIDAD_PAGO"             
                                ,"SALARIO_DIARIO_INTEGRADO"      
                                ,"CLAVE_ENT_FED"                 
                                ----+ cfdi:Complemento / tfd:TimbreFiscalDigital   
                                ,"VERSION_TFD"                   
                                ,"UUID"                          
                                ,"FECHA_TIMBRADO"                
                                ,"RFC_PROV_CERTIF"               
                                ,"SELLO_CFD"                     
                                ,"NO_CERTIFICADO_SAT"            
                                ,"SELLO_SAT"                     
                                ----+ cfdi:Addenda / empleado:Firma   
                                ,"VERSIONFIR"                    
                                ,"SELLOEMPLEADO"                 
                                ,"CERTIFICADOEMPLEADO"           
                                ,"FECHAFIR"                      
                                ,"NUMEROCERTIFICADO"             
                                ,"LAYOUT"                        
                                ,"IMAGEN"     
                                --   
                                ,"STATUS_PROCESO"   
                                ,creation_by   
                                ,creation_date   
                                ,last_update_date   
                                ,last_update_by   
                            )   
                            VALUES    
                            (   
                                TO_NUMBER(r_cfdi_comprobante.id_factura)   
                                ---+ cfdi:Comprobante   
                                ,l_version   
                                ,l_fecha   
                                ,l_forma_pago   
                                ,TO_NUMBER(l_subtotal)   
                                ,l_moneda   
                                ,TO_NUMBER(l_descuento)   
                                ,TO_NUMBER(l_total)   
                                ,l_metodo_pago   
                                ,l_tipo_cobrante   
                                ,l_lugar_expedicion   
                                ,l_no_certificado   
                                ,l_certificado   
                                ,l_sello   
                                ---+ cfdi:Emisor   
                                ,l_emisor_rfc       
                                ,l_emisor_nombre    
                                ,l_emisor_regimen   
                                --   
                                ,l_calleEmisor           
                                ,l_noExteriorEmisor      
                                ,l_noInteriorEmisor      
                                ,l_coloniaEmisor         
                                ,l_localidadEmisor       
                                ,l_municipioEmisor       
                                ,l_estadoEmisor          
                                ,l_paisEmisor            
                                ,l_codigoPostalEmisor    
                                ,l_RegimenEmisor         
                                ---+ cfdi:Receptor   
                                ,l_receptor_rfc      
                                ,l_receptor_nombre   
                                ,l_uso_cfdi   
                                ,l_paisReceptor   
                                ---+ cfdi:Conceptos / cfdi:Concepto   
                                ,l_ClaveProdServ         
                                ,l_Cantidad              
                                ,l_ClaveUnidad           
                                ,l_Descripcion           
                                ,TO_NUMBER(l_ValorUnitario)        
                                ,TO_NUMBER(l_Importe)               
                                ,TO_NUMBER(l_Descuento_conceptos)   
                                ---+ cfdi:Complemento / nomina12:Nomina   
                                ,l_nomina_version      
                                ,l_TipoNomina          
                                ,l_fecha_pago          
                                ,l_fechainicialpago    
                                ,l_fechafinalpago      
                                ,l_num_dias_pagados    
                                ,TO_NUMBER(l_TotalPercepciones)   
                                ,TO_NUMBER(l_TotalDeducciones)    
                                ,TO_NUMBER(l_TotalOtrosPagos)    
                                ---+ cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
                                ,l_RegistroPatronal   
                                ---+ cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
                                ,l_Curp                      
                                ,l_NumSeguridadSocial        
                                ,l_FechaInicioRelLaboral     
                                ,l_Antiguedad                
                                ,l_TipoContrato              
                                ,l_TipoRegimen               
                                ,l_NumeroEmpleado            
                                ,l_RiesgoPuesto              
                                ,l_PeriodicidadPago          
                                ,TO_NUMBER(l_SalarioDiarioIntegrado)   
                                ,l_ClaveEntFed    
                                ----+ cfdi:Complemento / tfd:TimbreFiscalDigital   
                                ,l_VersionTFD          
                                ,l_UUID    
                                ,l_FechaTimbrado       
                                ,l_RfcProvCertif    
                                ,l_SelloCFD            
                                ,l_NoCertificadoSAT    
                                ,l_SelloSAT    
                                ----+ cfdi:Addenda / empleado:Firma   
                                ,l_VersionFir            
                                ,l_selloEmpleado         
                                ,l_certificadoEmpleado   
                                ,l_fechaFir              
                                ,l_numeroCertificado     
                                ,l_Layout                
                                ,l_imagen     
                                ,'EXTRAIDO'   
                                ,APEX_UTIL.GET_CURRENT_USER_ID   
                                ,SYSDATE   
                                ,SYSDATE   
                                ,APEX_UTIL.GET_CURRENT_USER_ID   
                            );   
                            COMMIT;   
                               
                            UPDATE xxgrg_pay_facturas_electronicas xpfe   
                            SET xpfe.status = 'EXTRAIDO'   
                            WHERE xpfe.uuid = r_cfdi_comprobante.uuid   
                            AND xpfe.id_factura = r_cfdi_comprobante.id_factura;   
                              
  
                            l_sttausHeader:= 'SH';   
                               
                               
                        EXCEPTION   
                        WHEN OTHERS THEN   
                            lc_sqlerrm := SQLERRM;   
                            log ('ERROR: Al insertar lo datos en la tabla xxtoks_hr_header_cfdi'||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                            VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al insertar lo datos en la tabla xxtoks_hr_header_cfdi',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                            COMMIT;  
							lc_sqlerrm := NULL;   
                            l_sttausHeader:= 'EH';   
                        END;	   
       
                        log ('XML PROCESADO....');   
       
                        /*output (TO_NUMBER(r_cfdi_comprobante.id_factura)   
                                              ||'|'||l_statusLinesP   
                                              ||'|'||l_statusLinesD   
                                              ||'|'||l_statusLinesO   
                                              ||'|'||l_sttausHeader   
                                              ||'|'||r_cfdi_comprobante.uuid   
                                              ||'|'||l_contador   
                                              ||'|'||TRUNC(SYSDATE)   
                                              ||'|'||r_cfdi_comprobante.numero_de_empleado); */  
       
                    ELSE   
                        l_statusLinesP:= 'ELP';   
                        l_statusLinesD:= 'ELD';   
                        l_statusLinesO:= 'ELO';   
                        l_sttausHeader:= 'EH';   
                                                 
                        log ('EL XML YA HABIA SIDO PROCESADO ANTERIORMENTE....');   
       
                        /*output (TO_NUMBER(r_cfdi_comprobante.id_factura)   
                                              ||'|'||l_statusLinesP   
                                              ||'|'||l_statusLinesD   
                                              ||'|'||l_statusLinesO   
                                              ||'|'||l_sttausHeader   
                                              ||'|'||r_cfdi_comprobante.uuid   
                                              ||'|'||l_contador   
                                              ||'|'||TRUNC(SYSDATE)   
                                              ||'|'||r_cfdi_comprobante.numero_de_empleado); */  
                           
                        INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                        VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'YA EXISTE EL XML EN LA TABLA',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                        COMMIT;  
  
					END IF;   
                                       
                    l_contador                 := NULL;   
                    l_version                  := NULL;   
                    l_fecha                    := NULL;   
                    l_forma_pago               := NULL;   
                    l_subtotal                 := NULL;   
                    l_moneda                   := NULL;   
                    l_descuento                := NULL;   
                    l_total                    := NULL;   
                    l_metodo_pago              := NULL;   
                    l_tipo_cobrante            := NULL;   
                    l_lugar_expedicion         := NULL;   
                    l_no_certificado           := NULL;   
                    l_certificado              := NULL;   
                    l_sello                    := NULL;   
                    l_emisor_rfc               := NULL;    
                    l_emisor_nombre            := NULL;    
                    l_emisor_regimen           := NULL;   
                    l_receptor_rfc             := NULL;   
                    l_receptor_nombre          := NULL;   
                    l_uso_cfdi                 := NULL;   
                    l_ClaveProdServ            := NULL;        
                    l_Cantidad                 := NULL;           
                    l_ClaveUnidad              := NULL;          
                    l_Descripcion              := NULL;         
                    l_ValorUnitario            := NULL;      
                    l_Importe                  := NULL;            
                    l_Descuento_conceptos      := NULL;   
                    l_nomina_version           := NULL;     
                    l_TipoNomina               := NULL;       
                    l_fecha_pago               := NULL;        
                    l_fechainicialpago         := NULL;   
                    l_fechafinalpago           := NULL;   
                    l_num_dias_pagados         := NULL;   
                    l_TotalPercepciones        := NULL;   
                    l_TotalDeducciones         := NULL;   
                    l_TotalOtrosPagos          := NULL;   
                    l_RegistroPatronal         := NULL;   
                    l_Curp                     := NULL;                   
                    l_NumSeguridadSocial       := NULL;      
                    l_FechaInicioRelLaboral    := NULL;   
                    l_Antiguedad               := NULL;       
                    l_TipoContrato             := NULL;       
                    l_TipoRegimen              := NULL;       
                    l_NumeroEmpleado           := NULL;       
                    l_RiesgoPuesto             := NULL;       
                    l_PeriodicidadPago         := NULL;       
                    l_SalarioDiarioIntegrado   := NULL;   
                    l_ClaveEntFed              := NULL;   
                    l_VersionTFD               := NULL;      
                    l_UUID                     := NULL;   
                    l_FechaTimbrado            := NULL;     
                    l_RfcProvCertif            := NULL;   
                    l_SelloCFD                 := NULL;   
                    l_NoCertificadoSAT         := NULL;   
                    l_SelloSAT                 := NULL;   
                    l_VersionFir               := NULL;      
                    l_selloEmpleado            := NULL;      
                    l_certificadoEmpleado      := NULL;   
                    l_fechaFir                 := NULL;      
                    l_numeroCertificado        := NULL;   
                    l_Layout                   := NULL;     
                    l_imagen                   := NULL;   
                    l_TotalSueldos             := NULL;   
                    l_TotalGravado             := NULL;   
                    l_TotalExento              := NULL;   
                    l_TotalOtrasDeducciones    := NULL;   
                    l_TotalImpuestosRetenidos  := NULL;   
                    l_SubsidioCausado          := NULL;   
                    --l_sta_pro_deduc            := NULL;   
                    --l_error_deduc              := NULL;   
                    --l_sta_pro_otro             := NULL;   
                    --l_error_otro               := NULL;   
                    --l_sta_pro_per              := NULL;   
                    --l_error_percep             := NULL;   
                       
                    log ('*****************************************************************************************');   
                    log (' ');   
                   
                EXCEPTION   
                WHEN OTHERS THEN   
                    lc_sqlerrm := SQLERRM;   
                    log ('ERROR: Al extraer el nodo (cfdi:Comprobante) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
                    INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
                    VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Comprobante)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
                    COMMIT;  
					lc_sqlerrm := NULL;   
                END;   
           
                COMMIT;   
            END LOOP;  
            --  
        EXCEPTION WHEN OTHERS THEN  
            --  
            lc_sqlerrm := SQLERRM;   
            log ('ERROR: Al leer la tabla de los XML recibidos'||' - '||lc_sqlerrm);   
            INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
            VALUES (-9999,'ZZZALL UUIDZZZ','ERROR: Al leer la tabla de los XML recibidos',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);  
            COMMIT;  
			--  
        END;	   
		   
		--COMMIT;   
        --UTL_FILE.fclose (fileHandler);   
		--UTL_FILE.fclose (fileHandler_log);   
   
    EXCEPTION   
    WHEN OTHERS THEN   
		lc_sqlerrm := SQLERRM;   
		log ('ERROR: Al leer la tabla de los XML recibidos'||' - '||lc_sqlerrm);   
		INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
		VALUES (-9999,'ALL UUID','ERROR: Al leer la tabla de los XML recibidos',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);	  
		COMMIT;   
    END get_data_cfdi;   
	  
-----------------------------------------------------------------------------------	  
	PROCEDURE get_facturas(l_menssaje OUT VARCHAR2)   
	IS  
	    v_flag_exc          VARCHAR2(1);  
		v_directory_name    VARCHAR2(240) := 'TOKS_OUTGOING_FIRMADOS';  
		v_line              VARCHAR2(32767);  
		v_infilehandle      utl_file.file_type;  
		v_salida_reporte    CLOB;  
		  
		v_error             VARCHAR2(500);  
		--  
		CURSOR c_archivos IS  
		SELECT  
			 uuid          AS id_recibo  
			,uuid||'.xml'  AS nombre_archivo_recibo  
			--  
			,rfc_emisor	             
			,rfc_receptor	         
			,employee_number	     
			,fechapago	             
			,periodo	             
			--,montototal_codificado	  
			,montototal	             
			,periodicidad_pago                
		FROM  
			xxtoks_recibos_firmados_ext  
		ORDER BY    
			uuid;  
		/*SELECT      
			id_recibo  
			,nombre_archivo_recibo||'.xml' nombre_archivo_recibo  
		FROM  
			xxtoks_recibos_firmados_ext  
		WHERE 1=1  
		ORDER BY    
			nombre_archivo_recibo;*/  
		--  
		v_flag           NUMBER := 1;  
		l_job_name    	 VARCHAR2(2000):= 'XXTOKS_PAY_EXTR_CFDI';   
		l_sql         	 VARCHAR2(5000);   
		l_job_action  	 VARCHAR2(5000);   
		l_seq_job     	 NUMBER; 	  
		l_uuid_exists    NUMBER;  
		  
	BEGIN  
		--  
		DBMS_OUTPUT.PUT_LINE('Inicio de ejecucion de proceso: '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS'));  
		--  
		--  
		FOR v_archivo IN c_archivos LOOP  
			--  
			--Bloque para lectura del archivo  
			BEGIN  
				--Abriendo el archivo para su lectura  
				v_flag_exc := 'Y';  
				v_infilehandle   := utl_file.fopen(v_directory_name, v_archivo.nombre_archivo_recibo, 'r',32767);  
				--v_salida_reporte := empty_clob();  
				v_salida_reporte := NULL;  
				v_flag           := 1;  
				--  
				--Ciclo para lectura de las lineas del archivo  
				LOOP  
					--  
					BEGIN  
						--  
						utl_file.get_line(v_infilehandle, v_line, 32767);  
						--  
						IF v_flag > 1 THEN  
							--  
							v_salida_reporte := v_salida_reporte||CHR(10);  
							--  
						END IF;  
						--  
						--  
						--v_line := CONVERT(v_line, 'UTF8', 'WE8ISO8859P1');  
						--  
						if v_flag = 1 then  
							v_line := substr(v_line,2);  
							v_salida_reporte := v_line;  
						else  
							v_salida_reporte := v_salida_reporte||v_line;  
						end if;  
						--  
						v_flag := v_flag + 1;  
						--  
					EXCEPTION  
						WHEN NO_DATA_FOUND THEN  
							--  
							--DBMS_OUTPUT.PUT_LINE('Fin del archivo1.'||SQLERRM);  
							EXIT;  
							--  
					WHEN OTHERS THEN  
							--  
							--DBMS_OUTPUT.PUT_LINE('Fin del archivo2.'||SQLERRM);  
							EXIT;  
					END;  
					--  
				END LOOP;  
				--  
				utl_file.fclose(v_infilehandle);  
				--  
			EXCEPTION  
			  
				WHEN UTL_FILE.INVALID_PATH THEN   
					v_error := SQLERRM;  
				    v_flag_exc := 'N';  
			  
				WHEN UTL_FILE.INVALID_OPERATION THEN   
					v_error := SQLERRM;  
			        v_flag_exc := 'N';  
					  
				WHEN OTHERS THEN  
					--  
					v_error := SQLERRM;  
					v_flag_exc := 'N';  
  
			END;  
			--  
			BEGIN  
				/*  
				UPDATE    bolinf.cfdinom_trans  
				SET       vxml = v_salida_reporte  
				WHERE     1 = 1  
				AND       id_recibo = v_archivo.id_recibo;  
				COMMIT;  
				*/  
				BEGIN  
			    SELECT 1  
			    INTO l_uuid_exists  
			    FROM XXGRG_PAY_FACTURAS_ELECTRONICAS  
			    WHERE status <> 'CANCELADA'  
			    AND uuid = v_archivo.id_recibo; --uuid   
                 exception  
					  when OTHERS then  
                      l_uuid_exists := 0;  
                END;  
			  
				IF l_uuid_exists > 0 THEN  
				  
					DBMS_OUTPUT.PUT_LINE('El UUID '||v_archivo.id_recibo||' ya existe en la tabla');  
					  
				ELSIF l_uuid_exists = 0 AND v_flag_exc <> 'N' THEN   
  
					INSERT INTO xxgrg_pay_facturas_electronicas  
					(   
						numero_de_empleado  
						,fecha_pago  
						,rfc_emisor  
						,rfc_receptor  
						,periodo  
						,total  
						,recibo_xml  
						,periocidad_de_pago  
						,uuid  
						,status  
						,creation_date  
						,last_update_date  
						,created_by  
						,last_update_by  
					)  
					VALUES  
					(   
						 v_archivo.employee_number        --v_numero_empleado  
						,v_archivo.fechapago              --v_fecha_pago  
						,v_archivo.rfc_emisor             --v_rfc_emisor  
						,v_archivo.rfc_receptor           --v_rfc_receptor  
						,v_archivo.periodo                --v_periodo  
						,TO_NUMBER(v_archivo.montototal)  --v_total  
						,v_salida_reporte                 --v_recibo_xml  
						,v_archivo.periodicidad_pago      --v_periocidad_de_pago  
						,v_archivo.id_recibo              --v_uuid  
						,'RECIBIDA'  
						,SYSDATE  
						,SYSDATE  
						,'-1'  
						,'-1'  
					);  
					COMMIT;  
  
					DBMS_OUTPUT.PUT_LINE('El archivo '||v_archivo.nombre_archivo_recibo||' se ha insertado correctamente.');  
				  
				ELSIF l_uuid_exists = 0 AND v_flag_exc = 'N' THEN  
  
					INSERT INTO xxgrg_pay_facturas_electronicas  
					(   
						numero_de_empleado  
						,fecha_pago  
						,rfc_emisor  
						,rfc_receptor  
						,periodo  
						,total  
						,recibo_xml  
						,periocidad_de_pago  
						,uuid  
						,status  
						,attribute1  
						,creation_date  
						,last_update_date  
						,created_by  
						,last_update_by  
					)  
					VALUES  
					(   
						 v_archivo.employee_number        --v_numero_empleado  
						,v_archivo.fechapago              --v_fecha_pago  
						,v_archivo.rfc_emisor             --v_rfc_emisor  
						,v_archivo.rfc_receptor           --v_rfc_receptor  
						,v_archivo.periodo                --v_periodo  
						,TO_NUMBER(v_archivo.montototal)  --v_total  
						,NULL                             --v_recibo_xml  
						,v_archivo.periodicidad_pago      --v_periocidad_de_pago  
						,v_archivo.id_recibo              --v_uuid  
						,'RECIBIDA'  
						,'no se inserto xml debido a que el archivo '|| v_archivo.nombre_archivo_recibo|| ' no existe en el directorio' || v_error  
						,SYSDATE  
						,SYSDATE  
						,'-1'  
						,'-1'  
					);  
					COMMIT;  
  
					DBMS_OUTPUT.PUT_LINE('El archivo '||v_archivo.nombre_archivo_recibo||' no se inserto debido a que no existe en el directorio.');				  
				  
				END IF;  
  
			EXCEPTION	  
				  
			WHEN OTHERS THEN  
				v_error := SQLERRM;  
				  
				--DBMS_OUTPUT.PUT_LINE('Ocurrio un error durante la ejecuci?n del reporte. >>'||v_error);  
                INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,  
															UUID,  
															MENSAJE,  
															ERROR_ORACLE,  
															FECHA)   
															VALUES (null,  
																	 '',  
																	 'ERROR: Error al insertar factura: ' || v_archivo.id_recibo,  
																	 v_error,  
																	 SYSDATE);  
				COMMIT;  
			END;  
			--  
		END LOOP;  
		--  
		DBMS_OUTPUT.PUT_LINE('Fin de ejecucion de carga de archivos cfdi: '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS'));  
		  
		--Aqui extrae los datos de los nodos de las facturas XML 	   
		--GRG_PAY_EXTRACCION_CFDI_PKG.get_data_cfdi(l_menssaje);  
		   
		l_seq_job:= XXTOKS_PAY_EXTR_CFDI_SEQ.NEXTVAL;   
		   
		l_sql := '  DECLARE   
						l_menssaje  VARCHAR2(250);   
					BEGIN   
						GRG_PAY_EXTRACCION_CFDI_PKG.get_data_cfdi(l_menssaje);   
					END;';   
		   
		l_job_action:= REPLACE(l_sql,'''''','NULL');   
  
		dbms_scheduler.create_job (  
									   job_name   => l_job_name||l_seq_job   
									  ,job_type   => 'PLSQL_BLOCK'   
									  ,job_action => l_job_action   
									  ,enabled    => TRUE   
									  ,auto_drop  => TRUE   
									  ,comments   => 'Ejecuta de forma asincrona el proceso de extraccion de los nodos del timbrado que se mando mediante el ATI'  
								  );   
  
		--  
  
	EXCEPTION  
	 WHEN OTHERS THEN   
	  v_error := SQLERRM;  
	    
		 INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,  
													 UUID,  
													 MENSAJE,  
													 ERROR_ORACLE,  
													 FECHA)   
													 VALUES (null,  
															 '',  
															 'ERROR: Error principal al ejecutar get_facturas',  
															 v_error,  
															 SYSDATE);  
	     COMMIT;  
  
	END get_facturas;  
----------------------------------------------------------------------------------------------------------------------	  
----------------------------------------------------------------------------------------------------------------------	  
----------------------------------------------------------------------------------------------------------------------  
    PROCEDURE get_data_cfdi2 (l_menssaje OUT VARCHAR2)   
    IS   
    
        statusLinesP              VARCHAR2 (10);   
        statusLinesD              VARCHAR2 (10);   
        statusLinesO              VARCHAR2 (10);   
        lc_sqlerrm                VARCHAR2 (250);   
        l_contador                NUMBER;   
        l_header                  VARCHAR2 (250);   
        l_ID_HEADER               VARCHAR2 (2000);   
		   
		--l_total_per               NUMBER;   
		--l_total_deduc             NUMBER;   
		--l_total_otrospagos        NUMBER;   
           
		--+ c_cfdi_comprobante (13 campos)   
		l_version                 VARCHAR2 (2000);   
        l_fecha                   VARCHAR2 (2000);   
        l_forma_pago              VARCHAR2 (2000);   
        l_subtotal                VARCHAR2 (2000);   
        l_descuento               VARCHAR2 (2000);   
		l_moneda                  VARCHAR2 (2000);   
        l_total                   VARCHAR2 (2000);   
        l_metodo_pago             VARCHAR2 (2000);   
        l_tipo_cobrante           VARCHAR2 (2000);   
        l_lugar_expedicion        VARCHAR2 (2000);   
        l_no_certificado          VARCHAR2 (2000);   
        l_certificado             CLOB;   
        l_sello                   CLOB;   
		   
		--+ c_cfdi_emisor (3 campos)   
        l_emisor_rfc              VARCHAR2 (2000);   
        l_emisor_nombre           VARCHAR2 (2000);   
        l_emisor_regimen          VARCHAR2 (2000);   
		l_calleEmisor             VARCHAR2 (2000);   
		l_noExteriorEmisor        VARCHAR2 (2000);   
		l_noInteriorEmisor        VARCHAR2 (2000);   
		l_coloniaEmisor           VARCHAR2 (2000);   
		l_localidadEmisor         VARCHAR2 (2000);   
		l_municipioEmisor         VARCHAR2 (2000);   
		l_estadoEmisor            VARCHAR2 (2000);   
		l_paisEmisor              VARCHAR2 (2000);   
		l_codigoPostalEmisor      VARCHAR2 (2000);    
		l_RegimenEmisor           VARCHAR2 (2000);   
		   
		--+ c_cfdi_receptor (3 campos)   
        l_receptor_rfc            VARCHAR2 (2000);   
        l_receptor_nombre         VARCHAR2 (2000);   
		l_uso_cfdi                VARCHAR2 (2000);   
		l_paisReceptor            VARCHAR2 (2000);   
		   
		--+ c_cfdi_conceptos (7 campos)   
		l_ClaveProdServ  		  VARCHAR2 (2000);   
		l_Cantidad       		  VARCHAR2 (2000);   
		l_ClaveUnidad    		  VARCHAR2 (2000);   
		l_Descripcion    		  VARCHAR2 (2000);   
		l_ValorUnitario  		  VARCHAR2 (2000);   
		l_Importe        		  VARCHAR2 (2000);   
		l_Descuento_conceptos	  VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina (9 campos)   
		l_nomina_version          VARCHAR2 (2000);   
		l_TipoNomina              VARCHAR2 (2000);   
		l_fecha_pago              VARCHAR2 (2000);   
		l_fechainicialpago        VARCHAR2 (2000);   
		l_fechafinalpago          VARCHAR2 (2000);   
		l_num_dias_pagados        VARCHAR2 (2000);   
		l_TotalPercepciones       VARCHAR2 (2000);   
		l_TotalDeducciones        VARCHAR2 (2000);   
		l_TotalOtrosPagos         VARCHAR2 (2000);   
   
		--+ c_cfdi_com_nomina_emi (1 campo)   
        l_RegistroPatronal        VARCHAR2 (2000);   
		   
		--+  c_cfdi_com_nomina_rec (11 campos)   
		l_Curp                    VARCHAR2 (2000);   
		l_NumSeguridadSocial      VARCHAR2 (2000);   
		l_FechaInicioRelLaboral   VARCHAR2 (2000);   
		l_Antiguedad              VARCHAR2 (2000);   
		l_TipoContrato            VARCHAR2 (2000);   
		l_TipoRegimen             VARCHAR2 (2000);   
		l_NumeroEmpleado          VARCHAR2 (2000);   
		l_RiesgoPuesto            VARCHAR2 (2000);   
		l_PeriodicidadPago        VARCHAR2 (2000);   
		l_SalarioDiarioIntegrado  VARCHAR2 (2000);   
		l_ClaveEntFed             VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina_perc  (3 campos)       
		l_TotalSueldos            VARCHAR2 (2000);   
		l_TotalGravado            VARCHAR2 (2000);   
		l_TotalExento             VARCHAR2 (2000);   
		   
		/*--+ c_cfdi_com_nomina_perc2 (5 campos)   
		TYPE list_of_percepciones IS TABLE OF VARCHAR2 (2000);   
		l_TipoPercepcion          list_of_percepciones := list_of_percepciones ();   
		l_ClavePercepcion         list_of_percepciones := list_of_percepciones ();   
		l_ConceptoPercepcion      list_of_percepciones := list_of_percepciones ();   
		l_ImporteGravado          list_of_percepciones := list_of_percepciones ();   
		l_ImporteExento           list_of_percepciones := list_of_percepciones ();*/   
		   
		--+ c_cfdi_com_nomina_deduc (2 campos)   
		l_TotalOtrasDeducciones   VARCHAR2 (2000);   
		l_TotalImpuestosRetenidos VARCHAR2 (2000);   
		   
		/*--+ c_cfdi_com_nomina_deduc2 (4 campos)   
		TYPE list_of_deducciones IS TABLE OF VARCHAR2 (2000);   
		l_TipoDeduccion           list_of_deducciones := list_of_deducciones ();   
		l_ClaveDeduccion          list_of_deducciones := list_of_deducciones ();   
		l_ConceptoDeduccion       list_of_deducciones := list_of_deducciones ();   
		l_ImporteDeduccion        list_of_deducciones := list_of_deducciones ();   
		   
		l_ImporteGravadoD         list_of_deducciones := list_of_deducciones ();   
		l_ImporteExentoD          list_of_deducciones := list_of_deducciones ();   
		   
		--+ c_cfdi_com_nomina_otrospag (4 campos)   
		TYPE list_of_otropagos IS TABLE OF VARCHAR2 (2000);   
		l_TipoOtroPago            list_of_otropagos := list_of_otropagos ();   
		l_ClaveOtroPago           list_of_otropagos := list_of_otropagos ();   
		l_ConceptoOtroPago        list_of_otropagos := list_of_otropagos ();   
		l_ImporteOtroPago         list_of_otropagos := list_of_otropagos ();*/   
		   
		--+ c_cfdi_com_nomina_otrospag2 (1 campo)   
		l_SubsidioCausado         VARCHAR2 (2000);   
		   
		--+ c_cfdi_com_nomina_timbreFD ( 7 campos)   
		l_VersionTFD              VARCHAR2 (2000);   
		l_UUID                    VARCHAR2 (2000);   
		l_FechaTimbrado           VARCHAR2 (2000);   
		l_RfcProvCertif           VARCHAR2 (2000);   
		l_SelloCFD                CLOB;   
		l_NoCertificadoSAT        VARCHAR2 (2000);   
		l_SelloSAT                CLOB;   
		   
		---+ c_cfdi_com_nomina_firma ( 7 campos)   
		l_VersionFir              VARCHAR2 (2000);   
		l_selloEmpleado           VARCHAR2 (2000);   
		l_certificadoEmpleado     VARCHAR2 (2000);   
		l_fechaFir                VARCHAR2 (2000);   
		l_numeroCertificado       VARCHAR2 (2000);   
		l_Layout                  CLOB;   
		l_imagen                  CLOB;   
		   
		--+   
		--l_sta_pro_per             VARCHAR2 (2000);   
		--l_error_percep            VARCHAR2 (2000);   
		--l_sta_pro_deduc           VARCHAR2 (2000);   
		--l_error_deduc             VARCHAR2 (2000);   
		--l_sta_pro_otro            VARCHAR2 (2000);   
		--l_error_otro              VARCHAR2 (2000);   
		   
		l_statusLinesP            VARCHAR2 (5);   
		l_statusLinesD            VARCHAR2 (5);   
		l_statusLinesO            VARCHAR2 (5);   
		l_sttausHeader            VARCHAR2 (5);   
		   
		----------------------  
		-- cfdi:Comprobante  
		----------------------  
		CURSOR c_cfdi_comprobante IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT   
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
				,xpfe.numero_de_empleado  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
            ORDER BY xpfe.id_factura
		)  
		SELECT res_xml.*  
		,xfdxt.id_factura  
		,xfdxt.uuid  
		,xfdxt.numero_de_empleado  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									 ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Version           VARCHAR2 (2000) PATH '@Version',  
						Fecha             VARCHAR2 (2000) PATH '@Fecha',  
						FormaPago         VARCHAR2 (2000) PATH '@FormaPago',  
						SubTotal          VARCHAR2 (2000) PATH '@SubTotal',  
						Moneda            VARCHAR2 (2000) PATH '@Moneda',   
						Descuento         VARCHAR2 (2000) PATH '@Descuento',  
						Total             VARCHAR2 (2000) PATH '@Total',  
						MetodoPago        VARCHAR2 (2000) PATH '@MetodoPago',  
						TipoDeComprobante VARCHAR2 (2000) PATH '@TipoDeComprobante',  
						LugarExpedicion   VARCHAR2 (2000) PATH '@LugarExpedicion',  
						NoCertificado     VARCHAR2 (2000) PATH '@NoCertificado',  
						Certificado       CLOB            PATH '@Certificado',  
						Sello             CLOB            PATH '@Sello'  
					) res_xml 
		UNION ALL 
		SELECT res_xml.*  
		,xfdxt.id_factura  
		,xfdxt.uuid  
		,xfdxt.numero_de_empleado  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									 ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Version           VARCHAR2 (2000) PATH '@Version',  
						Fecha             VARCHAR2 (2000) PATH '@Fecha',  
						FormaPago         VARCHAR2 (2000) PATH '@FormaPago',  
						SubTotal          VARCHAR2 (2000) PATH '@SubTotal',  
						Moneda            VARCHAR2 (2000) PATH '@Moneda',   
						Descuento         VARCHAR2 (2000) PATH '@Descuento',  
						Total             VARCHAR2 (2000) PATH '@Total',  
						MetodoPago        VARCHAR2 (2000) PATH '@MetodoPago',  
						TipoDeComprobante VARCHAR2 (2000) PATH '@TipoDeComprobante',  
						LugarExpedicion   VARCHAR2 (2000) PATH '@LugarExpedicion',  
						NoCertificado     VARCHAR2 (2000) PATH '@NoCertificado',  
						Certificado       CLOB            PATH '@Certificado',  
						Sello             CLOB            PATH '@Sello'  
					) res_xml;  
		  
		----------------------  
		--    cfdi:Emisor   --  
		----------------------  
		CURSOR c_cfdi_emisor (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.id_factura  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE(  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Rfc_Emisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/@Rfc',  
						Nombre_Emisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/@Nombre',  
						RegimenFiscal       VARCHAR2 (2000) PATH 'cfdi:Emisor/@RegimenFiscal',  
						-- domicilio fiscal  
                        calleEmisor         VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@calle',  
                        noExteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noExterior',  
                        noInteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noInterior',  
                        coloniaEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@colonia',  
                        localidadEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@localidad',  
                        municipioEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@municipio',  
                        estadoEmisor        VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@estado',  
                        paisEmisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@pais',  
                        codigoPostalEmisor  VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@codigoPostal',    
                        --RegimenFiscal  
                        RegimenEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:RegimenFiscal/@Regimen'  
					)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.id_factura  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE(  
						xmlnamespaces (  
										'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
										'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
										'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
										'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
										'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
						'cfdi:Comprobante'  
						PASSING xfdxt.xml  
						COLUMNS   
						Rfc_Emisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/@Rfc',  
						Nombre_Emisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/@Nombre',  
						RegimenFiscal       VARCHAR2 (2000) PATH 'cfdi:Emisor/@RegimenFiscal',  
						-- domicilio fiscal  
                        calleEmisor         VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@calle',  
                        noExteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noExterior',  
                        noInteriorEmisor    VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@noInterior',  
                        coloniaEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@colonia',  
                        localidadEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@localidad',  
                        municipioEmisor     VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@municipio',  
                        estadoEmisor        VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@estado',  
                        paisEmisor          VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@pais',  
                        codigoPostalEmisor  VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:DomicilioFiscal/@codigoPostal',    
                        --RegimenFiscal  
                        RegimenEmisor       VARCHAR2 (2000) PATH 'cfdi:Emisor/cfdi:RegimenFiscal/@Regimen'  
					)res_xml;  
		  
		--------------------  
		-- cfdi:Receptor --  
		--------------------  
		CURSOR c_cfdi_receptor (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							Rfc_Receptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/@Rfc',  
							Nombre_Receptor VARCHAR2 (2000) PATH 'cfdi:Receptor/@Nombre',  
							UsoCFDI         VARCHAR2 (2000) PATH 'cfdi:Receptor/@UsoCFDI',  
							--cfdi:Domicilio  
                            paisReceptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/cfdi:Domicilio/@pais'  
						)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							Rfc_Receptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/@Rfc',  
							Nombre_Receptor VARCHAR2 (2000) PATH 'cfdi:Receptor/@Nombre',  
							UsoCFDI         VARCHAR2 (2000) PATH 'cfdi:Receptor/@UsoCFDI',  
							--cfdi:Domicilio  
                            paisReceptor    VARCHAR2 (2000) PATH 'cfdi:Receptor/cfdi:Domicilio/@pais'  
						)res_xml;  
		  
		-----------------------------------  
		-- cfdi:Conceptos / cfdi:Concepto  
		-----------------------------------  
		CURSOR c_cfdi_conceptos (p_id_factura IN NUMBER) IS	  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							ClaveProdServ   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveProdServ',  
							Cantidad        VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Cantidad',  
							ClaveUnidad     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveUnidad',  
							Descripcion     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descripcion',  
							ValorUnitario   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ValorUnitario',  
							Importe         VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Importe',  
							DescuentoConcep VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descuento'  
						)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							ClaveProdServ   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveProdServ',  
							Cantidad        VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Cantidad',  
							ClaveUnidad     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ClaveUnidad',  
							Descripcion     VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descripcion',  
							ValorUnitario   VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@ValorUnitario',  
							Importe         VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Importe',  
							DescuentoConcep VARCHAR2 (2000) PATH 'cfdi:Conceptos/cfdi:Concepto/@Descuento'  
						)res_xml;  
		  
		--------------------------------------  
		-- cfdi:Complemento / nomina12:Nomina  
		--------------------------------------  
		CURSOR c_cfdi_com_nomina (p_id_factura IN NUMBER) IS		  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina  
							 return <row>  
							  {  
								$i/@Version,  
								$i/@TipoNomina,  
								$i/@FechaPago,  
								$i/@FechaInicialPago,  
								$i/@FechaFinalPago,  
								$i/@NumDiasPagados,  
								$i/@TotalPercepciones,  
								$i/@TotalDeducciones,  
								$i/@TotalOtrosPagos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Version_com_nom   VARCHAR2 (2000) PATH '@Version',  
							TipoNomina        VARCHAR2 (2000) PATH '@TipoNomina',  
							FechaPago         VARCHAR2 (2000) PATH '@FechaPago',  
							FechaInicialPago  VARCHAR2 (2000) PATH '@FechaInicialPago',  
							FechaFinalPago    VARCHAR2 (2000) PATH '@FechaFinalPago',  
							NumDiasPagados    VARCHAR2 (2000) PATH '@NumDiasPagados',  
							TotalPercepciones VARCHAR2 (2000) PATH '@TotalPercepciones',  
							TotalDeducciones  VARCHAR2 (2000) PATH '@TotalDeducciones',  
							TotalOtrosPagos   VARCHAR2 (2000) PATH '@TotalOtrosPagos'  
						)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina  
							 return <row>  
							  {  
								$i/@Version,  
								$i/@TipoNomina,  
								$i/@FechaPago,  
								$i/@FechaInicialPago,  
								$i/@FechaFinalPago,  
								$i/@NumDiasPagados,  
								$i/@TotalPercepciones,  
								$i/@TotalDeducciones,  
								$i/@TotalOtrosPagos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Version_com_nom   VARCHAR2 (2000) PATH '@Version',  
							TipoNomina        VARCHAR2 (2000) PATH '@TipoNomina',  
							FechaPago         VARCHAR2 (2000) PATH '@FechaPago',  
							FechaInicialPago  VARCHAR2 (2000) PATH '@FechaInicialPago',  
							FechaFinalPago    VARCHAR2 (2000) PATH '@FechaFinalPago',  
							NumDiasPagados    VARCHAR2 (2000) PATH '@NumDiasPagados',  
							TotalPercepciones VARCHAR2 (2000) PATH '@TotalPercepciones',  
							TotalDeducciones  VARCHAR2 (2000) PATH '@TotalDeducciones',  
							TotalOtrosPagos   VARCHAR2 (2000) PATH '@TotalOtrosPagos'  
						)res_xml;  
		  
		-------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Emisor  
		--------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_emi (p_id_factura IN NUMBER) IS		  
			WITH xxgrp_facturas_data_xml AS  
			(  
				SELECT  
					XMLTYPE(xpfe.recibo_xml) xml  
					,xpfe.id_factura  
					,xpfe.uuid  
				FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
				WHERE xpfe.status = 'RECIBIDA'  
				--AND xpfe.uuid = p_uuid  
				AND xpfe.id_factura = p_id_factura  
			)  
			SELECT res_xml.*, xfdxt.ID_FACTURA  
			FROM xxgrp_facturas_data_xml  xfdxt  
			,XMLTABLE (  
								xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											   ),  
								'cfdi:Comprobante'  
								PASSING xfdxt.xml  
								COLUMNS   
								RegistroPatronal VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Emisor/@RegistroPatronal'  
							)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
			FROM xxgrp_facturas_data_xml  xfdxt  
			,XMLTABLE (  
								xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											   ),  
								'cfdi:Comprobante'  
								PASSING xfdxt.xml  
								COLUMNS   
								RegistroPatronal VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:Emisor/@RegistroPatronal'  
							)res_xml;  
								     
		----------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Receptor      
		-----------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_rec (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Receptor  
							 return <row>  
							  {  
								$i/@Curp,  
								$i/@NumSeguridadSocial,  
								$i/@FechaInicioRelLaboral,  
								$i/@Antiuuedad,  
								$i/@TipoContrato,  
								$i/@TipoRegimen,  
								$i/@NumEmpleado,  
								$i/@RiesgoPuesto,  
								$i/@PeriodicidadPago,  
								$i/@SalarioDiarioIntegrado,  
								$i/@ClaveEntFed  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Curp                   VARCHAR2 (2000) PATH '@Curp',  
							NumSeguridadSocial     VARCHAR2 (2000) PATH '@NumSeguridadSocial',  
							FechaInicioRelLaboral  VARCHAR2 (2000) PATH '@FechaInicioRelLaboral',  
							Antiguedad             VARCHAR2 (2000) PATH '@Antiguedad',  
							TipoContrato           VARCHAR2 (2000) PATH '@TipoContrato',  
							TipoRegimen            VARCHAR2 (2000) PATH '@TipoRegimen',  
							NumeroEmpleado         VARCHAR2 (2000) PATH '@NumEmpleado',  
							RiesgoPuesto           VARCHAR2 (2000) PATH '@RiesgoPuesto',  
							PeriodicidadPago       VARCHAR2 (2000) PATH '@PeriodicidadPago',  
							SalarioDiarioIntegrado VARCHAR2 (2000) PATH '@SalarioDiarioIntegrado',  
							ClaveEntFed            VARCHAR2 (2000) PATH '@ClaveEntFed'  
						)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
										   ),  
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Receptor  
							 return <row>  
							  {  
								$i/@Curp,  
								$i/@NumSeguridadSocial,  
								$i/@FechaInicioRelLaboral,  
								$i/@Antiuuedad,  
								$i/@TipoContrato,  
								$i/@TipoRegimen,  
								$i/@NumEmpleado,  
								$i/@RiesgoPuesto,  
								$i/@PeriodicidadPago,  
								$i/@SalarioDiarioIntegrado,  
								$i/@ClaveEntFed  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS   
							Curp                   VARCHAR2 (2000) PATH '@Curp',  
							NumSeguridadSocial     VARCHAR2 (2000) PATH '@NumSeguridadSocial',  
							FechaInicioRelLaboral  VARCHAR2 (2000) PATH '@FechaInicioRelLaboral',  
							Antiguedad             VARCHAR2 (2000) PATH '@Antiguedad',  
							TipoContrato           VARCHAR2 (2000) PATH '@TipoContrato',  
							TipoRegimen            VARCHAR2 (2000) PATH '@TipoRegimen',  
							NumeroEmpleado         VARCHAR2 (2000) PATH '@NumEmpleado',  
							RiesgoPuesto           VARCHAR2 (2000) PATH '@RiesgoPuesto',  
							PeriodicidadPago       VARCHAR2 (2000) PATH '@PeriodicidadPago',  
							SalarioDiarioIntegrado VARCHAR2 (2000) PATH '@SalarioDiarioIntegrado',  
							ClaveEntFed            VARCHAR2 (2000) PATH '@ClaveEntFed'  
						)res_xml;  
		--------------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones  ********************  
		---------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_perc (p_id_factura IN NUMBER) IS	  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT NVL(res_xml.TotalSueldos,res_xml.TotalSeparacionIndemnizacion) TotalSueldos  
		,res_xml.TotalGravado  
		,res_xml.TotalExento  
		--,res_xml.TotalSeparacionIndemnizacion  
		, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones  
							 return <row>  
							  {  
								$i/@TotalSueldos,  
								$i/@TotalGravado,  
								$i/@TotalExento,  
								$i/TotalSeparacionIndemnizacion  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalSueldos   VARCHAR2 (2000) PATH '@TotalSueldos',  
							TotalGravado   VARCHAR2 (2000) PATH '@TotalGravado',  
							TotalExento    VARCHAR2 (2000) PATH '@TotalExento',  
							TotalSeparacionIndemnizacion    VARCHAR2 (2000) PATH '@TotalSeparacionIndemnizacion'  
					) res_xml
		UNION ALL
		SELECT NVL(res_xml.TotalSueldos,res_xml.TotalSeparacionIndemnizacion) TotalSueldos  
		,res_xml.TotalGravado  
		,res_xml.TotalExento  
		--,res_xml.TotalSeparacionIndemnizacion  
		, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones  
							 return <row>  
							  {  
								$i/@TotalSueldos,  
								$i/@TotalGravado,  
								$i/@TotalExento,  
								$i/TotalSeparacionIndemnizacion  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalSueldos   VARCHAR2 (2000) PATH '@TotalSueldos',  
							TotalGravado   VARCHAR2 (2000) PATH '@TotalGravado',  
							TotalExento    VARCHAR2 (2000) PATH '@TotalExento',  
							TotalSeparacionIndemnizacion    VARCHAR2 (2000) PATH '@TotalSeparacionIndemnizacion'  
					) res_xml;  
					  
		-------------------------------------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion  
		--------------------------------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_perc2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/nomina12:Percepcion  
							 return <row>  
							  {  
								$i/@TipoPercepcion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoPercepcion      VARCHAR2 (2000) PATH '@TipoPercepcion',  
							ClavePercepcion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoPercepcion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteGravado      VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExento       VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Percepciones/nomina12:Percepcion  
							 return <row>  
							  {  
								$i/@TipoPercepcion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoPercepcion      VARCHAR2 (2000) PATH '@TipoPercepcion',  
							ClavePercepcion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoPercepcion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteGravado      VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExento       VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml;  
	  
		-----------------------------------------------------------  
		--cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones   
		------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_deduc (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones  
							 return <row>  
							  {  
								$i/@TotalOtrasDeducciones,  
								$i/@TotalImpuestosRetenidos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalOtrasDeducciones    VARCHAR2 (2000) PATH '@TotalOtrasDeducciones',  
							TotalImpuestosRetenidos  VARCHAR2 (2000) PATH '@TotalImpuestosRetenidos'  
					) res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones  
							 return <row>  
							  {  
								$i/@TotalOtrasDeducciones,  
								$i/@TotalImpuestosRetenidos  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TotalOtrasDeducciones    VARCHAR2 (2000) PATH '@TotalOtrasDeducciones',  
							TotalImpuestosRetenidos  VARCHAR2 (2000) PATH '@TotalImpuestosRetenidos'  
					) res_xml;  
		------------------------------------------------------------------------------------  
		--cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion  
		------------------------------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_deduc2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones/nomina12:Deduccion  
							 return <row>  
							  {  
								$i/@TipoDeduccion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoDeduccion      VARCHAR2 (2000) PATH '@TipoDeduccion',  
							ClaveDeduccion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoDeduccion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteDeduccion   VARCHAR2 (2000) PATH '@Importe',   
							--  
							ImporteGravadoD    VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExentoD     VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:Deducciones/nomina12:Deduccion  
							 return <row>  
							  {  
								$i/@TipoDeduccion,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe,  
								$i/@ImporteGravado,  
								$i/@ImporteExento  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoDeduccion      VARCHAR2 (2000) PATH '@TipoDeduccion',  
							ClaveDeduccion     VARCHAR2 (2000) PATH '@Clave',  
							ConceptoDeduccion  VARCHAR2 (2000) PATH '@Concepto',  
							ImporteDeduccion   VARCHAR2 (2000) PATH '@Importe',   
							--  
							ImporteGravadoD    VARCHAR2 (2000) PATH '@ImporteGravado',  
							ImporteExentoD     VARCHAR2 (2000) PATH '@ImporteExento'  
					) res_xml;  
		  
		---------------------------------------------------------------  
		--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago   
		---------------------------------------------------------------  
		CURSOR c_cfdi_com_nomina_otrospag (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago  
							 return <row>  
							  {  
								$i/@TipoOtroPago,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoOtroPago     VARCHAR2 (2000) PATH '@TipoOtroPago',  
							ClaveOtroPago    VARCHAR2 (2000) PATH '@Clave',  
							ConceptoOtroPago VARCHAR2 (2000) PATH '@Concepto',  
							ImporteOtroPago  VARCHAR2 (2000) PATH '@Importe'  
					)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
												'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
												'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
												'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
												'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
												'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
											),       
							'for $i in /cfdi:Comprobante/cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago  
							 return <row>  
							  {  
								$i/@TipoOtroPago,  
								$i/@Clave,  
								$i/@Concepto,  
								$i/@Importe  
							  }  
							 </row>'  
							PASSING xfdxt.xml  
							COLUMNS  
							TipoOtroPago     VARCHAR2 (2000) PATH '@TipoOtroPago',  
							ClaveOtroPago    VARCHAR2 (2000) PATH '@Clave',  
							ConceptoOtroPago VARCHAR2 (2000) PATH '@Concepto',  
							ImporteOtroPago  VARCHAR2 (2000) PATH '@Importe'  
					)res_xml;  
  
		--------------------------------------------------------------------------------------------  
		--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo  
		--------------------------------------------------------------------------------------------   
		CURSOR c_cfdi_com_nomina_otrospag2 (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS  
							SubsidioCausado  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago/nomina12:SubsidioAlEmpleo/@SubsidioCausado'  
					)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS  
							SubsidioCausado  VARCHAR2 (2000) PATH 'cfdi:Complemento/nomina12:Nomina/nomina12:OtrosPagos/nomina12:OtroPago/nomina12:SubsidioAlEmpleo/@SubsidioCausado'  
					)res_xml;  
		  
		-----------------------------------------------  
		--  cfdi:Complemento / tfd:TimbreFiscalDigital  
		-----------------------------------------------  
		CURSOR c_cfdi_com_nomina_timbreFD (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionTFD        VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@Version',  
							UUID              VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@UUID',  
							FechaTimbrado     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@FechaTimbrado',  
							RfcProvCertif     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@RfcProvCertif',  
							SelloCFD          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloCFD',  
							NoCertificadoSAT  VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@NoCertificadoSAT',  
							SelloSAT          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloSAT'  
					)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionTFD        VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@Version',  
							UUID              VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@UUID',  
							FechaTimbrado     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@FechaTimbrado',  
							RfcProvCertif     VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@RfcProvCertif',  
							SelloCFD          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloCFD',  
							NoCertificadoSAT  VARCHAR2 (2000) PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@NoCertificadoSAT',  
							SelloSAT          CLOB            PATH 'cfdi:Complemento/tfd:TimbreFiscalDigital/@SelloSAT'  
					)res_xml;  
					  
		---------------------------------  
		--  cfdi:Addenda / empleado:Firma  
		----------------------------------  
		CURSOR c_cfdi_com_nomina_firma (p_id_factura IN NUMBER) IS  
		WITH xxgrp_facturas_data_xml AS  
		(  
			SELECT  
				XMLTYPE(xpfe.recibo_xml) xml  
				,xpfe.id_factura  
				,xpfe.uuid  
			FROM XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe  
			WHERE xpfe.status = 'RECIBIDA'  
			--AND xpfe.uuid = p_uuid  
			AND xpfe.id_factura = p_id_factura  
		)  
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/3'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionFir           VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@version',  
							selloEmpleado        VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@selloEmpleado',  
							certificadoEmpleado  VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@certificadoEmpleado',  
							fechaFir             VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@fecha',  
							numeroCertificado    VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@numeroCertificado',  
							Layout               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@Layout',  
							imagen               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@imagen'  
					)res_xml
		UNION ALL
		SELECT res_xml.*, xfdxt.ID_FACTURA  
		FROM xxgrp_facturas_data_xml  xfdxt  
		,XMLTABLE (  
							xmlnamespaces (  
											'http://www.sat.gob.mx/cfd/4'                 AS "cfdi",  
											'http://www.w3.org/2001/XMLSchema-instance'   AS "xsi",  
											'http://www.sat.gob.mx/nomina12'              AS "nomina12",  
											'http://www.sat.gob.mx/TimbreFiscalDigital'   AS "tfd",  
											'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"  
									   ),  
							'cfdi:Comprobante'  
							PASSING xfdxt.xml  
							COLUMNS   
							VersionFir           VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@version',  
							selloEmpleado        VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@selloEmpleado',  
							certificadoEmpleado  VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@certificadoEmpleado',  
							fechaFir             VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@fecha',  
							numeroCertificado    VARCHAR2 (2000) PATH 'cfdi:Addenda/empleado:Firma/@numeroCertificado',  
							Layout               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@Layout',  
							imagen               CLOB            PATH 'cfdi:Addenda/empleado:Firma/@imagen'  
					)res_xml;  
	BEGIN   
	   
          
  
		DBMS_OUTPUT.PUT_LINE('INICIA PROCESO DE EXTRACCION DEL CFDI XML.....');   
		   
		  
		-- Comienza a leer los XML del cursor  
		FOR r_cfdi_comprobante IN c_cfdi_comprobante LOOP   
		   
			BEGIN   
		   
				DBMS_OUTPUT.PUT_LINE('FACTURA ID --> '||r_cfdi_comprobante.id_factura);   
				DBMS_OUTPUT.PUT_LINE('UUID       --> '||r_cfdi_comprobante.uuid);   
				DBMS_OUTPUT.PUT_LINE('ESTAFETA   --> '||r_cfdi_comprobante.numero_de_empleado);   
				   
				--+ Valida que NO se haya extraido el XML    
				BEGIN  
				SELECT 1    
				INTO l_contador   
				FROM xxtoks_hr_header_cfdi_v2 xhhc   
				WHERE 1 = 1    
				AND xhhc.id_header = r_cfdi_comprobante.id_factura;  
				--AND xhhc.uuid = r_cfdi_comprobante.uuid   
				exception  
					  when OTHERS then  
                      l_contador := 0;  
			    END;  
   
				DBMS_OUTPUT.PUT_LINE ('l_contador --> '||l_contador);   
				   
				IF l_contador = 0 THEN   
					DBMS_OUTPUT.PUT_LINE ('EXTRAYENDO DATOS DE LOS NODOS DEL XML..........');   
					----------------------   
					-- cfdi:Comprobante   
					----------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Comprobante  ********');   
					l_version          := r_cfdi_comprobante.Version;   
					l_fecha            := r_cfdi_comprobante.Fecha;   
					l_forma_pago       := r_cfdi_comprobante.FormaPago;   
					l_subtotal         := r_cfdi_comprobante.SubTotal;   
					l_moneda           := r_cfdi_comprobante.Moneda;   
					l_descuento        := r_cfdi_comprobante.Descuento;   
					l_total            := r_cfdi_comprobante.Total;   
					l_metodo_pago      := r_cfdi_comprobante.MetodoPago;   
					l_tipo_cobrante    := r_cfdi_comprobante.TipoDeComprobante;   
					l_lugar_expedicion := r_cfdi_comprobante.LugarExpedicion;   
					l_no_certificado   := r_cfdi_comprobante.NoCertificado;   
					l_certificado      := r_cfdi_comprobante.Certificado;   
					l_sello            := r_cfdi_comprobante.Sello;   
					   
					DBMS_OUTPUT.PUT_LINE ('l_version          --> '||l_version);   
					DBMS_OUTPUT.PUT_LINE ('l_fecha            --> '||l_fecha);   
					DBMS_OUTPUT.PUT_LINE ('l_forma_pago       --> '||l_forma_pago);   
					DBMS_OUTPUT.PUT_LINE ('l_subtotal         --> '||l_subtotal);     
					DBMS_OUTPUT.PUT_LINE ('l_moneda           --> '||l_moneda);   
					DBMS_OUTPUT.PUT_LINE ('l_descuento        --> '||l_descuento);    
					DBMS_OUTPUT.PUT_LINE ('l_total            --> '||l_total);         
					DBMS_OUTPUT.PUT_LINE ('l_metodo_pago      --> '||l_metodo_pago);   
					DBMS_OUTPUT.PUT_LINE ('l_tipo_cobrante    --> '||l_tipo_cobrante);   
					DBMS_OUTPUT.PUT_LINE ('l_lugar_expedicion --> '||l_lugar_expedicion);   
					DBMS_OUTPUT.PUT_LINE ('l_no_certificado   --> '||l_no_certificado);   
					--log ('l_certificado      --> '||l_certificado);   
					--log ('l_sello            --> '||l_sello);   
					   
					----------------------   
					--  cfdi:Emisor   --   
					----------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Emisor  ********');   
					BEGIN   
						FOR r_cfdi_emisor IN c_cfdi_emisor (r_cfdi_comprobante.id_factura) LOOP   
							l_emisor_rfc         := r_cfdi_emisor.Rfc_Emisor;   
							l_emisor_nombre      := r_cfdi_emisor.Nombre_Emisor;   
							l_emisor_regimen     := r_cfdi_emisor.RegimenFiscal;   
							l_calleEmisor        := r_cfdi_emisor.calleEmisor;   
							l_noExteriorEmisor   := r_cfdi_emisor.noExteriorEmisor;   
							l_noInteriorEmisor   := r_cfdi_emisor.noInteriorEmisor;   
							l_coloniaEmisor      := r_cfdi_emisor.coloniaEmisor;   
							l_localidadEmisor    := r_cfdi_emisor.localidadEmisor;   
							l_municipioEmisor    := r_cfdi_emisor.municipioEmisor;   
							l_estadoEmisor       := r_cfdi_emisor.estadoEmisor;   
							l_paisEmisor         := r_cfdi_emisor.paisEmisor;   
							l_codigoPostalEmisor := r_cfdi_emisor.codigoPostalEmisor;   
							l_RegimenEmisor      := r_cfdi_emisor.RegimenEmisor;   
							DBMS_OUTPUT.PUT_LINE ('l_emisor_rfc         --> '||l_emisor_rfc);   
							DBMS_OUTPUT.PUT_LINE ('l_emisor_nombre      --> '||l_emisor_nombre);   
							DBMS_OUTPUT.PUT_LINE ('l_emisor_regimen     --> '||l_emisor_regimen);   
							DBMS_OUTPUT.PUT_LINE ('l_calleEmisor        --> '||l_calleEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_noExteriorEmisor   --> '||l_noExteriorEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_noInteriorEmisor   --> '||l_noInteriorEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_coloniaEmisor      --> '||l_coloniaEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_localidadEmisor    --> '||l_localidadEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_municipioEmisor    --> '||l_municipioEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_estadoEmisor       --> '||l_estadoEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_paisEmisor         --> '||l_paisEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_codigoPostalEmisor --> '||l_codigoPostalEmisor);   
							DBMS_OUTPUT.PUT_LINE ('l_RegimenEmisor      --> '||l_RegimenEmisor);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (cfdi:Emisor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Emisor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
   
					--------------------   
					-- cfdi:Receptor --   
					--------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Receptor  ********');   
					BEGIN   
						FOR receptor IN c_cfdi_receptor (r_cfdi_comprobante.id_factura) LOOP   
							l_receptor_rfc    := receptor.Rfc_Receptor;   
							l_receptor_nombre := receptor.Nombre_Receptor;   
							l_uso_cfdi        := receptor.UsoCFDI;   
							l_paisReceptor    := receptor.paisReceptor;   
							DBMS_OUTPUT.PUT_LINE ('l_receptor_rfc     --> '||l_receptor_rfc);   
							DBMS_OUTPUT.PUT_LINE ('l_receptor_nombre  --> '||l_receptor_nombre);   
							DBMS_OUTPUT.PUT_LINE ('l_uso_cfdi         --> '||l_uso_cfdi);   
							DBMS_OUTPUT.PUT_LINE ('l_paisReceptor         --> '||l_paisReceptor);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (cfdi:Receptor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Receptor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
					   
					-----------------------------------   
					-- cfdi:Conceptos / cfdi:Concepto   
					-----------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Conceptos / cfdi:Concepto  ********');   
					BEGIN   
						FOR conceptos IN c_cfdi_conceptos (r_cfdi_comprobante.id_factura) LOOP   
							l_ClaveProdServ       := conceptos.ClaveProdServ;   
							l_Cantidad            := conceptos.Cantidad;   
							l_ClaveUnidad         := conceptos.ClaveUnidad;   
							l_Descripcion         := conceptos.Descripcion;   
							l_ValorUnitario       := conceptos.ValorUnitario;   
							l_Importe             := conceptos.Importe;    
							l_Descuento_conceptos := conceptos.DescuentoConcep;	   
							DBMS_OUTPUT.PUT_LINE ('l_ClaveProdServ       --> '||l_ClaveProdServ);   
							DBMS_OUTPUT.PUT_LINE ('l_Cantidad            --> '||l_Cantidad);   
							DBMS_OUTPUT.PUT_LINE ('l_ClaveUnidad         --> '||l_ClaveUnidad);   
							DBMS_OUTPUT.PUT_LINE ('l_Descripcion         --> '||l_Descripcion);	   
							DBMS_OUTPUT.PUT_LINE ('l_ValorUnitario       --> '||l_ValorUnitario);   
							DBMS_OUTPUT.PUT_LINE ('l_Importe             --> '||l_Importe);   
							DBMS_OUTPUT.PUT_LINE ('l_Descuento_conceptos --> '||l_Descuento_conceptos);						   
						END LOOP;               
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (cfdi:Concepto) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Concepto)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
				   
					---------------------------------------   
					-- cfdi:Complemento / nomina12:Nomina    
					---------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina  ********');   
					BEGIN   
						FOR ComNom IN c_cfdi_com_nomina (r_cfdi_comprobante.id_factura) LOOP   
							l_nomina_version    := ComNom.Version_com_nom;   
							l_TipoNomina        := ComNom.TipoNomina;   
							l_fecha_pago        := ComNom.FechaPago;   
							l_fechainicialpago  := ComNom.FechaInicialPago;   
							l_fechafinalpago    := ComNom.FechaFinalPago;   
							l_num_dias_pagados  := ComNom.NumDiasPagados;   
							l_TotalPercepciones := ComNom.TotalPercepciones;   
							l_TotalDeducciones  := ComNom.TotalDeducciones;   
							l_TotalOtrosPagos   := ComNom.TotalOtrosPagos;   
							DBMS_OUTPUT.PUT_LINE ('l_nomina_version    --> '||l_nomina_version);   
							DBMS_OUTPUT.PUT_LINE ('l_TipoNomina        --> '||l_TipoNomina);   
							DBMS_OUTPUT.PUT_LINE ('l_fecha_pago        --> '||l_fecha_pago);   
							DBMS_OUTPUT.PUT_LINE ('l_fechainicialpago  --> '||l_fechainicialpago);   
							DBMS_OUTPUT.PUT_LINE ('l_fechafinalpago    --> '||l_fechafinalpago);   
							DBMS_OUTPUT.PUT_LINE ('l_num_dias_pagados  --> '||l_num_dias_pagados);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalPercepciones --> '||l_TotalPercepciones);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalDeducciones  --> '||l_TotalDeducciones);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalOtrosPagos   --> '||l_TotalOtrosPagos);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Nomina) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Nomina)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
				   
					-------------------------------------------------------   
					--cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
					--------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Emisor  ********');   
					BEGIN   
						FOR ComNomEmi IN c_cfdi_com_nomina_emi (r_cfdi_comprobante.id_factura) LOOP   
							l_RegistroPatronal := ComNomEmi.RegistroPatronal;   
							DBMS_OUTPUT.PUT_LINE ('l_RegistroPatronal   --> '||l_RegistroPatronal);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Emisor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Emisor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
				   
					----------------------------------------------------------   
					--cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
					-----------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Receptor  ********');   
					BEGIN   
						FOR ComNomRecep IN c_cfdi_com_nomina_rec (r_cfdi_comprobante.id_factura) LOOP   
							l_Curp                   := ComNomRecep.Curp;   
							l_NumSeguridadSocial     := ComNomRecep.NumSeguridadSocial;   
							l_FechaInicioRelLaboral  := ComNomRecep.FechaInicioRelLaboral;   
							l_Antiguedad             := ComNomRecep.Antiguedad;   
							l_TipoContrato           := ComNomRecep.TipoContrato;   
							l_TipoRegimen            := ComNomRecep.TipoRegimen;   
							l_NumeroEmpleado         := ComNomRecep.NumeroEmpleado;   
							l_RiesgoPuesto           := ComNomRecep.RiesgoPuesto;   
							l_PeriodicidadPago       := ComNomRecep.PeriodicidadPago;   
							l_SalarioDiarioIntegrado := ComNomRecep.SalarioDiarioIntegrado;   
							l_ClaveEntFed            := ComNomRecep.ClaveEntFed;   
							DBMS_OUTPUT.PUT_LINE ('l_Curp                    --> '||l_Curp);   
							DBMS_OUTPUT.PUT_LINE ('l_NumSeguridadSocial      --> '||l_NumSeguridadSocial);   
							DBMS_OUTPUT.PUT_LINE ('l_FechaInicioRelLaboral   --> '||l_FechaInicioRelLaboral);   
							DBMS_OUTPUT.PUT_LINE ('l_Antiguedad              --> '||l_Antiguedad);   
							DBMS_OUTPUT.PUT_LINE ('l_TipoContrato            --> '||l_TipoContrato);   
							DBMS_OUTPUT.PUT_LINE ('l_TipoRegimen             --> '||l_TipoRegimen);   
							DBMS_OUTPUT.PUT_LINE ('l_NumeroEmpleado          --> '||l_NumeroEmpleado);   
							DBMS_OUTPUT.PUT_LINE ('l_RiesgoPuesto            --> '||l_RiesgoPuesto);   
							DBMS_OUTPUT.PUT_LINE ('l_PeriodicidadPago        --> '||l_PeriodicidadPago);   
							DBMS_OUTPUT.PUT_LINE ('l_SalarioDiarioIntegrado  --> '||l_SalarioDiarioIntegrado);   
							DBMS_OUTPUT.PUT_LINE ('l_ClaveEntFed             --> '||l_ClaveEntFed);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Receptor) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Receptor)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
				   
					--------------------------------------------------------------   
					--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones    
					---------------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones   ********');   
					BEGIN   
						FOR percep IN c_cfdi_com_nomina_perc (r_cfdi_comprobante.id_factura) LOOP   
							l_TotalSueldos := percep.TotalSueldos;   
							l_TotalGravado := percep.TotalGravado;   
							l_TotalExento  := percep.TotalExento;   
							DBMS_OUTPUT.PUT_LINE ('l_TotalSueldos --> '||l_TotalSueldos);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalGravado --> '||l_TotalGravado);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalExento  --> '||l_TotalExento);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Percepciones) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Percepciones)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm     := NULL;   
						l_TotalSueldos := NULL;   
						l_TotalGravado := NULL;   
						l_TotalExento  := NULL;   
					END;   
					   
					-------------------------------------------------------------------------------------   
					--cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion   
					--------------------------------------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Percepciones / nomina12:Percepcion   ********');   
					l_statusLinesP:= 'SLP';   
					DBMS_OUTPUT.PUT_LINE ('INSERTA LOS DATOS DE LAS PERCEPCIONES: ');   
					FOR percep2 IN c_cfdi_com_nomina_perc2 (r_cfdi_comprobante.id_factura) LOOP   
						BEGIN   
											   
							INSERT INTO XXTOKS_HR_PERCEP_CFDI_V2 (   
															   id_lines   
															   ,tipo   
															   ,tipo_percepcion   
															   ,clave_percepcion   
															   ,concepto_percepcion   
															   ,importe_gravado   
															   ,importe_exento   
															   ,total_sueldos   
															   ,total_gravado   
															   ,total_exento   
															   ,id_header   
															   ,status_proceso   
															   ,error   
															   ,creation_by   
															   ,creation_date   
															   ,last_update_date   
															   ,last_update_by   
															 )   
							VALUES (   
									XXTOKS_PERCEP_V2_SEQ.NEXTVAL   
									,'P'   
									,percep2.TipoPercepcion   
									,percep2.ClavePercepcion   
									,percep2.ConceptoPercepcion   
									,TO_NUMBER(NVL(percep2.ImporteGravado,0))   
									,TO_NUMBER(NVL(percep2.ImporteExento,0))   
									,TO_NUMBER(NVL(l_TotalSueldos,0))   
									,TO_NUMBER(NVL(l_TotalGravado,0))   
									,TO_NUMBER(NVL(l_TotalExento,0))   
									,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
									,'EXTRAIDO'   
									,NULL   
									,APEX_UTIL.GET_CURRENT_USER_ID   
									,SYSDATE   
									,SYSDATE   
									,APEX_UTIL.GET_CURRENT_USER_ID   
								);   
							COMMIT;  
						EXCEPTION   
						WHEN OTHERS THEN   
							lc_sqlerrm := SQLERRM;   
							DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Percepcion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
							INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
							VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Percepcion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
							lc_sqlerrm := NULL;   
							l_statusLinesP:= 'ELP';   
						END;   
					   
					END LOOP;   
   
					-----------------------------------------------------------   
					--cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones   
					------------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:Nomina / nomina12:Deducciones  ********');   
					BEGIN   
						FOR deduc IN c_cfdi_com_nomina_deduc (r_cfdi_comprobante.id_factura)  LOOP   
							l_TotalOtrasDeducciones   := deduc.TotalOtrasDeducciones;   
							l_TotalImpuestosRetenidos := deduc.TotalImpuestosRetenidos;   
							DBMS_OUTPUT.PUT_LINE ('l_TotalOtrasDeducciones   --> '||l_TotalOtrasDeducciones);   
							DBMS_OUTPUT.PUT_LINE ('l_TotalImpuestosRetenidos --> '||l_TotalImpuestosRetenidos);   
						END LOOP;   
					EXCEPTION   
						WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Deducciones) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Deducciones)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm                := NULL;   
						l_TotalOtrasDeducciones   := NULL;   
						l_TotalImpuestosRetenidos := NULL;   
					END;   
					   
					------------------------------------------------------------------------------------   
					--cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion   
					------------------------------------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento /  nomina12:Nomina / nomina12:Deducciones / nomina12:Deduccion ********');   
					DBMS_OUTPUT.PUT_LINE ('INSERTA LOS DATOS DE LAS DEDUCCIONES: ');   
					l_statusLinesD:= 'SLD';   
					FOR deduc2 IN c_cfdi_com_nomina_deduc2 (r_cfdi_comprobante.id_factura) LOOP   
						BEGIN   
							INSERT INTO XXTOKS_HR_DEDUCCIONES_CFDI_V2 (   
																	id_lines   
																	,tipo   
																	,tipo_deduccion   
																	,clave_deduccion   
																	,concepto_deduccion   
																	,importe_deduccion   
																	,total_otras_deducciones   
																	,total_impuestos_retenidos   
																	,id_header   
																	,importe_gravado_d   
																	,importe_exento_d   
																	,status_proceso   
																	,error   
																	,creation_by   
																	,creation_date   
																	,last_update_date   
																	,last_update_by   
															  )   
							VALUES (   
									 XXTOKS_DEDUCIONES_V2_SEQ.NEXTVAL   
									 ,'D'   
									 ,deduc2.TipoDeduccion   
									 ,deduc2.ClaveDeduccion   
									 ,deduc2.ConceptoDeduccion   
									 ,TO_NUMBER(NVL(deduc2.ImporteDeduccion,0))   
									 ,TO_NUMBER(NVL(l_TotalOtrasDeducciones,0))   
									 ,TO_NUMBER(NVL(l_TotalImpuestosRetenidos,0))   
									 ,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
									 ,TO_NUMBER(NVL(deduc2.ImporteGravadoD,NVL(deduc2.ImporteDeduccion,0)))   
									 ,TO_NUMBER(NVL(deduc2.ImporteExentoD,0))   
									 ,'EXTRAIDO'   
									 ,NULL   
									 ,APEX_UTIL.GET_CURRENT_USER_ID   
									 ,SYSDATE   
									 ,SYSDATE   
									 ,APEX_UTIL.GET_CURRENT_USER_ID   
									);   
							COMMIT;  
						EXCEPTION   
						WHEN OTHERS THEN   
							lc_sqlerrm := SQLERRM;   
							DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:Deduccion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
							INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
							VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:Deduccion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
							COMMIT;  
							lc_sqlerrm := NULL;   
							l_statusLinesD:= 'ELD';   
						END;   
						   
					END LOOP;   
   
	   
					--------------------------------------------------------------------------------------------   
					--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo   
					--------------------------------------------------------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago / nomina12:SubsidioAlEmpleo ********');   
					BEGIN   
						FOR otrosPagos2 IN c_cfdi_com_nomina_otrospag2 (r_cfdi_comprobante.id_factura) LOOP   
							l_SubsidioCausado:= otrosPagos2.SubsidioCausado;   
							DBMS_OUTPUT.PUT_LINE ('l_SubsidioCausado  --> '||l_SubsidioCausado);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:SubsidioAlEmpleo) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:SubsidioAlEmpleo)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm        := NULL;   
						l_SubsidioCausado := NULL;   
					END;   
					   
					---------------------------------------------------------------   
					--  cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago    
					--------------------------------------------------------------   
					--log ('**** CURSOR cfdi:Complemento / nomina12:OtrosPagos / nomina12:OtroPago ********');   
					DBMS_OUTPUT.PUT_LINE ('INSERTA LOS DATOS DE LOS OTROS PAGOS: ');   
					l_statusLinesO := 'SLO';   
					FOR otrosPagos IN c_cfdi_com_nomina_otrospag (r_cfdi_comprobante.id_factura) LOOP   
						BEGIN   
							INSERT INTO XXTOKS_HR_OTROS_PAGOS_CFDI_V2(	   
																	 id_lines              
																	,tipo                  
																	,tipo_otro_pago       
																	,clave_otro_pago       
																	,concepto_otro_pago    
																	,importe_otro_pago     
																	,subsidio_causado   
																	,importe_gravado_o   
																	,importe_exento_o															   
																	,id_header             
																	,status_proceso        
																	,error                 
																	,creation_by           
																	,creation_date         
																	,last_update_date     
																	,last_update_by       
																  )   
							VALUES (   
									 XXTOKS_OTROS_V2_SEQ.NEXTVAL   
									 ,'O'   
									 ,otrosPagos.TipoOtroPago   
									 ,otrosPagos.ClaveOtroPago   
									 ,otrosPagos.ConceptoOtroPago   
									 ,TO_NUMBER(NVL(otrosPagos.ImporteOtroPago,0))   
									 ,TO_NUMBER(NVL(l_SubsidioCausado,0))   
									 ,TO_NUMBER(NVL(otrosPagos.ImporteOtroPago,0))   
									 ,0   
									 ,TO_NUMBER(NVL(r_cfdi_comprobante.id_factura,0))   
									 ,'EXTRAIDO'   
									 ,NULL   
									 ,APEX_UTIL.GET_CURRENT_USER_ID   
									 ,SYSDATE   
									 ,SYSDATE   
									 ,APEX_UTIL.GET_CURRENT_USER_ID   
									);   
							COMMIT;   
						EXCEPTION   
						WHEN OTHERS THEN   
							lc_sqlerrm := SQLERRM;   
							DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (nomina12:OtroPago) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
							INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
							VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (nomina12:OtroPago)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
							COMMIT;  
							lc_sqlerrm := NULL;   
							l_statusLinesO := 'ELO';   
						END;   
						   
					END LOOP;   
				   
					-----------------------------------------------   
					--  cfdi:Complemento / tfd:TimbreFiscalDigital   
					-----------------------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Complemento / tfd:TimbreFiscalDigital ********');   
					BEGIN   
						FOR TimFis IN c_cfdi_com_nomina_timbreFD (r_cfdi_comprobante.id_factura) LOOP   
							l_VersionTFD       := TimFis.VersionTFD;   
							l_UUID             := TimFis.uuid;   
							l_FechaTimbrado    := TimFis.FechaTimbrado;   
							l_RfcProvCertif    := TimFis.RfcProvCertif;   
							l_SelloCFD         := TimFis.SelloCFD;   
							l_NoCertificadoSAT := TimFis.NoCertificadoSAT;   
							l_SelloSAT         := TimFis.SelloSAT;   
							DBMS_OUTPUT.PUT_LINE ('l_VersionTFD        --> '||l_VersionTFD);   
							DBMS_OUTPUT.PUT_LINE ('l_UUID              --> '||l_UUID);   
							DBMS_OUTPUT.PUT_LINE ('l_FechaTimbrado     --> '||l_FechaTimbrado);   
							DBMS_OUTPUT.PUT_LINE ('l_RfcProvCertif     --> '||l_RfcProvCertif);   
							--log ('l_SelloCFD          --> '||l_SelloCFD);   
							DBMS_OUTPUT.PUT_LINE ('l_NoCertificadoSAT  --> '||l_NoCertificadoSAT);   
							--log ('l_SelloSAT          --> '|| l_SelloSAT);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (tfd:TimbreFiscalDigital) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (tfd:TimbreFiscalDigital)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
   
					---------------------------------   
					--  cfdi:Addenda / empleado:Firma   
					----------------------------------   
					DBMS_OUTPUT.PUT_LINE ('**** CURSOR cfdi:Addenda / empleado:Firma ********');   
					BEGIN   
						FOR Firma IN c_cfdi_com_nomina_firma (r_cfdi_comprobante.id_factura) LOOP   
							l_VersionFir           := Firma.VersionFir;   
							l_selloEmpleado        := Firma.selloEmpleado;   
							l_certificadoEmpleado  := Firma.certificadoEmpleado;   
							l_fechaFir             := Firma.fechaFir;   
							l_numeroCertificado    := Firma.numeroCertificado;   
							l_Layout               := Firma.Layout;   
							l_imagen               := Firma.imagen;   
							DBMS_OUTPUT.PUT_LINE ('l_VersionFir          --> '|| l_VersionFir);   
							DBMS_OUTPUT.PUT_LINE ('l_selloEmpleado       --> '|| l_selloEmpleado);   
							DBMS_OUTPUT.PUT_LINE ('l_certificadoEmpleado --> '|| l_certificadoEmpleado);   
							DBMS_OUTPUT.PUT_LINE ('l_fechaFir            --> '|| l_fechaFir);   
							DBMS_OUTPUT.PUT_LINE ('l_numeroCertificado   --> '|| l_numeroCertificado);   
							--log ('l_Layout              --> '|| l_Layout);   
							--log ('l_imagen              --> '|| l_imagen);   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (empleado:Firma) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (empleado:Firma)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
					END;   
   
					/*   
					----------------------------------------------------------   
					--  cfdi:Impuestos / cfdi:Retenciones / cfdi:Retencion    
					----------------------------------------------------------   
					BEGIN   
					  FOR Domi IN (WITH xxgrp_facturas_data_xml   
									  AS   
										(SELECT xmltype.createxml (xpfe.recibo_xml) xml,   
												xpfe.ID_FACTURA   
										   FROM xxgrg_pay_facturas_electronicas xpfe   
										  WHERE 1 = 1   
											AND xpfe.ID_FACTURA = i.ID_FACTURA)   
									SELECT res_xml.*, xfdxt.ID_FACTURA   
									  FROM xxgrp_facturas_data_xml  xfdxt,   
										   XMLTABLE (   
													 xmlnamespaces (   
																	'http://www.sat.gob.mx/cfd/3' AS "cfdi",   
																	'http://www.w3.org/2001/XMLSchema-instance' AS "xsi",   
																	'http://www.sat.gob.mx/nomina12' AS "nomina12",   
																	'http://www.sat.gob.mx/TimbreFiscalDigital' AS "tfd",   
																	'https://www.e-personal.mx/esquema/ePersonal' AS "empleado"),   
										   'cfdi:Comprobante'   
										   PASSING xfdxt.xml   
										   COLUMNS    
										   totalImpuestosRetenidos  VARCHAR2(2000) PATH 'cfdi:Impuestos/@totalImpuestosRetenidos',   
										   impuesto                 VARCHAR2(2000) PATH 'cfdi:Impuestos/cfdi:Retenciones/cfdi:Retencion/@impuesto',   
										   importe                  VARCHAR2(2000) PATH 'cfdi:Impuestos/cfdi:Retenciones/cfdi:Retencion/@importe'   
													)   
									   res_xml)   
						LOOP   
							log('Impuestos');   
						END LOOP;   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						log ('ERROR: Al extraer el nodo (cfdi:Retencion) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Retencion)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						lc_sqlerrm := NULL;   
					END;   
					*/   
   
					----DESCUENTO   
					IF l_descuento IS NULL   
					THEN   
						l_descuento := 0;   
					ELSE   
						l_descuento := l_descuento;   
					END IF;   
   
					----FECHA_PAGO   
					IF l_fecha_pago IS NULL   
					THEN   
						l_fecha_pago := NULL;   
					ELSE   
						l_fecha_pago := l_fecha_pago;   
					END IF;   
   
					----FECHA_INICIAL_PAGO   
					IF l_FechaInicialPago IS NULL   
					THEN   
						l_FechaInicialPago := NULL;   
					ELSE   
						l_FechaInicialPago := l_FechaInicialPago;   
					END IF;   
   
					----FECHA_FINAL_PAGO   
					IF l_FechaFinalPago IS NULL   
					THEN   
						l_FechaFinalPago := NULL;   
					ELSE   
						l_FechaFinalPago := l_FechaFinalPago;   
					END IF;   
   
					---+ INSERTA LOS DATOS DEL CABECERO   
					DBMS_OUTPUT.PUT_LINE ('ID_HEADER: '||TO_NUMBER(r_cfdi_comprobante.id_factura));   
					DBMS_OUTPUT.PUT_LINE ('UUID:      '||l_UUID);   
					DBMS_OUTPUT.PUT_LINE ('ESTAFETA:  '||l_NumeroEmpleado);   
					DBMS_OUTPUT.PUT_LINE ('INSERTA LOS DATOS DEL CABECERO: ');   
					   
					BEGIN					   
			   
						INSERT INTO xxtoks_hr_header_cfdi_v2   
						(	   
							"ID_HEADER"                      
							---+ cfdi:Comprobante   
							,"VERSION"                       
							,"FECHA"                         
							,"FORMA_PAGO"                    
							,"SUBTOTAL"                      
							,"MONEDA"                        
							,"DESCUENTO"                     
							,"TOTAL"                         
							,"METODO_PAGO"                   
							,"TIPO_COBRANTE"                 
							,"LUGAR_EXPEDICION"              
							,"NO_CERTIFICADO"                
							,"CERTIFICADO"                   
							,"SELLO"                         
							---+ cfdi:Emisor   
							,"EMISOR_RFC"                    
							,"EMISOR_NOMBRE"                 
							,"EMISOR_REGIMEN"    
							--   
							,"CALLE_EMISOR"           
							,"NO_EXTERIOR_EMISOR"     
							,"NO_INTERIOR_EMISOR"     
							,"COLONIA_EMISOR"         
							,"LOCALIDAD_EMISOR"       
							,"MUNICIPIO_EMISOR"       
							,"ESTADO_EMISOR"          
							,"PAIS_EMISOR"            
							,"CODIGO_POSTAL_EMISOR"   
							,"REGIMEN_EMISOR"      				   
							---+ cfdi:Receptor   
							,"RECEPTOR_RFC"                  
							,"RECEPTOR_NOMBRE"               
							,"USO_CFDI"    
							,"PAIS_RECEPTOR"					   
							---+ cfdi:Conceptos / cfdi:Concepto   
							,"CLAVE_PROD_SERV"               
							,"CANTIDAD"                      
							,"CLAVE_UNIDAD"                  
							,"DESCRIPCION"                   
							,"VALOR_UNITARIO"                
							,"IMPORTE"                        
							,"DESCUENTO_CONCEPTOS"           
							---+ cfdi:Complemento / nomina12:Nomina   
							,"NOMINA_VERSION"                
							,"TIPO_NOMINA"                   
							,"FECHA_PAGO"                    
							,"FECHA_INICIAL_PAGO"            
							,"FECHA_FINAL_PAGO"              
							,"NUM_DIAS_PAGADOS"              
							,"TOTAL_PERCEPCIONES"            
							,"TOTAL_DEDUCCIONES"             
							,"TOTAL_OTROS_PAGOS"             
							---+ cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
							,"REGISTRO_PATRONAL"             
							---+ cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
							,"CURP"                          
							,"NUM_SEGURIDAD_SOCIAL"          
							,"FECHA_INICIO_REL_LABORAL"      
							,"ANTIGUEDAD"                    
							,"TIPO_CONTRATO"                 
							,"TIPO_REGIMEN"                  
							,"NUMERO_EMPLEADO"               
							,"RIESGO_PUESTO"                 
							,"PERIODICIDAD_PAGO"             
							,"SALARIO_DIARIO_INTEGRADO"      
							,"CLAVE_ENT_FED"                 
							----+ cfdi:Complemento / tfd:TimbreFiscalDigital   
							,"VERSION_TFD"                   
							,"UUID"                          
							,"FECHA_TIMBRADO"                
							,"RFC_PROV_CERTIF"               
							,"SELLO_CFD"                     
							,"NO_CERTIFICADO_SAT"            
							,"SELLO_SAT"                     
							----+ cfdi:Addenda / empleado:Firma   
							,"VERSIONFIR"                    
							,"SELLOEMPLEADO"                 
							,"CERTIFICADOEMPLEADO"           
							,"FECHAFIR"                      
							,"NUMEROCERTIFICADO"             
							,"LAYOUT"                        
							,"IMAGEN"     
							--   
							,"STATUS_PROCESO"   
							,creation_by   
							,creation_date   
							,last_update_date   
							,last_update_by   
						)   
						VALUES    
						(   
							TO_NUMBER(r_cfdi_comprobante.id_factura)   
							---+ cfdi:Comprobante   
							,l_version   
							,l_fecha   
							,l_forma_pago   
							,TO_NUMBER(l_subtotal)   
							,l_moneda   
							,TO_NUMBER(l_descuento)   
							,TO_NUMBER(l_total)   
							,l_metodo_pago   
							,l_tipo_cobrante   
							,l_lugar_expedicion   
							,l_no_certificado   
							,l_certificado   
							,l_sello   
							---+ cfdi:Emisor   
							,l_emisor_rfc       
							,l_emisor_nombre    
							,l_emisor_regimen   
							--   
							,l_calleEmisor           
							,l_noExteriorEmisor      
							,l_noInteriorEmisor      
							,l_coloniaEmisor         
							,l_localidadEmisor       
							,l_municipioEmisor       
							,l_estadoEmisor          
							,l_paisEmisor            
							,l_codigoPostalEmisor    
							,l_RegimenEmisor         
							---+ cfdi:Receptor   
							,l_receptor_rfc      
							,l_receptor_nombre   
							,l_uso_cfdi   
							,l_paisReceptor   
							---+ cfdi:Conceptos / cfdi:Concepto   
							,l_ClaveProdServ         
							,l_Cantidad              
							,l_ClaveUnidad           
							,l_Descripcion           
							,TO_NUMBER(l_ValorUnitario)        
							,TO_NUMBER(l_Importe)               
							,TO_NUMBER(l_Descuento_conceptos)   
							---+ cfdi:Complemento / nomina12:Nomina   
							,l_nomina_version      
							,l_TipoNomina          
							,l_fecha_pago          
							,l_fechainicialpago    
							,l_fechafinalpago      
							,l_num_dias_pagados    
							,TO_NUMBER(l_TotalPercepciones)   
							,TO_NUMBER(l_TotalDeducciones)    
							,TO_NUMBER(l_TotalOtrosPagos)    
							---+ cfdi:Complemento / nomina12:Nomina / nomina12:Emisor   
							,l_RegistroPatronal   
							---+ cfdi:Complemento / nomina12:Nomina / nomina12:Receptor   
							,l_Curp                      
							,l_NumSeguridadSocial        
							,l_FechaInicioRelLaboral     
							,l_Antiguedad                
							,l_TipoContrato              
							,l_TipoRegimen               
							,l_NumeroEmpleado            
							,l_RiesgoPuesto              
							,l_PeriodicidadPago          
							,TO_NUMBER(l_SalarioDiarioIntegrado)   
							,l_ClaveEntFed    
							----+ cfdi:Complemento / tfd:TimbreFiscalDigital   
							,l_VersionTFD          
							,l_UUID    
							,l_FechaTimbrado       
							,l_RfcProvCertif    
							,l_SelloCFD            
							,l_NoCertificadoSAT    
							,l_SelloSAT    
							----+ cfdi:Addenda / empleado:Firma   
							,l_VersionFir            
							,l_selloEmpleado         
							,l_certificadoEmpleado   
							,l_fechaFir              
							,l_numeroCertificado     
							,l_Layout                
							,l_imagen     
							,'EXTRAIDO'   
							,APEX_UTIL.GET_CURRENT_USER_ID   
							,SYSDATE   
							,SYSDATE   
							,APEX_UTIL.GET_CURRENT_USER_ID   
						);   
						COMMIT;   
						   
						UPDATE XXGRG_PAY_FACTURAS_ELECTRONICAS xpfe   
						SET xpfe.status = 'EXTRAIDO'   
						WHERE xpfe.uuid = r_cfdi_comprobante.uuid   
						AND xpfe.id_factura = r_cfdi_comprobante.id_factura;   
						   
						l_sttausHeader:= 'SH';   
						   
						   
					EXCEPTION   
					WHEN OTHERS THEN   
						lc_sqlerrm := SQLERRM;   
						DBMS_OUTPUT.PUT_LINE ('ERROR: Al insertar lo datos en la tabla xxtoks_hr_header_cfdi_v2'||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
						VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al insertar lo datos en la tabla xxtoks_hr_header_cfdi_v2',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
						COMMIT;  
						lc_sqlerrm := NULL;   
						l_sttausHeader:= 'EH';   
					END;	   
   
					DBMS_OUTPUT.PUT_LINE ('XML PROCESADO....');   
   
					/*output (TO_NUMBER(r_cfdi_comprobante.id_factura)   
										  ||'|'||l_statusLinesP   
										  ||'|'||l_statusLinesD   
										  ||'|'||l_statusLinesO   
										  ||'|'||l_sttausHeader   
										  ||'|'||r_cfdi_comprobante.uuid   
										  ||'|'||l_contador   
										  ||'|'||TRUNC(SYSDATE)   
										  ||'|'||r_cfdi_comprobante.numero_de_empleado); */  
   
				ELSE   
					l_statusLinesP:= 'ELP';   
					l_statusLinesD:= 'ELD';   
					l_statusLinesO:= 'ELO';   
					l_sttausHeader:= 'EH';   
										     
					DBMS_OUTPUT.PUT_LINE ('EL XML YA HABIA SIDO PROCESADO ANTERIORMENTE....');   
   
					/*output (TO_NUMBER(r_cfdi_comprobante.id_factura)   
										  ||'|'||l_statusLinesP   
										  ||'|'||l_statusLinesD   
										  ||'|'||l_statusLinesO   
										  ||'|'||l_sttausHeader   
										  ||'|'||r_cfdi_comprobante.uuid   
										  ||'|'||l_contador   
										  ||'|'||TRUNC(SYSDATE)   
										  ||'|'||r_cfdi_comprobante.numero_de_empleado); */  
					   
					INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
				 	VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'YA EXISTE EL XML EN LA TABLA',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
				    COMMIT;  
				  
				END IF;   
								   
				l_contador                 := NULL;   
				l_version                  := NULL;   
				l_fecha                    := NULL;   
				l_forma_pago               := NULL;   
				l_subtotal                 := NULL;   
				l_moneda                   := NULL;   
				l_descuento                := NULL;   
				l_total                    := NULL;   
				l_metodo_pago              := NULL;   
				l_tipo_cobrante            := NULL;   
				l_lugar_expedicion         := NULL;   
				l_no_certificado           := NULL;   
				l_certificado              := NULL;   
				l_sello                    := NULL;   
				l_emisor_rfc               := NULL;    
				l_emisor_nombre            := NULL;    
				l_emisor_regimen           := NULL;   
				l_receptor_rfc             := NULL;   
				l_receptor_nombre          := NULL;   
				l_uso_cfdi                 := NULL;   
				l_ClaveProdServ            := NULL;        
				l_Cantidad                 := NULL;           
				l_ClaveUnidad              := NULL;          
				l_Descripcion              := NULL;         
				l_ValorUnitario            := NULL;      
				l_Importe                  := NULL;            
				l_Descuento_conceptos      := NULL;   
				l_nomina_version           := NULL;     
				l_TipoNomina               := NULL;       
				l_fecha_pago               := NULL;        
				l_fechainicialpago         := NULL;   
				l_fechafinalpago           := NULL;   
				l_num_dias_pagados         := NULL;   
				l_TotalPercepciones        := NULL;   
				l_TotalDeducciones         := NULL;   
				l_TotalOtrosPagos          := NULL;   
				l_RegistroPatronal         := NULL;   
				l_Curp                     := NULL;                   
				l_NumSeguridadSocial       := NULL;      
				l_FechaInicioRelLaboral    := NULL;   
				l_Antiguedad               := NULL;       
				l_TipoContrato             := NULL;       
				l_TipoRegimen              := NULL;       
				l_NumeroEmpleado           := NULL;       
				l_RiesgoPuesto             := NULL;       
				l_PeriodicidadPago         := NULL;       
				l_SalarioDiarioIntegrado   := NULL;   
				l_ClaveEntFed              := NULL;   
				l_VersionTFD               := NULL;      
				l_UUID                     := NULL;   
				l_FechaTimbrado            := NULL;     
				l_RfcProvCertif            := NULL;   
				l_SelloCFD                 := NULL;   
				l_NoCertificadoSAT         := NULL;   
				l_SelloSAT                 := NULL;   
				l_VersionFir               := NULL;      
				l_selloEmpleado            := NULL;      
				l_certificadoEmpleado      := NULL;   
				l_fechaFir                 := NULL;      
				l_numeroCertificado        := NULL;   
				l_Layout                   := NULL;     
				l_imagen                   := NULL;   
				l_TotalSueldos             := NULL;   
				l_TotalGravado             := NULL;   
				l_TotalExento              := NULL;   
				l_TotalOtrasDeducciones    := NULL;   
				l_TotalImpuestosRetenidos  := NULL;   
				l_SubsidioCausado          := NULL;   
				--l_sta_pro_deduc            := NULL;   
				--l_error_deduc              := NULL;   
				--l_sta_pro_otro             := NULL;   
				--l_error_otro               := NULL;   
				--l_sta_pro_per              := NULL;   
				--l_error_percep             := NULL;   
				   
				DBMS_OUTPUT.PUT_LINE ('*****************************************************************************************');   
				DBMS_OUTPUT.PUT_LINE (' ');   
			   
			EXCEPTION   
			WHEN OTHERS THEN   
				lc_sqlerrm := SQLERRM;   
				DBMS_OUTPUT.PUT_LINE ('ERROR: Al extraer el nodo (cfdi:Comprobante) '||' - '||'Factura ID: '||TO_NUMBER(r_cfdi_comprobante.id_factura)||' - '||lc_sqlerrm);   
				INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
				VALUES (TO_NUMBER(r_cfdi_comprobante.id_factura),r_cfdi_comprobante.uuid,'ERROR: Al extraer el nodo (cfdi:Comprobante)',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);   
				COMMIT;  
				lc_sqlerrm := NULL;   
			END;   
	   
            COMMIT;   
        END LOOP;   
		   
		--COMMIT;   
        --UTL_FILE.fclose (fileHandler);   
		--UTL_FILE.fclose (fileHandler_log);   
   
    EXCEPTION   
    WHEN OTHERS THEN   
		lc_sqlerrm := SQLERRM;   
		DBMS_OUTPUT.PUT_LINE ('ERROR: Al leer la tabla de los XML recibidos'||' - '||lc_sqlerrm);   
		INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,UUID,MENSAJE,ERROR_ORACLE,FECHA)   
		VALUES (-9999,'ALL UUID','ERROR: Al leer la tabla de los XML recibidos',SUBSTR (lc_sqlerrm, 1, 1000), SYSDATE);	   
		COMMIT;  
  
    END get_data_cfdi2;   
  
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
	PROCEDURE get_facturas2(l_menssaje OUT VARCHAR2)   
	IS  
	  
		v_directory_name    VARCHAR2(240) := 'TOKS_OUTGOING_FIRMADOS';  
		v_error             VARCHAR2(500);  
		l_uuid_exists       NUMBER;  
		l_job_name    	    VARCHAR2(2000):= 'XXTOKS_PAY_EXTR_CFDI';   
		l_sql         	    VARCHAR2(5000);   
		l_job_action  	    VARCHAR2(5000);   
		l_seq_job     	    NUMBER;   
		l_xml               XMLTYPE;		  
		  
		--  
		  
		/*CURSOR c_archivos IS  
		SELECT  
			 uuid          AS id_recibo  
			,uuid||'.xml'  AS nombre_archivo_recibo  
			--  
			,rfc_emisor	             
			,rfc_receptor	         
			,employee_number	     
			,fechapago	             
			,periodo	             
			,montototal	             
			,periodicidad_pago                
		FROM  
			xxtoks_recibos_firmados_ext  
		ORDER BY    
			uuid;*/  
  
		  
	BEGIN  
		--  
		DBMS_OUTPUT.PUT_LINE('Inicio de ejecucion de proceso: '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS'));  
		--  
		--  
		/*FOR v_archivo IN c_archivos LOOP  
			--  
			BEGIN  
			      
			    --Validaci?n de uuid  
			    SELECT COUNT(*)   
			    INTO l_uuid_exists  
			    FROM XXGRG_PAY_FACTURAS_ELECTRONICAS_V2  
			    WHERE status <> 'CANCELADA'  
			    AND uuid = v_archivo.id_recibo; --uuid   
				  
				IF l_uuid_exists > 0 THEN  
				    
				    DBMS_OUTPUT.PUT_LINE('El UUID '||v_archivo.id_recibo||' ya existe en la tabla');  
				  
				ELSIF l_uuid_exists = 0  THEN  
                      
					BEGIN  
					    --Bloque para lectura del archivo  
						l_xml := XMLTYPE( Bfilename (v_directory_name, v_archivo.nombre_archivo_recibo)  
										,nls_charset_id('AL32UTF8')  
										 );  
										   
						--+  
						INSERT INTO XXGRG_PAY_FACTURAS_ELECTRONICAS_V2   
						(  
						   numero_de_empleado  
						  ,fecha_pago  
						  ,rfc_emisor  
						  ,rfc_receptor  
						  ,periodo  
						  ,total  
						  ,recibo_xml  
						  ,periocidad_de_pago  
						  ,uuid  
						  ,status  
						  ,creation_date  
						  ,last_update_date  
						  ,created_by  
						  ,last_update_by  
						)  
						values  
						(  
							  v_archivo.employee_number                                    --v_numero_empleado  
							 ,v_archivo.fechapago                                          --v_fecha_pago  
							 ,v_archivo.rfc_emisor                                         --v_rfc_emisor  
							 ,v_archivo.rfc_receptor                                       --v_rfc_receptor  
							 ,v_archivo.periodo                                            --v_periodo  
							 ,TO_NUMBER(v_archivo.montototal)                              --v_total  
							 ,l_xml                                                        --v_recibo_xml  
							 ,v_archivo.periodicidad_pago                                  --v_periocidad_de_pago  
							 ,v_archivo.id_recibo                                          --v_uuid  
							 ,'RECIBIDA'  
							 ,SYSDATE  
							 ,SYSDATE  
							 ,'-1'  
							 ,'-1'  
						);	  
						COMMIT;  
						  
						DBMS_OUTPUT.PUT_LINE('Se inserto el archivo: '|| v_archivo.nombre_archivo_recibo );  
						l_xml := NULL;  
						  
					EXCEPTION   
					 WHEN OTHERS THEN   
						v_error := SQLERRM;  
		    
						INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,  
																	UUID,  
																	MENSAJE,  
																	ERROR_ORACLE,  
																	FECHA)   
																	VALUES (null,  
																			v_archivo.id_recibo,  
																			'ERROR: Error al invocar LOB FILEOPEN: ' || v_archivo.nombre_archivo_recibo,  
																			v_error,  
																			SYSDATE);  
																			   
						--+  
						INSERT INTO XXGRG_PAY_FACTURAS_ELECTRONICAS_V2  
							(   
								numero_de_empleado  
								,fecha_pago  
								,rfc_emisor  
								,rfc_receptor  
								,periodo  
								,total  
								  
								,periocidad_de_pago  
								,uuid  
								,status  
								,attribute1  
								,creation_date  
								,last_update_date  
								,created_by  
								,last_update_by  
							)  
							VALUES  
							(   
								 v_archivo.employee_number        --v_numero_empleado  
								,v_archivo.fechapago              --v_fecha_pago  
								,v_archivo.rfc_emisor             --v_rfc_emisor  
								,v_archivo.rfc_receptor           --v_rfc_receptor  
								,v_archivo.periodo                --v_periodo  
								,TO_NUMBER(v_archivo.montototal)  --v_total  
							  
								,v_archivo.periodicidad_pago      --v_periocidad_de_pago  
								,v_archivo.id_recibo              --v_uuid  
								,'ERROR'  
								, v_archivo.nombre_archivo_recibo|| ' no existe en el directorio ERR:' || v_error  
								,SYSDATE  
								,SYSDATE  
								,'-1'  
								,'-1'  
							);  
									  
						  
					END;  
				  
				END IF;  
				  
			EXCEPTION  
  
			   WHEN OTHERS THEN   
			     v_error := SQLERRM;  
			    
				 INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,  
															 UUID,  
															 MENSAJE,  
															 ERROR_ORACLE,  
															 FECHA)   
															 VALUES (null,  
																	 '',  
																	 'ERROR: Error principal FOR get_facturas2',  
																	 v_error,  
																	 SYSDATE);  
  
			END;  
			--  
            l_xml := NULL;  
		END LOOP;  
		*/  
		--  
		--DBMS_OUTPUT.PUT_LINE('Fin de ejecucion de carga de archivos cfdi: '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS'));  
		  
		--Aqui extrae los datos de los nodos de las facturas XML 	   
		--GRG_PAY_EXTRACCION_CFDI_PKG.get_data_cfdi2(l_menssaje);  
		   
		l_seq_job:= XXTOKS_PAY_EXTR_CFDI_SEQ.NEXTVAL;   
		   
		l_sql := '  DECLARE   
						l_menssaje  VARCHAR2(250);   
					BEGIN   
						GRG_PAY_EXTRACCION_CFDI_PKG.get_data_cfdi(l_menssaje);   
					END;';   
		   
		l_job_action:= REPLACE(l_sql,'''''','NULL');   
  
		dbms_scheduler.create_job (  
									   job_name   => l_job_name||l_seq_job   
									  ,job_type   => 'PLSQL_BLOCK'   
									  ,job_action => l_job_action   
									  ,enabled    => TRUE   
									  ,auto_drop  => TRUE   
									  ,comments   => 'Ejecuta de forma asincrona el proceso de extraccion de los nodos de XML del timbrado del ATI'  
								  );   
  
		--  
  
	EXCEPTION  
	 WHEN OTHERS THEN   
	  v_error := SQLERRM;  
	    
		 INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA,  
													 UUID,  
													 MENSAJE,  
													 ERROR_ORACLE,  
													 FECHA)   
													 VALUES (null,  
															 '',  
															 'ERROR: Error principal al ejecutar get_facturas2',  
															 v_error,  
															 SYSDATE);  
		 COMMIT;  
  
	END get_facturas2;  
	 
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
-------------------------------------------------------------------------------  
	/* Formatted on 01/12/2022 02:17:33 p. m. (QP5 v5.391) */ 
PROCEDURE get_ERROR (x OUT VARCHAR2) 
IS 
    l_xml   XMLTYPE; 
 
    CURSOR C_CFDI_COMPROBANTE IS 
          SELECT XPFE.ID_FACTURA, XPFE.UUID 
            FROM XXGRG_PAY_FACTURAS_ELECTRONICAS XPFE 
           WHERE     XPFE.STATUS = 'RECIBIDA' 
                 AND XPFE.ATTRIBUTE1 IS NULL --QUE NO SEA UN RECIBO CON EXCEPCION 
                 AND XPFE.RECIBO_XML IS NOT NULL       --QUE EL XML TENGA INFO 
        ORDER BY XPFE.ID_FACTURA DESC; 
BEGIN 
    FOR PRUE IN C_CFDI_COMPROBANTE 
    LOOP 
        BEGIN 
            SELECT XMLTYPE.CREATEXML (XPFE.RECIBO_XML)     XML 
              INTO l_xml 
              FROM XXGRG_PAY_FACTURAS_ELECTRONICAS XPFE 
             WHERE XPFE.ID_FACTURA = PRUE.ID_FACTURA; 
        EXCEPTION 
            WHEN OTHERS 
            THEN 
                --DBMS_OUTPUT.PUT_LINE (PRUE.UUID); 
                UPDATE XXGRG_PAY_FACTURAS_ELECTRONICAS 
                   SET STATUS = 'ERROR' 
                 WHERE UUID = PRUE.UUID; 
 
                COMMIT; 
 
                INSERT INTO XXTOKS_PAY_EXTRACCION_CFDI_LOG (ID_FACTURA, 
                                                            UUID, 
                                                            MENSAJE, 
                                                            FECHA) 
                     VALUES (PRUE.ID_FACTURA, 
                             PRUE.UUID, 
                             'ERROR: El formato de XML no pudo ser leido', 
                             SYSDATE); 
 
                COMMIT; 
        END; 
    END LOOP; 
END get_ERROR; 
 
END GRG_PAY_EXTRACCION_CFDI_PKG;
/

